./drivers/usb/musb/musb_core.c:		fifosize = epinfo->epsize >> 3;
./drivers/usb/musb/musb_core.c:		writeb(epinfo->epnum, &musbr->index);
./drivers/usb/musb/musb_core.c:		if (epinfo->epdir) {
./drivers/usb/musb/musb_core.c:		fifoaddr += epinfo->epsize;
./drivers/qe/fdt.c:		&qe_fw_info->extended_modes, sizeof(u64));
./drivers/qe/fdt.c:	ret = fdt_setprop_string(blob, node, "id", qe_fw_info->id);
./drivers/qe/fdt.c:	ret = fdt_setprop(blob, node, "virtual-traps", qe_fw_info->vtraps,
./drivers/qe/fdt.c:		sizeof(qe_fw_info->vtraps));
./drivers/qe/uec_phy.c:	if (mii_info->phyinfo->ack_interrupt)
./drivers/qe/uec_phy.c:		mii_info->phyinfo->ack_interrupt (mii_info);
./drivers/qe/uec_phy.c:	mii_info->interrupts = interrupts;
./drivers/qe/uec_phy.c:	if (mii_info->phyinfo->config_intr)
./drivers/qe/uec_phy.c:		mii_info->phyinfo->config_intr (mii_info);
./drivers/qe/uec_phy.c:	mii_info->advertising &= mii_info->phyinfo->features;
./drivers/qe/uec_phy.c:	advertise = mii_info->advertising;
./drivers/qe/uec_phy.c:	u32 features = mii_info->phyinfo->features;
./drivers/qe/uec_phy.c:	switch (mii_info->speed) {
./drivers/qe/uec_phy.c:		mii_info->speed = SPEED_100;
./drivers/qe/uec_phy.c:		mii_info->speed = SPEED_10;
./drivers/qe/uec_phy.c:		ugphy_err ("%s: Bad speed!", mii_info->dev->name);
./drivers/qe/uec_phy.c:	if (mii_info->autoneg) {
./drivers/qe/uec_phy.c:		advertise = mii_info->advertising;
./drivers/qe/uec_phy.c:	if (mii_info->autoneg) {
./drivers/qe/uec_phy.c:				mii_info->link = 0;
./drivers/qe/uec_phy.c:		mii_info->link = 1;
./drivers/qe/uec_phy.c:			mii_info->link = 1;
./drivers/qe/uec_phy.c:			mii_info->link = 0;
./drivers/qe/uec_phy.c:	if (mii_info->autoneg) {
./drivers/qe/uec_phy.c:			mii_info->speed = SPEED_1000;
./drivers/qe/uec_phy.c:				mii_info->duplex = DUPLEX_FULL;
./drivers/qe/uec_phy.c:				mii_info->duplex = DUPLEX_HALF;
./drivers/qe/uec_phy.c:				mii_info->duplex = DUPLEX_FULL;
./drivers/qe/uec_phy.c:				mii_info->duplex = DUPLEX_HALF;
./drivers/qe/uec_phy.c:				mii_info->speed = SPEED_100;
./drivers/qe/uec_phy.c:				mii_info->speed = SPEED_10;
./drivers/qe/uec_phy.c:		mii_info->pause = 0;
./drivers/qe/uec_phy.c:	struct eth_device *edev = mii_info->dev;
./drivers/qe/uec_phy.c:	if (uec->uec_info->enet_interface == ENET_1000_RGMII_RXID) {
./drivers/qe/uec_phy.c:	struct eth_device *edev = mii_info->dev;
./drivers/qe/uec_phy.c:	if (uec->uec_info->enet_interface == ENET_1000_RGMII_ID) {
./drivers/qe/uec_phy.c:	if (mii_info->autoneg && mii_info->link) {
./drivers/qe/uec_phy.c:			mii_info->duplex = DUPLEX_FULL;
./drivers/qe/uec_phy.c:			mii_info->duplex = DUPLEX_HALF;
./drivers/qe/uec_phy.c:			mii_info->speed = SPEED_1000;
./drivers/qe/uec_phy.c:			mii_info->speed = SPEED_100;
./drivers/qe/uec_phy.c:			mii_info->speed = SPEED_10;
./drivers/qe/uec_phy.c:		mii_info->pause = 0;
./drivers/qe/uec_phy.c:	if (mii_info->interrupts == MII_INTERRUPT_ENABLED)
./drivers/qe/uec_phy.c:	if (mii_info->autoneg && mii_info->link) {
./drivers/qe/uec_phy.c:			mii_info->speed = SPEED_100;
./drivers/qe/uec_phy.c:			mii_info->speed = SPEED_10;
./drivers/qe/uec_phy.c:			mii_info->duplex = DUPLEX_FULL;
./drivers/qe/uec_phy.c:			mii_info->duplex = DUPLEX_HALF;
./drivers/qe/uec_phy.c:	if (mii_info->interrupts == MII_INTERRUPT_ENABLED)
./drivers/qe/uec_phy.c:	mii_info->autoneg = 0; /* Turn off auto negotiation for fixed phy */
./drivers/qe/uec_phy.c:		if (strncmp(mii_info->dev->name, fixed_phy_port[i].name,
./drivers/qe/uec_phy.c:				strlen(mii_info->dev->name)) == 0) {
./drivers/qe/uec_phy.c:			mii_info->speed = fixed_phy_port[i].speed;
./drivers/qe/uec_phy.c:			mii_info->duplex = fixed_phy_port[i].duplex;
./drivers/qe/uec_phy.c:			mii_info->link = 1; /* Link is always UP */
./drivers/qe/uec_phy.c:			mii_info->pause = 0;
./drivers/qe/uec_phy.c:	if (mii_info->autoneg && mii_info->link) {
./drivers/qe/uec_phy.c:				mii_info->duplex = DUPLEX_HALF;
./drivers/qe/uec_phy.c:				mii_info->speed = SPEED_10;
./drivers/qe/uec_phy.c:				mii_info->duplex = DUPLEX_FULL;
./drivers/qe/uec_phy.c:				mii_info->speed = SPEED_10;
./drivers/qe/uec_phy.c:				mii_info->duplex = DUPLEX_HALF;
./drivers/qe/uec_phy.c:				mii_info->speed = SPEED_100;
./drivers/qe/uec_phy.c:				mii_info->duplex = DUPLEX_FULL;
./drivers/qe/uec_phy.c:				mii_info->speed = SPEED_100;
./drivers/qe/uec_phy.c:		mii_info->pause = 0;
./drivers/qe/uec_phy.c:	return mii_info->mdio_read (mii_info->dev, mii_info->mii_id, regnum);
./drivers/qe/uec_phy.c:	mii_info->mdio_write (mii_info->dev, mii_info->mii_id, regnum, val);
./drivers/qe/uec_phy.c:	if (mii_info->autoneg) {
./drivers/qe/uccf.c:	if ((uf_info->ucc_num < 0) || (uf_info->ucc_num > UCC_MAX_NUM - 1)) {
./drivers/qe/uccf.c:	uccf->uf_regs	= (ucc_fast_t *)ucc_get_reg_baseaddr(uf_info->ucc_num);
./drivers/qe/uccf.c:	if (uf_info->eth_type == GIGA_ETH) {
./drivers/qe/uccf.c:	if (uf_info->eth_type == FAST_ETH) {
./drivers/qe/uccf.c:	if (uf_info->rx_clock != QE_CLK_NONE) {
./drivers/qe/uccf.c:		if (ucc_set_clk_src(uf_info->ucc_num,
./drivers/qe/uccf.c:			 uf_info->rx_clock, COMM_DIR_RX)) {
./drivers/qe/uccf.c:	if (uf_info->tx_clock != QE_CLK_NONE) {
./drivers/qe/uccf.c:		if (ucc_set_clk_src(uf_info->ucc_num,
./drivers/qe/uccf.c:			 uf_info->tx_clock, COMM_DIR_TX)) {
./drivers/qe/uec.c:		 ucc_fast_get_qe_cr_subblock(uec->uec_info->uf_info.ucc_num);
./drivers/qe/uec.c:		 ucc_fast_get_qe_cr_subblock(uec->uec_info->uf_info.ucc_num);
./drivers/qe/uec.c:	 ucc_fast_get_qe_cr_subblock(uec->uec_info->uf_info.ucc_num);
./drivers/qe/uec.c:	 ucc_fast_get_qe_cr_subblock(uec->uec_info->uf_info.ucc_num);
./drivers/qe/uec.c:	if (uec->uec_info->uf_info.ucc_num >= UCC_MAX_NUM) {
./drivers/qe/uec.c:	if (uec->uec_info->uf_info.ucc_num >= UCC_MAX_NUM) {
./drivers/qe/uec.c:	if (uec->uec_info->uf_info.eth_type == GIGA_ETH) {
./drivers/qe/uec.c:		mii_info->speed = SPEED_1000;
./drivers/qe/uec.c:		mii_info->speed = SPEED_100;
./drivers/qe/uec.c:	mii_info->duplex = DUPLEX_FULL;
./drivers/qe/uec.c:	mii_info->pause = 0;
./drivers/qe/uec.c:	mii_info->link = 1;
./drivers/qe/uec.c:	mii_info->advertising = (ADVERTISED_10baseT_Half |
./drivers/qe/uec.c:	mii_info->autoneg = 1;
./drivers/qe/uec.c:	mii_info->mii_id = uec->uec_info->phy_address;
./drivers/qe/uec.c:	mii_info->dev = dev;
./drivers/qe/uec.c:	mii_info->mdio_read = &uec_read_phy_reg;
./drivers/qe/uec.c:	mii_info->mdio_write = &uec_write_phy_reg;
./drivers/qe/uec.c:	qe_set_mii_clk_src(uec->uec_info->uf_info.ucc_num);
./drivers/qe/uec.c:	mii_info->phyinfo = curphy;
./drivers/qe/uec.c:	if (mii_info->link) {
./drivers/qe/uec.c:		if (mii_info->duplex != uec->oldduplex) {
./drivers/qe/uec.c:			if (!(mii_info->duplex)) {
./drivers/qe/uec.c:			uec->oldduplex = mii_info->duplex;
./drivers/qe/uec.c:		if (mii_info->speed != uec->oldspeed) {
./drivers/qe/uec.c:			if (uec->uec_info->uf_info.eth_type == GIGA_ETH) {
./drivers/qe/uec.c:				switch (mii_info->speed) {
./drivers/qe/uec.c:						dev->name, mii_info->speed);
./drivers/qe/uec.c:			printf("%s: Speed %dBT\n", dev->name, mii_info->speed);
./drivers/qe/uec.c:			uec->oldspeed = mii_info->speed;
./drivers/qe/uec.c:	} else { /* if (mii_info->link) */
./drivers/qe/uec.c:	uec->mii_info->phyinfo->read_status(uec->mii_info);
./drivers/qe/uec.c:	end_bd = (u32)uec->p_tx_bd_ring + (uec_info->tx_bd_ring_len - 1)
./drivers/qe/uec.c:	p_init_enet_param->rgftgfrxglobal |= ((u32)uec_info->num_threads_rx)
./drivers/qe/uec.c:	p_init_enet_param->rgftgfrxglobal |= ((u32)uec_info->num_threads_tx)
./drivers/qe/uec.c:						 (u32)uec_info->risc_rx;
./drivers/qe/uec.c:				 init_enet_offset | (u32)uec_info->risc_rx;
./drivers/qe/uec.c:					 (u32)uec_info->risc_tx;
./drivers/qe/uec.c:				 init_enet_offset | (u32)uec_info->risc_tx;
./drivers/qe/uec.c:				uec->uec_info->uf_info.ucc_num);
./drivers/qe/uec.c:	uf_info = &(uec_info->uf_info);
./drivers/qe/uec.c:	if ((uec_info->rx_bd_ring_len < UEC_RX_BD_RING_SIZE_MIN) || \
./drivers/qe/uec.c:		(uec_info->rx_bd_ring_len % UEC_RX_BD_RING_SIZE_ALIGNMENT)) {
./drivers/qe/uec.c:	if (uec_info->tx_bd_ring_len < UEC_TX_BD_RING_SIZE_MIN) {
./drivers/qe/uec.c:	if (uec_convert_threads_num(uec_info->num_threads_tx,
./drivers/qe/uec.c:	if (uec_convert_threads_num(uec_info->num_threads_rx,
./drivers/qe/uec.c:	uec_set_mac_if_mode(uec, uec_info->enet_interface);
./drivers/qe/uec.c:	qe_set_mii_clk_src(uec_info->uf_info.ucc_num);
./drivers/qe/uec.c:	enet_interface = uec->uec_info->enet_interface;
./drivers/qe/uec.c:	if (uec->uec_info->enet_interface == ENET_1000_SGMII) {
./drivers/qe/uec.c:	length = ((uec_info->tx_bd_ring_len * SIZEOFBD) /
./drivers/qe/uec.c:	if ((uec_info->tx_bd_ring_len * SIZEOFBD) %
./drivers/qe/uec.c:	length = uec_info->rx_bd_ring_len * SIZEOFBD;
./drivers/qe/uec.c:	length = uec_info->rx_bd_ring_len * MAX_RXBUF_LEN;
./drivers/qe/uec.c:	for (i = 0; i < uec_info->tx_bd_ring_len; i++) {
./drivers/qe/uec.c:	for (i = 0; i < uec_info->rx_bd_ring_len; i++) {
./drivers/qe/uec.c:		curphy = uec->mii_info->phyinfo;
./drivers/qe/uec.c:		} while (((i-- > 0) && !uec->mii_info->link) || err);
./drivers/qe/uec.c:	return (uec->mii_info->link ? 0 : -1);
./drivers/qe/uec.c:	uec_info->risc_tx = QE_RISC_ALLOCATION_FOUR_RISCS;
./drivers/qe/uec.c:	uec_info->risc_rx = QE_RISC_ALLOCATION_FOUR_RISCS;
./drivers/qe/uec.c:	devlist[uec_info->uf_info.ucc_num] = dev;
./drivers/qe/uec.c:	sprintf(dev->name, "FSL UEC%d", uec_info->uf_info.ucc_num);
./drivers/net/mcffec.c:	volatile fec_t *fecp = (fec_t *) (info->iobase);
./drivers/net/mcffec.c:	miiphy_read(dev->name, info->phy_addr, PHY_BMSR, &phyStatus);
./drivers/net/mcffec.c:	while ((info->txbd[info->txIdx].cbd_sc & BD_ENET_TX_READY) &&
./drivers/net/mcffec.c:	info->txbd[info->txIdx].cbd_bufaddr = (uint) packet;
./drivers/net/mcffec.c:	info->txbd[info->txIdx].cbd_datlen = length;
./drivers/net/mcffec.c:	info->txbd[info->txIdx].cbd_sc |= BD_ENET_TX_RDY_LST;
./drivers/net/mcffec.c:	while ((info->txbd[info->txIdx].cbd_sc & BD_ENET_TX_READY) &&
./drivers/net/mcffec.c:	       info->txbd[info->txIdx].cbd_sc,
./drivers/net/mcffec.c:	       (info->txbd[info->txIdx].cbd_sc & 0x003C) >> 2);
./drivers/net/mcffec.c:	rc = (info->txbd[info->txIdx].cbd_sc & BD_ENET_TX_STATS);
./drivers/net/mcffec.c:	info->txIdx = (info->txIdx + 1) % TX_BUF_CNT;
./drivers/net/mcffec.c:	volatile fec_t *fecp = (fec_t *) (info->iobase);
./drivers/net/mcffec.c:		if (info->rxbd[info->rxIdx].cbd_sc & BD_ENET_RX_EMPTY) {
./drivers/net/mcffec.c:		length = info->rxbd[info->rxIdx].cbd_datlen;
./drivers/net/mcffec.c:		if (info->rxbd[info->rxIdx].cbd_sc & 0x003f) {
./drivers/net/mcffec.c:			       info->rxbd[info->rxIdx].cbd_sc);
./drivers/net/mcffec.c:			       info->rxbd[info->rxIdx].cbd_sc);
./drivers/net/mcffec.c:			NetReceive(NetRxPackets[info->rxIdx], length);
./drivers/net/mcffec.c:		info->rxbd[info->rxIdx].cbd_datlen = 0;
./drivers/net/mcffec.c:		if (info->rxIdx == LAST_PKTBUFSRX) {
./drivers/net/mcffec.c:			info->rxbd[PKTBUFSRX - 1].cbd_sc = BD_ENET_RX_W_E;
./drivers/net/mcffec.c:			info->rxIdx = 0;
./drivers/net/mcffec.c:			info->rxbd[info->rxIdx].cbd_sc = BD_ENET_RX_EMPTY;
./drivers/net/mcffec.c:			info->rxIdx++;
./drivers/net/mcffec.c:	volatile fec_t *fecp = (fec_t *) (info->iobase);
./drivers/net/mcffec.c:	volatile fec_t *fecp = (fec_t *) (info->iobase);
./drivers/net/mcffec.c:	setFecDuplexSpeed(fecp, bd, info->dup_spd);
./drivers/net/mcffec.c:	info->rxIdx = 0;
./drivers/net/mcffec.c:	info->txIdx = 0;
./drivers/net/mcffec.c:		info->rxbd[i].cbd_sc = BD_ENET_RX_EMPTY;
./drivers/net/mcffec.c:		info->rxbd[i].cbd_datlen = 0;	/* Reset */
./drivers/net/mcffec.c:		info->rxbd[i].cbd_bufaddr = (uint) NetRxPackets[i];
./drivers/net/mcffec.c:	info->rxbd[PKTBUFSRX - 1].cbd_sc |= BD_ENET_RX_WRAP;
./drivers/net/mcffec.c:		info->txbd[i].cbd_sc = BD_ENET_TX_LAST | BD_ENET_TX_TC;
./drivers/net/mcffec.c:		info->txbd[i].cbd_datlen = 0;	/* Reset */
./drivers/net/mcffec.c:		info->txbd[i].cbd_bufaddr = (uint) (&info->txbuf[0]);
./drivers/net/mcffec.c:	info->txbd[TX_BUF_CNT - 1].cbd_sc |= BD_ENET_TX_WRAP;
./drivers/net/mcffec.c:	fecp->erdsr = (unsigned int)(&info->rxbd[0]);
./drivers/net/mcffec.c:	fecp->etdsr = (unsigned int)(&info->txbd[0]);
./drivers/net/mcffec.c:	volatile fec_t *fecp = (fec_t *) (info->iobase);
./drivers/net/mcffec.c:	info->rxIdx = info->txIdx = 0;
./drivers/net/mcffec.c:	memset(info->rxbd, 0, PKTBUFSRX * sizeof(cbd_t));
./drivers/net/mcffec.c:	memset(info->txbd, 0, TX_BUF_CNT * sizeof(cbd_t));
./drivers/net/mcffec.c:	memset(info->txbuf, 0, DBUF_LENGTH);
./drivers/net/tsec.c:	priv->regs = tsec_info->regs;
./drivers/net/tsec.c:	priv->phyregs = tsec_info->miiregs;
./drivers/net/tsec.c:	priv->phyaddr = tsec_info->phyaddr;
./drivers/net/tsec.c:	priv->flags = tsec_info->flags;
./drivers/net/tsec.c:	sprintf(dev->name, tsec_info->devname);
./drivers/net/tsec.c:	phy_run_commands(priv, priv->phyinfo->config);
./drivers/net/tsec.c:		phy_run_commands(priv, priv->phyinfo->startup);
./drivers/net/tsec.c:		phy_run_commands(priv, priv->phyinfo->shutdown);
./drivers/net/sh_eth.c:	port_info->tx_desc_cur->td2 = ADDR_TO_PHY(packet);
./drivers/net/sh_eth.c:	port_info->tx_desc_cur->td1 = len << 16;
./drivers/net/sh_eth.c:	if (port_info->tx_desc_cur->td0 & TD_TDLE)
./drivers/net/sh_eth.c:		port_info->tx_desc_cur->td0 = TD_TACT | TD_TFP | TD_TDLE;
./drivers/net/sh_eth.c:		port_info->tx_desc_cur->td0 = TD_TACT | TD_TFP;
./drivers/net/sh_eth.c:	while (port_info->tx_desc_cur->td0 & TD_TACT && timeout--)
./drivers/net/sh_eth.c:	port_info->tx_desc_cur++;
./drivers/net/sh_eth.c:	if (port_info->tx_desc_cur >= port_info->tx_desc_base + NUM_TX_DESC)
./drivers/net/sh_eth.c:		port_info->tx_desc_cur = port_info->tx_desc_base;
./drivers/net/sh_eth.c:	if (!(port_info->rx_desc_cur->rd0 & RD_RACT)) {
./drivers/net/sh_eth.c:		if (!(port_info->rx_desc_cur->rd0 & RD_RFE)) {
./drivers/net/sh_eth.c:			len = port_info->rx_desc_cur->rd1 & 0xffff;
./drivers/net/sh_eth.c:			    ADDR_TO_P2(port_info->rx_desc_cur->rd2);
./drivers/net/sh_eth.c:		if (port_info->rx_desc_cur->rd0 & RD_RDLE)
./drivers/net/sh_eth.c:			port_info->rx_desc_cur->rd0 = RD_RACT | RD_RDLE;
./drivers/net/sh_eth.c:			port_info->rx_desc_cur->rd0 = RD_RACT;
./drivers/net/sh_eth.c:		port_info->rx_desc_cur++;
./drivers/net/sh_eth.c:		if (port_info->rx_desc_cur >=
./drivers/net/sh_eth.c:		    port_info->rx_desc_base + NUM_RX_DESC)
./drivers/net/sh_eth.c:			port_info->rx_desc_cur = port_info->rx_desc_base;
./drivers/net/sh_eth.c:	port_info->tx_desc_malloc = malloc(NUM_TX_DESC *
./drivers/net/sh_eth.c:	if (!port_info->tx_desc_malloc) {
./drivers/net/sh_eth.c:	tmp_addr = (u32) (((int)port_info->tx_desc_malloc + TX_DESC_SIZE - 1) &
./drivers/net/sh_eth.c:	port_info->tx_desc_base = (struct tx_desc_s *)ADDR_TO_P2(tmp_addr);
./drivers/net/sh_eth.c:	port_info->tx_desc_cur = port_info->tx_desc_base;
./drivers/net/sh_eth.c:	for (cur_tx_desc = port_info->tx_desc_base, i = 0; i < NUM_TX_DESC;
./drivers/net/sh_eth.c:	outl(ADDR_TO_PHY(port_info->tx_desc_base), TDLAR(port));
./drivers/net/sh_eth.c:	outl(ADDR_TO_PHY(port_info->tx_desc_base), TDFAR(port));
./drivers/net/sh_eth.c:	port_info->rx_desc_malloc = malloc(NUM_RX_DESC *
./drivers/net/sh_eth.c:	if (!port_info->rx_desc_malloc) {
./drivers/net/sh_eth.c:	tmp_addr = (u32) (((int)port_info->rx_desc_malloc + RX_DESC_SIZE - 1) &
./drivers/net/sh_eth.c:	port_info->rx_desc_base = (struct rx_desc_s *)ADDR_TO_P2(tmp_addr);
./drivers/net/sh_eth.c:	port_info->rx_desc_cur = port_info->rx_desc_base;
./drivers/net/sh_eth.c:	port_info->rx_buf_malloc = malloc(NUM_RX_DESC * MAX_BUF_SIZE + 31);
./drivers/net/sh_eth.c:	if (!port_info->rx_buf_malloc) {
./drivers/net/sh_eth.c:	tmp_addr = (u32)(((int)port_info->rx_buf_malloc + (32 - 1)) &
./drivers/net/sh_eth.c:	port_info->rx_buf_base = (u8 *)ADDR_TO_P2(tmp_addr);
./drivers/net/sh_eth.c:	for (cur_rx_desc = port_info->rx_desc_base,
./drivers/net/sh_eth.c:	     rx_buf = port_info->rx_buf_base, i = 0;
./drivers/net/sh_eth.c:	outl(ADDR_TO_PHY(port_info->rx_desc_base), RDLAR(port));
./drivers/net/sh_eth.c:	outl(ADDR_TO_PHY(port_info->rx_desc_base), RDFAR(port));
./drivers/net/sh_eth.c:	free(port_info->rx_desc_malloc);
./drivers/net/sh_eth.c:	port_info->rx_desc_malloc = NULL;
./drivers/net/sh_eth.c:	if (port_info->tx_desc_malloc) {
./drivers/net/sh_eth.c:		free(port_info->tx_desc_malloc);
./drivers/net/sh_eth.c:		port_info->tx_desc_malloc = NULL;
./drivers/net/sh_eth.c:	if (port_info->rx_desc_malloc) {
./drivers/net/sh_eth.c:		free(port_info->rx_desc_malloc);
./drivers/net/sh_eth.c:		port_info->rx_desc_malloc = NULL;
./drivers/net/sh_eth.c:	if (port_info->rx_buf_malloc) {
./drivers/net/sh_eth.c:		free(port_info->rx_buf_malloc);
./drivers/net/sh_eth.c:		port_info->rx_buf_malloc = NULL;
./drivers/net/sh_eth.c:		(port, port_info->phy_addr, PHY_CTRL, PHY_C_RESET);
./drivers/net/sh_eth.c:				port_info->phy_addr, PHY_CTRL);
./drivers/net/sh_eth.c:	sh_eth_mii_write_phy_reg(port, port_info->phy_addr, PHY_ANA,
./drivers/net/sh_eth.c:	sh_eth_mii_write_phy_reg(port, port_info->phy_addr, PHY_CTRL,
./drivers/net/sh_eth.c:		val = sh_eth_mii_read_phy_reg(port, port_info->phy_addr, 1);
./drivers/net/sh_eth.c:	struct eth_device *dev = port_info->dev;
./drivers/net/sh_eth.c:	phy_status = sh_eth_mii_read_phy_reg(port, port_info->phy_addr, 1);
./drivers/net/fsl_mcdmafec.c:	volatile fecdma_t *fecp = (fecdma_t *) (info->iobase);
./drivers/net/fsl_mcdmafec.c:	miiphy_read(dev->name, info->phy_addr, PHY_BMSR, &phyStatus);
./drivers/net/fsl_mcdmafec.c:	while (info->cleanTbdNum < CONFIG_SYS_TX_ETH_BUFFER) {
./drivers/net/fsl_mcdmafec.c:		pUsedTbd = &info->txbd[info->usedTbdIdx];
./drivers/net/fsl_mcdmafec.c:			       info->cleanTbdNum);
./drivers/net/fsl_mcdmafec.c:		if (info->usedTbdIdx == (CONFIG_SYS_TX_ETH_BUFFER - 1))
./drivers/net/fsl_mcdmafec.c:		info->cleanTbdNum++;
./drivers/net/fsl_mcdmafec.c:		info->usedTbdIdx = (info->usedTbdIdx + 1) % CONFIG_SYS_TX_ETH_BUFFER;
./drivers/net/fsl_mcdmafec.c:	if (info->cleanTbdNum < 1) {
./drivers/net/fsl_mcdmafec.c:	pTbd = &info->txbd[info->txIdx];
./drivers/net/fsl_mcdmafec.c:	info->txIdx = (info->txIdx + 1) % CONFIG_SYS_TX_ETH_BUFFER;
./drivers/net/fsl_mcdmafec.c:	MCD_continDma(info->txTask);
./drivers/net/fsl_mcdmafec.c:	info->cleanTbdNum -= 1;
./drivers/net/fsl_mcdmafec.c:	return (int)(info->txbd[info->txIdx].cbd_sc & BD_ENET_TX_STATS);
./drivers/net/fsl_mcdmafec.c:	volatile fecdma_t *fecp = (fecdma_t *) (info->iobase);
./drivers/net/fsl_mcdmafec.c:	cbd_t *pRbd = &info->rxbd[info->rxIdx];
./drivers/net/fsl_mcdmafec.c:		if ((info->rxIdx) == (PKTBUFSRX - 1))
./drivers/net/fsl_mcdmafec.c:		MCD_continDma(info->rxTask);
./drivers/net/fsl_mcdmafec.c:		info->rxIdx = (info->rxIdx + 1) % PKTBUFSRX;
./drivers/net/fsl_mcdmafec.c:	volatile fecdma_t *fecp = (fecdma_t *) (info->iobase);
./drivers/net/fsl_mcdmafec.c:	printf("fec_init: iobase 0x%08x ...\n", info->iobase);
./drivers/net/fsl_mcdmafec.c:	set_fec_duplex_speed(fecp, bd, info->dup_spd);
./drivers/net/fsl_mcdmafec.c:	info->rxIdx = 0;
./drivers/net/fsl_mcdmafec.c:	info->txIdx = 0;
./drivers/net/fsl_mcdmafec.c:		info->rxbd[i].cbd_sc = BD_ENET_RX_EMPTY;
./drivers/net/fsl_mcdmafec.c:		info->rxbd[i].cbd_datlen = PKTSIZE_ALIGN;
./drivers/net/fsl_mcdmafec.c:		info->rxbd[i].cbd_bufaddr = (uint) NetRxPackets[i];
./drivers/net/fsl_mcdmafec.c:	info->rxbd[PKTBUFSRX - 1].cbd_sc |= BD_ENET_RX_WRAP;
./drivers/net/fsl_mcdmafec.c:		info->txbd[i].cbd_sc = 0;
./drivers/net/fsl_mcdmafec.c:		info->txbd[i].cbd_datlen = 0;
./drivers/net/fsl_mcdmafec.c:		info->txbd[i].cbd_bufaddr = (uint) (&info->txbuf[0]);
./drivers/net/fsl_mcdmafec.c:	info->txbd[CONFIG_SYS_TX_ETH_BUFFER - 1].cbd_sc |= BD_ENET_TX_WRAP;
./drivers/net/fsl_mcdmafec.c:	info->usedTbdIdx = 0;
./drivers/net/fsl_mcdmafec.c:	info->cleanTbdNum = CONFIG_SYS_TX_ETH_BUFFER;
./drivers/net/fsl_mcdmafec.c:	MCD_startDma(info->rxTask,	/* Dma channel */
./drivers/net/fsl_mcdmafec.c:		     (s8 *) info->rxbd,	/*Source Address */
./drivers/net/fsl_mcdmafec.c:		     info->rxInit,	/* initiator */
./drivers/net/fsl_mcdmafec.c:		     info->rxPri,	/* priority */
./drivers/net/fsl_mcdmafec.c:	MCD_startDma(info->txTask,	/* Dma channel */
./drivers/net/fsl_mcdmafec.c:		     (s8 *) info->txbd,	/*Source Address */
./drivers/net/fsl_mcdmafec.c:		     info->txInit,	/* initiator */
./drivers/net/fsl_mcdmafec.c:		     info->txPri,	/* priority */
./drivers/net/fsl_mcdmafec.c:	volatile fecdma_t *fecp = (fecdma_t *) (info->iobase);
./drivers/net/fsl_mcdmafec.c:	MCD_killDma(info->txTask);
./drivers/net/fsl_mcdmafec.c:	MCD_killDma(info->rxTask);;
./drivers/net/mcfmii.c:	volatile FEC_T *fecp = (FEC_T *) (info->miibase);
./drivers/net/mcfmii.c:	ep = (FEC_T *) info->miibase;
./drivers/net/mcfmii.c:	if (info->phyname_init)
./drivers/net/mcfmii.c:		return info->phy_addr;
./drivers/net/mcfmii.c:						strcpy(info->phy_name, phyinfo[i].strid);
./drivers/net/mcfmii.c:						info->phyname_init = 1;
./drivers/net/mcfmii.c:					strcpy(info->phy_name, "unknown");
./drivers/net/mcfmii.c:					info->phyname_init = 1;
./drivers/net/mcfmii.c:	fecp = (FEC_T *) info->miibase;
./drivers/net/mcfmii.c:	info->phy_addr = mii_discover_phy(dev);
./drivers/net/mcfmii.c:		miiphy_read(dev->name, info->phy_addr, PHY_BMCR, &status);
./drivers/net/mcfmii.c:		miiphy_read(dev->name, info->phy_addr, PHY_BMSR, &status);
./drivers/net/mcfmii.c:	info->dup_spd = miiphy_duplex(dev->name, info->phy_addr) << 16;
./drivers/net/mcfmii.c:	info->dup_spd |= miiphy_speed(dev->name, info->phy_addr);
./drivers/mtd/cfi_flash.c:		if (info->size && info->start[0] <= base &&
./drivers/mtd/cfi_flash.c:		    base <= info->start[0] + info->size - 1)
./drivers/mtd/cfi_flash.c:	if (sect != (info->sector_count - 1))
./drivers/mtd/cfi_flash.c:		return info->start[sect + 1] - info->start[sect];
./drivers/mtd/cfi_flash.c:		return info->start[0] + info->size - info->start[sect];
./drivers/mtd/cfi_flash.c:	unsigned int byte_offset = offset * info->portwidth;
./drivers/mtd/cfi_flash.c:	return (void *)(info->start[sect] + byte_offset);
./drivers/mtd/cfi_flash.c:	for (i = info->portwidth; i > 0; i--){
./drivers/mtd/cfi_flash.c:		cword_offset = (info->portwidth-i)%info->chipwidth;
./drivers/mtd/cfi_flash.c:		cp_offset = info->portwidth - i;
./drivers/mtd/cfi_flash.c:	retval = flash_read8(cp + info->portwidth - 1);
./drivers/mtd/cfi_flash.c:	debug ("long addr is at %p info->portwidth = %d\n", addr,
./drivers/mtd/cfi_flash.c:	       info->portwidth);
./drivers/mtd/cfi_flash.c:	for (x = 0; x < 4 * info->portwidth; x++) {
./drivers/mtd/cfi_flash.c:		  (flash_read8(addr + info->portwidth) << 24) |
./drivers/mtd/cfi_flash.c:		  (flash_read8(addr + 2 * info->portwidth)) |
./drivers/mtd/cfi_flash.c:		  (flash_read8(addr + 3 * info->portwidth) << 8));
./drivers/mtd/cfi_flash.c:	retval = ((flash_read8(addr + 2 * info->portwidth - 1) << 24) |
./drivers/mtd/cfi_flash.c:		  (flash_read8(addr + info->portwidth - 1) << 16) |
./drivers/mtd/cfi_flash.c:		  (flash_read8(addr + 4 * info->portwidth - 1) << 8) |
./drivers/mtd/cfi_flash.c:		  (flash_read8(addr + 3 * info->portwidth - 1)));
./drivers/mtd/cfi_flash.c:	switch (info->portwidth) {
./drivers/mtd/cfi_flash.c:		       cword.c, info->chipwidth << CFI_FLASH_SHIFT_WIDTH);
./drivers/mtd/cfi_flash.c:		       info->chipwidth << CFI_FLASH_SHIFT_WIDTH);
./drivers/mtd/cfi_flash.c:		       info->chipwidth << CFI_FLASH_SHIFT_WIDTH);
./drivers/mtd/cfi_flash.c:			       info->chipwidth << CFI_FLASH_SHIFT_WIDTH);
./drivers/mtd/cfi_flash.c:	flash_write_cmd (info, sect, info->addr_unlock1, AMD_CMD_UNLOCK_START);
./drivers/mtd/cfi_flash.c:	flash_write_cmd (info, sect, info->addr_unlock2, AMD_CMD_UNLOCK_ACK);
./drivers/mtd/cfi_flash.c:	switch (info->portwidth) {
./drivers/mtd/cfi_flash.c:	switch (info->portwidth) {
./drivers/mtd/cfi_flash.c:	switch (info->portwidth) {
./drivers/mtd/cfi_flash.c:	switch (info->vendor) {
./drivers/mtd/cfi_flash.c:				prompt, info->start[sector],
./drivers/mtd/cfi_flash.c:			flash_write_cmd (info, sector, 0, info->cmd_reset);
./drivers/mtd/cfi_flash.c:	switch (info->vendor) {
./drivers/mtd/cfi_flash.c:				info->start[sector]);
./drivers/mtd/cfi_flash.c:		flash_write_cmd (info, sector, 0, info->cmd_reset);
./drivers/mtd/cfi_flash.c:	switch (info->portwidth) {
./drivers/mtd/cfi_flash.c:	while ((info->start[sector] < addr)
./drivers/mtd/cfi_flash.c:			&& (sector < info->sector_count - 1))
./drivers/mtd/cfi_flash.c:	while ((info->start[sector] > addr) && (sector > 0))
./drivers/mtd/cfi_flash.c:	switch (info->portwidth) {
./drivers/mtd/cfi_flash.c:	switch (info->vendor) {
./drivers/mtd/cfi_flash.c:		flash_write_cmd (info, sect, info->addr_unlock1, AMD_CMD_WRITE);
./drivers/mtd/cfi_flash.c:		flash_write_cmd (info, 0, info->addr_unlock1, AMD_CMD_WRITE);
./drivers/mtd/cfi_flash.c:	switch (info->portwidth) {
./drivers/mtd/cfi_flash.c:	return flash_full_status_check (info, sect, info->write_tout, "write");
./drivers/mtd/cfi_flash.c:	switch (info->portwidth) {
./drivers/mtd/cfi_flash.c:		switch (info->portwidth) {
./drivers/mtd/cfi_flash.c:	switch (info->vendor) {
./drivers/mtd/cfi_flash.c:		write_cmd = (info->vendor == CFI_CMDSET_INTEL_PROG_REGIONS) ?
./drivers/mtd/cfi_flash.c:					      info->buffer_write_tout,
./drivers/mtd/cfi_flash.c:				switch (info->portwidth) {
./drivers/mtd/cfi_flash.c:				info, sector, info->buffer_write_tout,
./drivers/mtd/cfi_flash.c:		offset = ((unsigned long)dst - info->start[sector]) >> shift;
./drivers/mtd/cfi_flash.c:		switch (info->portwidth) {
./drivers/mtd/cfi_flash.c:						   info->buffer_write_tout,
./drivers/mtd/cfi_flash.c:	if (info->flash_id != FLASH_MAN_CFI) {
./drivers/mtd/cfi_flash.c:		if (info->protect[sect]) {
./drivers/mtd/cfi_flash.c:		if (info->protect[sect] == 0) { /* not protected */
./drivers/mtd/cfi_flash.c:			switch (info->vendor) {
./drivers/mtd/cfi_flash.c:						info->addr_unlock1,
./drivers/mtd/cfi_flash.c:				flash_write_cmd (info, 0, info->addr_unlock1,
./drivers/mtd/cfi_flash.c:				       info->vendor);
./drivers/mtd/cfi_flash.c:			    (info, sect, info->erase_blk_tout, "erase")) {
./drivers/mtd/cfi_flash.c:	if (info->flash_id != FLASH_MAN_CFI) {
./drivers/mtd/cfi_flash.c:		info->name,
./drivers/mtd/cfi_flash.c:		(info->portwidth << 3), (info->chipwidth << 3));
./drivers/mtd/cfi_flash.c:	if (info->size < 1024*1024)
./drivers/mtd/cfi_flash.c:			info->size >> 10, info->sector_count);
./drivers/mtd/cfi_flash.c:			info->size >> 20, info->sector_count);
./drivers/mtd/cfi_flash.c:	switch (info->vendor) {
./drivers/mtd/cfi_flash.c:			printf ("Unknown (%d)", info->vendor);
./drivers/mtd/cfi_flash.c:		info->manufacturer_id, info->device_id);
./drivers/mtd/cfi_flash.c:	if (info->device_id == 0x7E) {
./drivers/mtd/cfi_flash.c:		printf("%04X", info->device_id2);
./drivers/mtd/cfi_flash.c:		info->erase_blk_tout,
./drivers/mtd/cfi_flash.c:		info->write_tout);
./drivers/mtd/cfi_flash.c:	if (info->buffer_size > 1) {
./drivers/mtd/cfi_flash.c:		info->buffer_write_tout,
./drivers/mtd/cfi_flash.c:		info->buffer_size);
./drivers/mtd/cfi_flash.c:	for (i = 0; i < info->sector_count; ++i) {
./drivers/mtd/cfi_flash.c:		flash = (volatile unsigned long *) info->start[i];
./drivers/mtd/cfi_flash.c:			info->start[i],
./drivers/mtd/cfi_flash.c:			info->protect[i] ? "RO" : "  ");
./drivers/mtd/cfi_flash.c:			info->start[i],
./drivers/mtd/cfi_flash.c:			info->protect[i] ? "RO" : "  ");
./drivers/mtd/cfi_flash.c:	wp = (addr & ~(info->portwidth - 1));
./drivers/mtd/cfi_flash.c:		for (; (i < info->portwidth) && (cnt > 0); i++) {
./drivers/mtd/cfi_flash.c:		for (; (cnt == 0) && (i < info->portwidth); ++i)
./drivers/mtd/cfi_flash.c:	buffered_size = (info->portwidth / info->chipwidth);
./drivers/mtd/cfi_flash.c:	buffered_size *= info->buffer_size;
./drivers/mtd/cfi_flash.c:	while (cnt >= info->portwidth) {
./drivers/mtd/cfi_flash.c:		if (info->buffer_size == 1) {
./drivers/mtd/cfi_flash.c:			for (i = 0; i < info->portwidth; i++)
./drivers/mtd/cfi_flash.c:			wp += info->portwidth;
./drivers/mtd/cfi_flash.c:			cnt -= info->portwidth;
./drivers/mtd/cfi_flash.c:		i -= i & (info->portwidth - 1);
./drivers/mtd/cfi_flash.c:	while (cnt >= info->portwidth) {
./drivers/mtd/cfi_flash.c:		for (i = 0; i < info->portwidth; i++) {
./drivers/mtd/cfi_flash.c:		wp += info->portwidth;
./drivers/mtd/cfi_flash.c:		cnt -= info->portwidth;
./drivers/mtd/cfi_flash.c:		FLASH_SHOW_PROGRESS(scale, dots, digit, info->portwidth);
./drivers/mtd/cfi_flash.c:	for (i = 0; (i < info->portwidth) && (cnt > 0); ++i) {
./drivers/mtd/cfi_flash.c:	for (; i < info->portwidth; ++i)
./drivers/mtd/cfi_flash.c:	switch (info->vendor) {
./drivers/mtd/cfi_flash.c:			if (info->manufacturer_id == (uchar)ATM_MANUFACT) {
./drivers/mtd/cfi_flash.c:							info->addr_unlock1,
./drivers/mtd/cfi_flash.c:							info->addr_unlock1,
./drivers/mtd/cfi_flash.c:					if (info->device_id == ATM_ID_BV6416)
./drivers/mtd/cfi_flash.c:	     flash_full_status_check (info, sector, info->erase_blk_tout,
./drivers/mtd/cfi_flash.c:		info->protect[sector] = prot;
./drivers/mtd/cfi_flash.c:		if ((prot == 0) && (info->legacy_unlock)) {
./drivers/mtd/cfi_flash.c:			for (i = 0; i < info->sector_count; i++) {
./drivers/mtd/cfi_flash.c:				if (info->protect[i])
./drivers/mtd/cfi_flash.c:	flash_write_cmd (info, 0, 0, info->cmd_reset);
./drivers/mtd/cfi_flash.c:	flash_write_cmd (info, 0, 0, info->cmd_reset);
./drivers/mtd/cfi_flash.c:	info->manufacturer_id = flash_read_uchar (info,
./drivers/mtd/cfi_flash.c:	info->device_id = flash_read_uchar (info,
./drivers/mtd/cfi_flash.c:	info->cmd_reset = FLASH_CMD_RESET;
./drivers/mtd/cfi_flash.c:	flash_write_cmd(info, 0, info->cfi_offset, FLASH_CMD_CFI);
./drivers/mtd/cfi_flash.c:	if (info->ext_addr) {
./drivers/mtd/cfi_flash.c:		info->legacy_unlock = flash_read_uchar (info,
./drivers/mtd/cfi_flash.c:				info->ext_addr + 5) & 0x08;
./drivers/mtd/cfi_flash.c:	flash_write_cmd(info, 0, info->addr_unlock1, FLASH_CMD_READ_ID);
./drivers/mtd/cfi_flash.c:	info->manufacturer_id = flash_read_uchar (info,
./drivers/mtd/cfi_flash.c:	switch (info->chipwidth){
./drivers/mtd/cfi_flash.c:		info->device_id = flash_read_uchar (info,
./drivers/mtd/cfi_flash.c:		if (info->device_id == 0x7E) {
./drivers/mtd/cfi_flash.c:			info->device_id2 = flash_read_uchar (info,
./drivers/mtd/cfi_flash.c:			info->device_id2 <<= 8;
./drivers/mtd/cfi_flash.c:			info->device_id2 |= flash_read_uchar (info,
./drivers/mtd/cfi_flash.c:		info->device_id = flash_read_word (info,
./drivers/mtd/cfi_flash.c:	info->cmd_reset = AMD_CMD_RESET;
./drivers/mtd/cfi_flash.c:	flash_write_cmd(info, 0, info->cfi_offset, FLASH_CMD_CFI);
./drivers/mtd/cfi_flash.c:	info->manufacturer_id = 0;
./drivers/mtd/cfi_flash.c:	info->device_id       = 0;
./drivers/mtd/cfi_flash.c:	info->device_id2      = 0;
./drivers/mtd/cfi_flash.c:	switch (info->vendor) {
./drivers/mtd/cfi_flash.c: * info->portwidth, info->chipwidth and info->interface for Jedec probing.
./drivers/mtd/cfi_flash.c:		if (!info->vendor) {
./drivers/mtd/cfi_flash.c:				info->vendor = modes[i];
./drivers/mtd/cfi_flash.c:				info->start[0] =
./drivers/mtd/cfi_flash.c:							   info->portwidth,
./drivers/mtd/cfi_flash.c:				if (info->portwidth == FLASH_CFI_8BIT
./drivers/mtd/cfi_flash.c:					&& info->interface == FLASH_CFI_X8X16) {
./drivers/mtd/cfi_flash.c:					info->addr_unlock1 = 0x2AAA;
./drivers/mtd/cfi_flash.c:					info->addr_unlock2 = 0x5555;
./drivers/mtd/cfi_flash.c:					info->addr_unlock1 = 0x5555;
./drivers/mtd/cfi_flash.c:					info->addr_unlock2 = 0x2AAA;
./drivers/mtd/cfi_flash.c:						info->manufacturer_id,
./drivers/mtd/cfi_flash.c:						info->device_id,
./drivers/mtd/cfi_flash.c:						info->device_id2);
./drivers/mtd/cfi_flash.c:				if (jedec_flash_match(info, info->start[0]))
./drivers/mtd/cfi_flash.c:					unmap_physmem((void *)info->start[0],
./drivers/mtd/cfi_flash.c:		switch(info->vendor) {
./drivers/mtd/cfi_flash.c:			info->cmd_reset = FLASH_CMD_RESET;
./drivers/mtd/cfi_flash.c:			info->cmd_reset = AMD_CMD_RESET;
./drivers/mtd/cfi_flash.c:		info->flash_id = FLASH_MAN_CFI;
./drivers/mtd/cfi_flash.c:			info->interface	= le16_to_cpu(qry->interface_desc);
./drivers/mtd/cfi_flash.c:			info->cfi_offset = flash_offset_cfi[cfi_offset];
./drivers/mtd/cfi_flash.c:			       info->interface);
./drivers/mtd/cfi_flash.c:			       info->portwidth, info->chipwidth);
./drivers/mtd/cfi_flash.c:			       info->portwidth << CFI_FLASH_SHIFT_WIDTH,
./drivers/mtd/cfi_flash.c:			       info->chipwidth << CFI_FLASH_SHIFT_WIDTH);
./drivers/mtd/cfi_flash.c:			info->addr_unlock1 = 0x555;
./drivers/mtd/cfi_flash.c:			info->addr_unlock2 = 0x2aa;
./drivers/mtd/cfi_flash.c:				((info->chipwidth == FLASH_CFI_BY8) &&
./drivers/mtd/cfi_flash.c:					(info->interface == FLASH_CFI_X8X16)) ||
./drivers/mtd/cfi_flash.c:				((info->chipwidth == FLASH_CFI_BY16) &&
./drivers/mtd/cfi_flash.c:					(info->interface == FLASH_CFI_X16X32)))
./drivers/mtd/cfi_flash.c:				info->addr_unlock1 = 0xaaa;
./drivers/mtd/cfi_flash.c:				info->addr_unlock2 = 0x555;
./drivers/mtd/cfi_flash.c:			info->name = "CFI conformant";
./drivers/mtd/cfi_flash.c:	for (info->portwidth = CONFIG_SYS_FLASH_CFI_WIDTH;
./drivers/mtd/cfi_flash.c:	     info->portwidth <= FLASH_CFI_64BIT; info->portwidth <<= 1) {
./drivers/mtd/cfi_flash.c:		for (info->chipwidth = FLASH_CFI_BY8;
./drivers/mtd/cfi_flash.c:		     info->chipwidth <= info->portwidth;
./drivers/mtd/cfi_flash.c:		     info->chipwidth <<= 1)
./drivers/mtd/cfi_flash.c:		if (info->cfi_version < 0x3131) {
./drivers/mtd/cfi_flash.c:			if ((info->device_id & 0x80) != 0)
./drivers/mtd/cfi_flash.c:		} else if (flash_read_uchar(info, info->ext_addr + 0xf) == 3) {
./drivers/mtd/cfi_flash.c:	if (info->ext_addr && !(flash_read_uchar(info, info->ext_addr + 6) & 1))
./drivers/mtd/cfi_flash.c:	if (info->device_id == 0xd6 || info->device_id == 0xd2)
./drivers/mtd/cfi_flash.c:		if (info->cfi_version < 0x3131) {
./drivers/mtd/cfi_flash.c:			if (info->device_id == 0x22CA ||
./drivers/mtd/cfi_flash.c:			    info->device_id == 0x2256) {
./drivers/mtd/cfi_flash.c:	info->ext_addr = 0;
./drivers/mtd/cfi_flash.c:	info->cfi_version = 0;
./drivers/mtd/cfi_flash.c:	info->legacy_unlock = 0;
./drivers/mtd/cfi_flash.c:	info->start[0] = (ulong)map_physmem(base, info->portwidth, MAP_NOCACHE);
./drivers/mtd/cfi_flash.c:		info->vendor = le16_to_cpu(qry.p_id);
./drivers/mtd/cfi_flash.c:		info->ext_addr = le16_to_cpu(qry.p_adr);
./drivers/mtd/cfi_flash.c:		if (info->ext_addr) {
./drivers/mtd/cfi_flash.c:			info->cfi_version = (ushort) flash_read_uchar (info,
./drivers/mtd/cfi_flash.c:						info->ext_addr + 3) << 8;
./drivers/mtd/cfi_flash.c:			info->cfi_version |= (ushort) flash_read_uchar (info,
./drivers/mtd/cfi_flash.c:						info->ext_addr + 4);
./drivers/mtd/cfi_flash.c:		switch (info->vendor) {
./drivers/mtd/cfi_flash.c:					info->vendor);
./drivers/mtd/cfi_flash.c:		switch (info->manufacturer_id) {
./drivers/mtd/cfi_flash.c:		debug ("manufacturer is %d\n", info->vendor);
./drivers/mtd/cfi_flash.c:		debug ("manufacturer id is 0x%x\n", info->manufacturer_id);
./drivers/mtd/cfi_flash.c:		debug ("device id is 0x%x\n", info->device_id);
./drivers/mtd/cfi_flash.c:		debug ("device id2 is 0x%x\n", info->device_id2);
./drivers/mtd/cfi_flash.c:		debug ("cfi version is 0x%04x\n", info->cfi_version);
./drivers/mtd/cfi_flash.c:		size_ratio = info->portwidth / info->chipwidth;
./drivers/mtd/cfi_flash.c:		if ((info->interface == FLASH_CFI_X8X16)
./drivers/mtd/cfi_flash.c:		    && (info->chipwidth == FLASH_CFI_BY8)) {
./drivers/mtd/cfi_flash.c:		       size_ratio, info->portwidth << CFI_FLASH_SHIFT_WIDTH,
./drivers/mtd/cfi_flash.c:		       info->chipwidth << CFI_FLASH_SHIFT_WIDTH);
./drivers/mtd/cfi_flash.c:				info->start[sect_cnt] =
./drivers/mtd/cfi_flash.c:							   info->portwidth,
./drivers/mtd/cfi_flash.c:				switch (info->vendor) {
./drivers/mtd/cfi_flash.c:					info->protect[sect_cnt] =
./drivers/mtd/cfi_flash.c:					info->protect[sect_cnt] = 0;
./drivers/mtd/cfi_flash.c:		info->sector_count = sect_cnt;
./drivers/mtd/cfi_flash.c:		info->size = 1 << qry.dev_size;
./drivers/mtd/cfi_flash.c:		info->size *= size_ratio;
./drivers/mtd/cfi_flash.c:		info->buffer_size = 1 << le16_to_cpu(qry.max_buf_write_size);
./drivers/mtd/cfi_flash.c:		info->erase_blk_tout = tmp *
./drivers/mtd/cfi_flash.c:		info->buffer_write_tout = (tmp + 999) / 1000;
./drivers/mtd/cfi_flash.c:		info->write_tout = (tmp + 999) / 1000;
./drivers/mtd/cfi_flash.c:		info->flash_id = FLASH_MAN_CFI;
./drivers/mtd/cfi_flash.c:		if ((info->interface == FLASH_CFI_X8X16) &&
./drivers/mtd/cfi_flash.c:		    (info->chipwidth == FLASH_CFI_BY8)) {
./drivers/mtd/cfi_flash.c:			info->portwidth >>= 1;
./drivers/mtd/cfi_flash.c:		flash_write_cmd (info, 0, 0, info->cmd_reset);
./drivers/mtd/cfi_flash.c:	return (info->size);
./drivers/mtd/nand/ndfc.c:	struct nand_chip *this = mtdinfo->priv;
./drivers/mtd/nand/ndfc.c:	struct nand_chip *this = mtdinfo->priv;
./drivers/mtd/nand/ndfc.c:	struct nand_chip *this = mtdinfo->priv;
./drivers/mtd/nand/ndfc.c:	struct nand_chip *this = mtdinfo->priv;
./drivers/mtd/nand/ndfc.c:	struct nand_chip *this = mtdinfo->priv;
./drivers/mtd/nand/ndfc.c:	struct nand_chip *this = mtdinfo->priv;
./drivers/mtd/nand/nand_util.c:	const char *mtd_device = meminfo->name;
./drivers/mtd/nand/nand_util.c:	struct nand_chip *chip = meminfo->priv;
./drivers/mtd/nand/nand_util.c:	erase.len  = meminfo->erasesize;
./drivers/mtd/nand/nand_util.c:		struct nand_chip *priv_nand = meminfo->priv;
./drivers/mtd/nand/nand_util.c:	if (erase_length < meminfo->erasesize) {
./drivers/mtd/nand/nand_util.c:		       "erase block 0x%08x\n",erase_length, meminfo->erasesize);
./drivers/mtd/nand/nand_util.c:		printf("         Erasing 0x%08x instead\n", meminfo->erasesize);
./drivers/mtd/nand/nand_util.c:		erase_length = meminfo->erasesize;
./drivers/mtd/nand/nand_util.c:	     erase.addr += meminfo->erasesize) {
./drivers/mtd/nand/nand_util.c:			int ret = meminfo->block_isbad(meminfo, erase.addr);
./drivers/mtd/nand/nand_util.c:		result = meminfo->erase(meminfo, &erase);
./drivers/mtd/nand/nand_util.c:			result = meminfo->write_oob(meminfo,
./drivers/mtd/nand/nand_util.c:				(erase.addr + meminfo->erasesize - opts->offset)
./drivers/mtd/nand/nand_util.c:		struct nand_chip *priv_nand = meminfo->priv;
./drivers/mtd/jedec_flash.c:	size_ratio = info->portwidth / info->chipwidth;
./drivers/mtd/jedec_flash.c:	info->vendor = jedec_entry->CmdSet;
./drivers/mtd/jedec_flash.c:	info->erase_blk_tout = 30000;
./drivers/mtd/jedec_flash.c:	info->buffer_write_tout = 1000;
./drivers/mtd/jedec_flash.c:	info->write_tout = 100;
./drivers/mtd/jedec_flash.c:	info->name = jedec_entry->name;
./drivers/mtd/jedec_flash.c:	switch(info->chipwidth) {
./drivers/mtd/jedec_flash.c:	info->addr_unlock1 = unlock_addrs[uaddr_idx].addr1;
./drivers/mtd/jedec_flash.c:	info->addr_unlock2 = unlock_addrs[uaddr_idx].addr2;
./drivers/mtd/jedec_flash.c:	debug("unlock addresses are 0x%x/0x%x\n", info->addr_unlock1, info->addr_unlock2);
./drivers/mtd/jedec_flash.c:			info->start[sect_cnt] = base;
./drivers/mtd/jedec_flash.c:	info->sector_count = sect_cnt;
./drivers/mtd/jedec_flash.c:	info->size = total_size * size_ratio;
./drivers/mtd/jedec_flash.c:	if (info->chipwidth == 1)
./drivers/mtd/jedec_flash.c:		if ((jedec_table[i].mfr_id & mask) == (info->manufacturer_id & mask) &&
./drivers/mtd/jedec_flash.c:		    (jedec_table[i].dev_id & mask) == (info->device_id & mask)) {
./drivers/mtd/ubi/debug.c: * ubi_dbg_dump_vol_info- dump volume information.
./drivers/video/ati_radeon_fb.h:#define INREG8(addr)		readb((rinfo->mmio_base)+addr)
./drivers/video/ati_radeon_fb.h:#define OUTREG8(addr,val)	writeb(val, (rinfo->mmio_base)+addr)
./drivers/video/ati_radeon_fb.h:#define INREG16(addr)		readw((rinfo->mmio_base)+addr)
./drivers/video/ati_radeon_fb.h:#define OUTREG16(addr,val)	writew(val, (rinfo->mmio_base)+addr)
./drivers/video/ati_radeon_fb.h:#define INREG(addr)		readl((rinfo->mmio_base)+addr)
./drivers/video/ati_radeon_fb.h:#define OUTREG(addr,val)	writel(val, (rinfo->mmio_base)+addr)
./drivers/video/ati_radeon_fb.c:	if ((rinfo->family == CHIP_FAMILY_RS100) ||
./drivers/video/ati_radeon_fb.c:		(rinfo->family == CHIP_FAMILY_RS200) ||
./drivers/video/ati_radeon_fb.c:		(rinfo->family == CHIP_FAMILY_RS300)) {
./drivers/video/ati_radeon_fb.c:		if ((rinfo->family == CHIP_FAMILY_RS100) ||
./drivers/video/ati_radeon_fb.c:			(rinfo->family == CHIP_FAMILY_RS200)) {
./drivers/video/ati_radeon_fb.c:	rinfo->video_ram = tmp & CONFIG_MEMSIZE_MASK;
./drivers/video/ati_radeon_fb.c:	if (rinfo->video_ram == 0) {
./drivers/video/ati_radeon_fb.c:		switch (rinfo->pdev.device) {
./drivers/video/ati_radeon_fb.c:			rinfo->video_ram = 8192 * 1024;
./drivers/video/ati_radeon_fb.c:	if ((rinfo->family >= CHIP_FAMILY_R300) ||
./drivers/video/ati_radeon_fb.c:		rinfo->vram_ddr = 1;
./drivers/video/ati_radeon_fb.c:		rinfo->vram_ddr = 0;
./drivers/video/ati_radeon_fb.c:		case 0:  rinfo->vram_width = 64; break;
./drivers/video/ati_radeon_fb.c:		case 1:  rinfo->vram_width = 128; break;
./drivers/video/ati_radeon_fb.c:		case 2:  rinfo->vram_width = 256; break;
./drivers/video/ati_radeon_fb.c:		default: rinfo->vram_width = 128; break;
./drivers/video/ati_radeon_fb.c:	} else if ((rinfo->family == CHIP_FAMILY_RV100) ||
./drivers/video/ati_radeon_fb.c:		   (rinfo->family == CHIP_FAMILY_RS100) ||
./drivers/video/ati_radeon_fb.c:		   (rinfo->family == CHIP_FAMILY_RS200)){
./drivers/video/ati_radeon_fb.c:			rinfo->vram_width = 32;
./drivers/video/ati_radeon_fb.c:			rinfo->vram_width = 64;
./drivers/video/ati_radeon_fb.c:			rinfo->vram_width = 128;
./drivers/video/ati_radeon_fb.c:			rinfo->vram_width = 64;
./drivers/video/ati_radeon_fb.c:	       rinfo->video_ram / 1024,
./drivers/video/ati_radeon_fb.c:	       rinfo->vram_ddr ? "DDR" : "SDRAM",
./drivers/video/ati_radeon_fb.c:	       rinfo->vram_width);
./drivers/video/ati_radeon_fb.c:	if (rinfo->is_mobility) {
./drivers/video/ati_radeon_fb.c:	if(rinfo->pdev.device == PCI_CHIP_RV370_5B60) return;
./drivers/video/ati_radeon_fb.c:	if (rinfo->family == CHIP_FAMILY_R300 ||
./drivers/video/ati_radeon_fb.c:	    rinfo->family == CHIP_FAMILY_RS300 ||
./drivers/video/ati_radeon_fb.c:	    rinfo->family == CHIP_FAMILY_R350 ||
./drivers/video/ati_radeon_fb.c:	    rinfo->family == CHIP_FAMILY_RV350) {
./drivers/video/ati_radeon_fb.c:		strcpy(rinfo->name, "ATI Radeon");
./drivers/video/ati_radeon_fb.c:		rinfo->pdev.vendor = PCI_VENDOR_ID_ATI;
./drivers/video/ati_radeon_fb.c:		rinfo->pdev.device = did;
./drivers/video/ati_radeon_fb.c:		rinfo->family = get_radeon_id_family(rinfo->pdev.device);
./drivers/video/ati_radeon_fb.c:				&rinfo->fb_base_phys);
./drivers/video/ati_radeon_fb.c:				&rinfo->mmio_base_phys);
./drivers/video/ati_radeon_fb.c:		rinfo->fb_base_phys &= 0xfffff000;
./drivers/video/ati_radeon_fb.c:		rinfo->mmio_base_phys &= ~0x04;
./drivers/video/ati_radeon_fb.c:		rinfo->mmio_base = (void *)rinfo->mmio_base_phys;
./drivers/video/ati_radeon_fb.c:		DPRINT("rinfo->mmio_base = 0x%x\n",rinfo->mmio_base);
./drivers/video/ati_radeon_fb.c:		rinfo->fb_local_base = INREG(MC_FB_LOCATION) << 16;
./drivers/video/ati_radeon_fb.c:		DPRINT("rinfo->fb_local_base = 0x%x\n",rinfo->fb_local_base);
./drivers/video/ati_radeon_fb.c:		rinfo->mapped_vram = min_t(unsigned long, MAX_MAPPED_VRAM,
./drivers/video/ati_radeon_fb.c:				rinfo->video_ram);
./drivers/video/ati_radeon_fb.c:		rinfo->fb_base = (void *)rinfo->fb_base_phys;
./drivers/video/ati_radeon_fb.c:		      rinfo->fb_base_phys, rinfo->mmio_base_phys,
./drivers/video/ati_radeon_fb.c:		      rinfo->fb_local_base);
./drivers/video/ati_radeon_fb.c:	pGD->pciBase = rinfo->fb_base_phys;
./drivers/video/ati_radeon_fb.c:	pGD->frameAdrs = rinfo->fb_base_phys;
./drivers/video/ati_radeon_fb.c:	    (pGD->winSizeX * pGD->winSizeY * pGD->gdfBytesPP) + rinfo->fb_base_phys;
./drivers/video/ati_radeon_fb.c:	pGD->vprBase = rinfo->fb_base_phys;	/* Dummy */
./drivers/video/ati_radeon_fb.c:	pGD->cprBase = rinfo->fb_base_phys;	/* Dummy */
./drivers/video/ati_radeon_fb.c:	if (rinfo->family == CHIP_FAMILY_RV280)
./drivers/bios_emulator/biosemu.c:	_BE_bios_init((u32*)info->LowMem);
./drivers/bios_emulator/biosemu.c:	_BE_env.vgaInfo.function = info->function;
./drivers/bios_emulator/biosemu.c:	_BE_env.vgaInfo.device = info->device;
./drivers/bios_emulator/biosemu.c:	_BE_env.vgaInfo.bus = info->bus;
./drivers/bios_emulator/biosemu.c:	_BE_env.vgaInfo.pcidev = info->pcidev;
./drivers/bios_emulator/biosemu.c:	_BE_env.vgaInfo.pciInfo = info->pciInfo;
./drivers/bios_emulator/biosemu.c:	_BE_env.vgaInfo.BIOSImage = info->BIOSImage;
./drivers/bios_emulator/biosemu.c:	if (info->BIOSImage) {
./drivers/bios_emulator/biosemu.c:		_BE_env.biosmem_base = (ulong) info->BIOSImage;
./drivers/bios_emulator/biosemu.c:		_BE_env.biosmem_limit = 0xC0000 + info->BIOSImageLen - 1;
./drivers/bios_emulator/biosemu.c:	if ((info->LowMem[0] == 0) && (info->LowMem[1] == 0) &&
./drivers/bios_emulator/biosemu.c:	    (info->LowMem[2] == 0) && (info->LowMem[3] == 0))
./drivers/bios_emulator/biosemu.c:		_BE_bios_init((u32 *) info->LowMem);
./drivers/bios_emulator/biosemu.c:	memcpy((u8 *) M.mem_base, info->LowMem, sizeof(info->LowMem));
./drivers/bios_emulator/biosemu.c:	info->function = _BE_env.vgaInfo.function;
./drivers/bios_emulator/biosemu.c:	info->device = _BE_env.vgaInfo.device;
./drivers/bios_emulator/biosemu.c:	info->bus = _BE_env.vgaInfo.bus;
./drivers/bios_emulator/biosemu.c:	info->pcidev = _BE_env.vgaInfo.pcidev;
./drivers/bios_emulator/biosemu.c:	info->pciInfo = _BE_env.vgaInfo.pciInfo;
./drivers/bios_emulator/biosemu.c:	info->BIOSImage = _BE_env.vgaInfo.BIOSImage;
./drivers/bios_emulator/biosemu.c:	memcpy(info->LowMem, (u8 *) M.mem_base, sizeof(info->LowMem));
./include/nand.h:	return info->read(info, ofs, *len, (size_t *)len, buf);
./include/nand.h:	return info->write(info, ofs, *len, (size_t *)len, buf);
./include/nand.h:	return info->block_isbad(info, ofs);
./include/nand.h:	return info->erase(info, &instr);
./board/altera/common/flash.c:		info->size >> 10, info->sector_count);
./board/altera/common/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/altera/common/flash.c:		if (i != (info->sector_count - 1))
./board/altera/common/flash.c:			size = info->start[i + 1] - info->start[i];
./board/altera/common/flash.c:			size = info->start[0] + info->size - info->start[i];
./board/altera/common/flash.c:		flash = (volatile unsigned char *) info->start[i];
./board/altera/common/flash.c:		printf (" %08lX%s%s", info->start[i], erased ? " E" : "  ",
./board/altera/common/flash.c:			info->protect[i] ? "RO " : "   ");
./board/altera/common/flash.c:	volatile CONFIG_SYS_FLASH_WORD_SIZE *addr = (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[0]);
./board/altera/common/flash.c:		if (info->protect[sect]) {
./board/altera/common/flash.c:		printf("- Erase: Sect: %i @ 0x%08x\n", sect,  info->start[sect]);
./board/altera/common/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/altera/common/flash.c:			addr2 = (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[sect]);
./board/altera/common/flash.c:	vu_char *cmd = (vu_char *) info->start[0];
./board/altera/common/AMDLV065D.c:		info->size >> 10, info->sector_count);
./board/altera/common/AMDLV065D.c:	for (i = 0; i < info->sector_count; ++i) {
./board/altera/common/AMDLV065D.c:		addr = (unsigned long *) info->start[i];
./board/altera/common/AMDLV065D.c:			info->start[i],
./board/altera/common/AMDLV065D.c:			info->protect[i] ? "RO " : "   ");
./board/altera/common/AMDLV065D.c:	unsigned char *addr = (unsigned char *) info->start[0];
./board/altera/common/AMDLV065D.c:		if (info->protect[sect]) {
./board/altera/common/AMDLV065D.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/altera/common/AMDLV065D.c:			addr2 = (unsigned char *) info->start[sect];
./board/altera/common/AMDLV065D.c:	vu_char *cmd = (vu_char *) info->start[0];
./board/netstal/hcu4/hcu4.c:		info->portwidth = 1;
./board/netstal/hcu4/hcu4.c:		info->chipwidth = 1;
./board/netstal/hcu4/hcu4.c:		info->interface = FLASH_CFI_X8;
./board/netstal/mcu25/mcu25.c:		info->portwidth = 1;
./board/netstal/mcu25/mcu25.c:		info->chipwidth = 1;
./board/netstal/mcu25/mcu25.c:		info->interface = FLASH_CFI_X8;
./board/netstal/hcu5/hcu5.c:		info->portwidth = 1;
./board/netstal/hcu5/hcu5.c:		info->chipwidth = 1;
./board/netstal/hcu5/hcu5.c:		info->interface = FLASH_CFI_X8;
./board/cmc_pu2/flash.c:	vu_short *base = (vu_short *)(info->start[0]);
./board/cmc_pu2/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL)
./board/cmc_pu2/flash.c:	else if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_AMD)
./board/cmc_pu2/flash.c:		if (info->size && info->start[0] <= base &&
./board/cmc_pu2/flash.c:		    base <= info->start[0] + info->size - 1)
./board/cmc_pu2/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/cmc_pu2/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/cmc_pu2/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/cmc_pu2/flash.c:		info->size >> 20,
./board/cmc_pu2/flash.c:		info->sector_count);
./board/cmc_pu2/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/cmc_pu2/flash.c:			info->start[i],
./board/cmc_pu2/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/cmc_pu2/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/cmc_pu2/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/cmc_pu2/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/cmc_pu2/flash.c:		info->sector_count = 0;
./board/cmc_pu2/flash.c:		info->size = 0;
./board/cmc_pu2/flash.c:				info->flash_id = FLASH_UNKNOWN;
./board/cmc_pu2/flash.c:				info->sector_count = 0;
./board/cmc_pu2/flash.c:				info->size = 0;
./board/cmc_pu2/flash.c:				info->flash_id += FLASH_S29GL064M;
./board/cmc_pu2/flash.c:				info->sector_count = 128;
./board/cmc_pu2/flash.c:				info->size = 0x00800000;
./board/cmc_pu2/flash.c:				for (i = 0; i < info->sector_count; i++) {
./board/cmc_pu2/flash.c:					info->start[i] = base;
./board/cmc_pu2/flash.c:			info->flash_id = FLASH_UNKNOWN;
./board/cmc_pu2/flash.c:			info->sector_count = 0;
./board/cmc_pu2/flash.c:			info->size = 0;
./board/cmc_pu2/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/cmc_pu2/flash.c:		info->sector_count = 0;
./board/cmc_pu2/flash.c:		info->size = 0;
./board/cmc_pu2/flash.c:	return (info->size);
./board/cmc_pu2/flash.c:	vu_short *addr = (vu_short *)(info->start[0]);
./board/cmc_pu2/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/cmc_pu2/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/cmc_pu2/flash.c:	    (info->flash_id > FLASH_AMD_COMP)) {
./board/cmc_pu2/flash.c:			info->flash_id);
./board/cmc_pu2/flash.c:		if (info->protect[sect]) {
./board/cmc_pu2/flash.c:			if (info->protect[sect + ssect] == 0) {	/* not protected */
./board/cmc_pu2/flash.c:				addr = (vu_short *)(info->start[sect + ssect]);
./board/cmc_pu2/flash.c:		addr = (vu_short *)(info->start[l_sect]);
./board/cmc_pu2/flash.c:		addr = (vu_short *)info->start[0];
./board/cmc_pu2/flash.c:	addr = (vu_short *)info->start[0];
./board/cmc_pu2/flash.c:	base = (vu_short *)(info->start[0]);
./board/RPXlite_dw/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/RPXlite_dw/flash.c:		info->start[0] = base + 0x00000000;
./board/RPXlite_dw/flash.c:		info->start[1] = base + 0x00008000;
./board/RPXlite_dw/flash.c:		info->start[2] = base + 0x00010000;
./board/RPXlite_dw/flash.c:		info->start[3] = base + 0x00018000;
./board/RPXlite_dw/flash.c:		info->start[4] = base + 0x00020000;
./board/RPXlite_dw/flash.c:		info->start[5] = base + 0x00028000;
./board/RPXlite_dw/flash.c:		info->start[6] = base + 0x00030000;
./board/RPXlite_dw/flash.c:		info->start[7] = base + 0x00038000;
./board/RPXlite_dw/flash.c:		for (i = 8; i < info->sector_count; i++) {
./board/RPXlite_dw/flash.c:			info->start[i] = base + ((i-7) * 0x00040000);
./board/RPXlite_dw/flash.c:		i = info->sector_count - 1;
./board/RPXlite_dw/flash.c:		info->start[i--] = base + info->size - 0x00010000;
./board/RPXlite_dw/flash.c:		info->start[i--] = base + info->size - 0x00018000;
./board/RPXlite_dw/flash.c:		info->start[i--] = base + info->size - 0x00020000;
./board/RPXlite_dw/flash.c:			info->start[i] = base + i * 0x00040000;
./board/RPXlite_dw/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/RPXlite_dw/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/RPXlite_dw/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/RPXlite_dw/flash.c:	printf ("  Size: %ld MB in %d Sectors\n",info->size >> 20, info->sector_count);
./board/RPXlite_dw/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/RPXlite_dw/flash.c:		printf (" %08lX%s",info->start[i],info->protect[i] ? " (RO)" : "     ");
./board/RPXlite_dw/flash.c:		info->flash_id = FLASH_MAN_AMD; /* FLASH_MAN_AMD=0x00000000 in flash.h */
./board/RPXlite_dw/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/RPXlite_dw/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/RPXlite_dw/flash.c:		info->sector_count = 0;
./board/RPXlite_dw/flash.c:		info->size = 0;
./board/RPXlite_dw/flash.c:		info->flash_id += FLASH_AM400T;
./board/RPXlite_dw/flash.c:		info->sector_count = 11;
./board/RPXlite_dw/flash.c:		info->size = 0x00100000;
./board/RPXlite_dw/flash.c:		info->flash_id += FLASH_AM400B;
./board/RPXlite_dw/flash.c:		info->sector_count = 11;
./board/RPXlite_dw/flash.c:		info->size = 0x00100000;
./board/RPXlite_dw/flash.c:		info->flash_id += FLASH_AM800T;
./board/RPXlite_dw/flash.c:		info->sector_count = 19;
./board/RPXlite_dw/flash.c:		info->size = 0x00200000;
./board/RPXlite_dw/flash.c:		info->flash_id += FLASH_AM800B;
./board/RPXlite_dw/flash.c:		info->sector_count = 19;
./board/RPXlite_dw/flash.c:		info->size = 0x00400000;	/* Size doubled by yooth */
./board/RPXlite_dw/flash.c:		info->flash_id += FLASH_AM160T;
./board/RPXlite_dw/flash.c:		info->sector_count = 35;
./board/RPXlite_dw/flash.c:		info->size = 0x00400000;
./board/RPXlite_dw/flash.c:		info->flash_id += FLASH_AM160B;
./board/RPXlite_dw/flash.c:		info->sector_count = 35;
./board/RPXlite_dw/flash.c:		info->size = 0x00400000;
./board/RPXlite_dw/flash.c:		info->flash_id += FLASH_AMDL323B;
./board/RPXlite_dw/flash.c:		info->sector_count = 71;
./board/RPXlite_dw/flash.c:		info->size = 0x01000000;
./board/RPXlite_dw/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/RPXlite_dw/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/RPXlite_dw/flash.c:		info->start[0] = base + 0x00000000;
./board/RPXlite_dw/flash.c:		info->start[1] = base + 0x00008000;
./board/RPXlite_dw/flash.c:		info->start[2] = base + 0x00010000;
./board/RPXlite_dw/flash.c:		info->start[3] = base + 0x00018000;
./board/RPXlite_dw/flash.c:		info->start[4] = base + 0x00020000;
./board/RPXlite_dw/flash.c:		info->start[5] = base + 0x00028000;
./board/RPXlite_dw/flash.c:		info->start[6] = base + 0x00030000;
./board/RPXlite_dw/flash.c:		info->start[7] = base + 0x00038000;
./board/RPXlite_dw/flash.c:		for (i = 8; i < info->sector_count; i++) {
./board/RPXlite_dw/flash.c:			info->start[i] = base + ((i-7) * 0x00040000) ;
./board/RPXlite_dw/flash.c:		i = info->sector_count - 1;
./board/RPXlite_dw/flash.c:		info->start[i--] = base + info->size - 0x00010000;
./board/RPXlite_dw/flash.c:		info->start[i--] = base + info->size - 0x00018000;
./board/RPXlite_dw/flash.c:		info->start[i--] = base + info->size - 0x00020000;
./board/RPXlite_dw/flash.c:			info->start[i] = base + i * 0x00040000;
./board/RPXlite_dw/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/RPXlite_dw/flash.c:		addr = (volatile unsigned long *)(info->start[i]);
./board/RPXlite_dw/flash.c:		/* info->protect[i] = addr[4] & 1 ; */
./board/RPXlite_dw/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/RPXlite_dw/flash.c:		addr = (volatile unsigned long *)info->start[0];
./board/RPXlite_dw/flash.c:	return (info->size);
./board/RPXlite_dw/flash.c:	vu_long *addr = (vu_long*)(info->start[0]);
./board/RPXlite_dw/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/RPXlite_dw/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/RPXlite_dw/flash.c:	    (info->flash_id > FLASH_AMD_COMP)) {
./board/RPXlite_dw/flash.c:			info->flash_id);
./board/RPXlite_dw/flash.c:		if (info->protect[sect]) {
./board/RPXlite_dw/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/RPXlite_dw/flash.c:			addr = (vu_long *)(info->start[sect]) ;
./board/RPXlite_dw/flash.c:	addr = (vu_long *)(info->start[l_sect]);
./board/RPXlite_dw/flash.c:	addr = (vu_long *)info->start[0];
./board/RPXlite_dw/flash.c:	vu_long *addr = (vu_long *)(info->start[0]);
./board/esteem192e/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/esteem192e/flash.c:		if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/esteem192e/flash.c:			info->start[0] = base + 0x00000000;
./board/esteem192e/flash.c:			info->start[1] = base + 0x00004000;
./board/esteem192e/flash.c:			info->start[2] = base + 0x00008000;
./board/esteem192e/flash.c:			info->start[3] = base + 0x0000C000;
./board/esteem192e/flash.c:			info->start[4] = base + 0x00010000;
./board/esteem192e/flash.c:			info->start[5] = base + 0x00014000;
./board/esteem192e/flash.c:			info->start[6] = base + 0x00018000;
./board/esteem192e/flash.c:			info->start[7] = base + 0x0001C000;
./board/esteem192e/flash.c:			for (i = 8; i < info->sector_count; i++) {
./board/esteem192e/flash.c:				info->start[i] =
./board/esteem192e/flash.c:			info->start[0] = base + 0x00000000;
./board/esteem192e/flash.c:			info->start[1] = base + 0x00008000;
./board/esteem192e/flash.c:			info->start[2] = base + 0x0000C000;
./board/esteem192e/flash.c:			info->start[3] = base + 0x00010000;
./board/esteem192e/flash.c:			for (i = 4; i < info->sector_count; i++) {
./board/esteem192e/flash.c:				info->start[i] =
./board/esteem192e/flash.c:			info->start[0] = base + 0x00000000;
./board/esteem192e/flash.c:			info->start[1] = base + 0x00002000;
./board/esteem192e/flash.c:			info->start[2] = base + 0x00004000;
./board/esteem192e/flash.c:			info->start[3] = base + 0x00006000;
./board/esteem192e/flash.c:			info->start[4] = base + 0x00008000;
./board/esteem192e/flash.c:			info->start[5] = base + 0x0000A000;
./board/esteem192e/flash.c:			info->start[6] = base + 0x0000C000;
./board/esteem192e/flash.c:			info->start[7] = base + 0x0000E000;
./board/esteem192e/flash.c:			for (i = 8; i < info->sector_count; i++) {
./board/esteem192e/flash.c:				info->start[i] =
./board/esteem192e/flash.c:			info->start[0] = base + 0x00000000;
./board/esteem192e/flash.c:			info->start[1] = base + 0x00004000;
./board/esteem192e/flash.c:			info->start[2] = base + 0x00006000;
./board/esteem192e/flash.c:			info->start[3] = base + 0x00008000;
./board/esteem192e/flash.c:			for (i = 4; i < info->sector_count; i++) {
./board/esteem192e/flash.c:				info->start[i] =
./board/esteem192e/flash.c:		i = info->sector_count - 1;
./board/esteem192e/flash.c:		if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x00004000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x00008000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x0000C000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x00010000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x00014000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x00018000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x0001C000;
./board/esteem192e/flash.c:				info->start[i] = base + i * 0x00020000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x00008000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x0000C000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x00010000;
./board/esteem192e/flash.c:				info->start[i] = base + i * 0x00020000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x00002000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x00004000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x00006000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x00008000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x0000A000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x0000C000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x0000E000;
./board/esteem192e/flash.c:				info->start[i] = base + i * 0x00010000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x00004000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x00006000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x00008000;
./board/esteem192e/flash.c:				info->start[i] = base + i * 0x00010000;
./board/esteem192e/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/esteem192e/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/esteem192e/flash.c:	if (info->flash_id & 0x0001) {
./board/esteem192e/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/esteem192e/flash.c:		info->size >> 20, info->sector_count);
./board/esteem192e/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/esteem192e/flash.c:			info->start[i], info->protect[i] ? " (RO)" : "     ");
./board/esteem192e/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/esteem192e/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/esteem192e/flash.c:		info->flash_id = FLASH_MAN_STM;
./board/esteem192e/flash.c:		info->flash_id = FLASH_MAN_SST;
./board/esteem192e/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/esteem192e/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/esteem192e/flash.c:		info->sector_count = 0;
./board/esteem192e/flash.c:		info->size = 0;
./board/esteem192e/flash.c:		info->flash_id += FLASH_AM400T;
./board/esteem192e/flash.c:		info->sector_count = 11;
./board/esteem192e/flash.c:		info->size = 0x00100000;
./board/esteem192e/flash.c:		info->flash_id += FLASH_AM400B;
./board/esteem192e/flash.c:		info->sector_count = 11;
./board/esteem192e/flash.c:		info->size = 0x00100000;
./board/esteem192e/flash.c:		info->flash_id += FLASH_AM800T;
./board/esteem192e/flash.c:		info->sector_count = 19;
./board/esteem192e/flash.c:		info->size = 0x00200000;
./board/esteem192e/flash.c:		info->flash_id += FLASH_AM800B;
./board/esteem192e/flash.c:		info->sector_count = 19;
./board/esteem192e/flash.c:		info->size = 0x00200000;
./board/esteem192e/flash.c:		info->flash_id += FLASH_AM160T;
./board/esteem192e/flash.c:		info->sector_count = 35;
./board/esteem192e/flash.c:		info->size = 0x00400000;
./board/esteem192e/flash.c:		info->flash_id += FLASH_AM160B;
./board/esteem192e/flash.c:		info->sector_count = 35;
./board/esteem192e/flash.c:		info->size = 0x00400000;
./board/esteem192e/flash.c:		info->flash_id += FLASH_AM320T;
./board/esteem192e/flash.c:		info->sector_count = 67;
./board/esteem192e/flash.c:		info->size = 0x00800000;
./board/esteem192e/flash.c:		info->flash_id += FLASH_AM320B;
./board/esteem192e/flash.c:		info->sector_count = 67;
./board/esteem192e/flash.c:		info->size = 0x00800000;
./board/esteem192e/flash.c:		info->flash_id += FLASH_INTEL800T;
./board/esteem192e/flash.c:		info->sector_count = 23;
./board/esteem192e/flash.c:		info->size = 0x00200000;
./board/esteem192e/flash.c:		info->flash_id += FLASH_INTEL800B;
./board/esteem192e/flash.c:		info->sector_count = 23;
./board/esteem192e/flash.c:		info->size = 0x00200000;
./board/esteem192e/flash.c:		info->flash_id += FLASH_INTEL160T;
./board/esteem192e/flash.c:		info->sector_count = 39;
./board/esteem192e/flash.c:		info->size = 0x00400000;
./board/esteem192e/flash.c:		info->flash_id += FLASH_INTEL160B;
./board/esteem192e/flash.c:		info->sector_count = 39;
./board/esteem192e/flash.c:		info->size = 0x00400000;
./board/esteem192e/flash.c:		info->flash_id += FLASH_INTEL320T;
./board/esteem192e/flash.c:		info->sector_count = 71;
./board/esteem192e/flash.c:		info->size = 0x00800000;
./board/esteem192e/flash.c:		info->flash_id += FLASH_AM320B;
./board/esteem192e/flash.c:		info->sector_count = 71;
./board/esteem192e/flash.c:		info->size = 0x00800000;
./board/esteem192e/flash.c:		info->flash_id += FLASH_INTEL320T;
./board/esteem192e/flash.c:		info->sector_count = 135;
./board/esteem192e/flash.c:		info->size = 0x01000000;
./board/esteem192e/flash.c:		info->flash_id += FLASH_AM320B;
./board/esteem192e/flash.c:		info->sector_count = 135;
./board/esteem192e/flash.c:		info->size = 0x01000000;
./board/esteem192e/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/esteem192e/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/esteem192e/flash.c:		if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/esteem192e/flash.c:			info->start[0] = base + 0x00000000;
./board/esteem192e/flash.c:			info->start[1] = base + 0x00004000;
./board/esteem192e/flash.c:			info->start[2] = base + 0x00008000;
./board/esteem192e/flash.c:			info->start[3] = base + 0x0000C000;
./board/esteem192e/flash.c:			info->start[4] = base + 0x00010000;
./board/esteem192e/flash.c:			info->start[5] = base + 0x00014000;
./board/esteem192e/flash.c:			info->start[6] = base + 0x00018000;
./board/esteem192e/flash.c:			info->start[7] = base + 0x0001C000;
./board/esteem192e/flash.c:			for (i = 8; i < info->sector_count; i++) {
./board/esteem192e/flash.c:				info->start[i] =
./board/esteem192e/flash.c:			info->start[0] = base + 0x00000000;
./board/esteem192e/flash.c:			info->start[1] = base + 0x00008000;
./board/esteem192e/flash.c:			info->start[2] = base + 0x0000C000;
./board/esteem192e/flash.c:			info->start[3] = base + 0x00010000;
./board/esteem192e/flash.c:			for (i = 4; i < info->sector_count; i++) {
./board/esteem192e/flash.c:				info->start[i] =
./board/esteem192e/flash.c:			info->start[0] = base + 0x00000000;
./board/esteem192e/flash.c:			info->start[1] = base + 0x00002000;
./board/esteem192e/flash.c:			info->start[2] = base + 0x00004000;
./board/esteem192e/flash.c:			info->start[3] = base + 0x00006000;
./board/esteem192e/flash.c:			info->start[4] = base + 0x00008000;
./board/esteem192e/flash.c:			info->start[5] = base + 0x0000A000;
./board/esteem192e/flash.c:			info->start[6] = base + 0x0000C000;
./board/esteem192e/flash.c:			info->start[7] = base + 0x0000E000;
./board/esteem192e/flash.c:			for (i = 8; i < info->sector_count; i++) {
./board/esteem192e/flash.c:				info->start[i] =
./board/esteem192e/flash.c:			info->start[0] = base + 0x00000000;
./board/esteem192e/flash.c:			info->start[1] = base + 0x00004000;
./board/esteem192e/flash.c:			info->start[2] = base + 0x00006000;
./board/esteem192e/flash.c:			info->start[3] = base + 0x00008000;
./board/esteem192e/flash.c:			for (i = 4; i < info->sector_count; i++) {
./board/esteem192e/flash.c:				info->start[i] =
./board/esteem192e/flash.c:		i = info->sector_count - 1;
./board/esteem192e/flash.c:		if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x00004000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x00008000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x0000C000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x00010000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x00014000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x00018000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x0001C000;
./board/esteem192e/flash.c:				info->start[i] = base + i * 0x00020000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x00008000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x0000C000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x00010000;
./board/esteem192e/flash.c:				info->start[i] = base + i * 0x00020000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x00002000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x00004000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x00006000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x00008000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x0000A000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x0000C000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x0000E000;
./board/esteem192e/flash.c:				info->start[i] = base + i * 0x00010000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x00004000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x00006000;
./board/esteem192e/flash.c:			info->start[i--] = base + info->size - 0x00008000;
./board/esteem192e/flash.c:				info->start[i] = base + i * 0x00010000;
./board/esteem192e/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/esteem192e/flash.c:		addr = (volatile FLASH_WORD_SIZE *) (info->start[i]);
./board/esteem192e/flash.c:		info->protect[i] = addr[2] & 1;
./board/esteem192e/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/esteem192e/flash.c:		addr = (volatile FLASH_WORD_SIZE *) info->start[0];
./board/esteem192e/flash.c:		if ((info->flash_id & 0xFF00) == FLASH_MAN_INTEL) {
./board/esteem192e/flash.c:	return (info->size);
./board/esteem192e/flash.c:		(volatile FLASH_WORD_SIZE *) (info->start[0]);
./board/esteem192e/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/esteem192e/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/esteem192e/flash.c:	    ((info->flash_id > FLASH_AMD_COMP) &&
./board/esteem192e/flash.c:	     ((info->flash_id & FLASH_VENDMASK) != FLASH_MAN_INTEL))) {
./board/esteem192e/flash.c:		if (info->protect[sect]) {
./board/esteem192e/flash.c:	if (info->flash_id < FLASH_AMD_COMP) {
./board/esteem192e/flash.c:			if (info->protect[sect] == 0) {	/* not protected */
./board/esteem192e/flash.c:				addr = (volatile FLASH_WORD_SIZE *) (info->start[sect]);
./board/esteem192e/flash.c:		addr = (volatile FLASH_WORD_SIZE *) (info->start[l_sect]);
./board/esteem192e/flash.c:		addr = (volatile FLASH_WORD_SIZE *) info->start[0];
./board/esteem192e/flash.c:			if (info->protect[sect] == 0) {	/* not protected */
./board/esteem192e/flash.c:				addr = (vu_long *) (info->start[sect]);
./board/esteem192e/flash.c:				addr = (vu_short *) (info->start[sect]);
./board/esteem192e/flash.c:			addr = (volatile FLASH_WORD_SIZE *) info->start[0];
./board/esteem192e/flash.c:	vu_long *addr = (vu_long *) (info->start[0]);
./board/esteem192e/flash.c:	if (info->flash_id > FLASH_AMD_COMP) {
./board/esteem192e/flash.c:	if (info->flash_id > FLASH_AMD_COMP) {
./board/esteem192e/flash.c:	vu_short *addr = (vu_short *) (info->start[0]);
./board/esteem192e/flash.c:	if (info->flash_id < FLASH_AMD_COMP) {
./board/esteem192e/flash.c:	if (info->flash_id < FLASH_AMD_COMP) {
./board/lpd7a40x/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/lpd7a40x/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/lpd7a40x/flash.c:			info->size >> 20, info->sector_count);
./board/lpd7a40x/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/lpd7a40x/flash.c:			info->start[i],
./board/lpd7a40x/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/lpd7a40x/flash.c:	if (info->flash_id == FLASH_UNKNOWN)
./board/lpd7a40x/flash.c:	if ((info->flash_id & FLASH_VENDMASK) !=
./board/lpd7a40x/flash.c:		if (info->protect[sect]) {
./board/lpd7a40x/flash.c:			sect, info->start[sect]);
./board/lpd7a40x/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/lpd7a40x/flash.c:			vu_long *addr = (vu_long *) (info->start[sect]);
./board/ml2/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/ml2/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/ml2/flash.c:	printf("  Size: %ld MB in %d Sectors\n", info->size >> 20, info->sector_count);
./board/ml2/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/ml2/flash.c:		printf (" %08lX%s", info->start[i],
./board/ml2/flash.c:				 info->protect[i] ? " (RO)" : "     ");
./board/ml2/flash.c:	if (info->flash_id == FLASH_UNKNOWN)
./board/ml2/flash.c:	if ((info->flash_id & FLASH_VENDMASK) != (INTEL_MANUFACT & FLASH_VENDMASK))
./board/ml2/flash.c:		if (info->protect[sect])
./board/ml2/flash.c:									(unsigned long long *)(info->start[sect]);
./board/csb226/flash.c:		switch (info->flash_id & FLASH_VENDMASK) {
./board/csb226/flash.c:		switch (info->flash_id & FLASH_TYPEMASK) {
./board/csb226/flash.c:			info->size >> 20, info->sector_count);
./board/csb226/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/csb226/flash.c:			printf (" %08lX%s", info->start[i],
./board/csb226/flash.c:				info->protect[i] ? " (RO)" : "	   ");
./board/csb226/flash.c:	if (info->flash_id == FLASH_UNKNOWN)
./board/csb226/flash.c:	if ((info->flash_id & FLASH_VENDMASK) != (INTEL_MANUFACT & FLASH_VENDMASK))
./board/csb226/flash.c:		if (info->protect[sect]) prot++;
./board/csb226/flash.c:		if (info->protect[sect] == 0) { /* not protected */
./board/csb226/flash.c:			u32 * volatile addr = (u32 * volatile)(info->start[sect]);
./board/mpl/vcma9/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/mpl/vcma9/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/mpl/vcma9/flash.c:		info->size >> 20, info->sector_count);
./board/mpl/vcma9/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/mpl/vcma9/flash.c:		printf (" %08lX%s", info->start[i],
./board/mpl/vcma9/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/mpl/vcma9/flash.c:	if (info->flash_id == FLASH_UNKNOWN)
./board/mpl/vcma9/flash.c:	if ((info->flash_id & FLASH_VENDMASK) !=
./board/mpl/vcma9/flash.c:		if (info->protect[sect]) {
./board/mpl/vcma9/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/mpl/vcma9/flash.c:			vu_short *addr = (vu_short *) (info->start[sect]);
./board/mpl/common/common_util.c:	for (i = info->sector_count-1; i > 0; i--) {
./board/mpl/common/common_util.c:		info->protect[i] = 0; /* unprotect this sector */
./board/mpl/common/common_util.c:		if (start >= info->start[i])
./board/mpl/common/common_util.c:				start,i,info->start[i]);
./board/mpl/common/common_util.c:	if ((rc = flash_erase (info, i, info->sector_count-1)) != 0) {
./board/mpl/common/common_util.c:	for (i = 0; i < info->sector_count; i++) {
./board/mpl/common/common_util.c:		if (start < info->start[i]) {
./board/mpl/common/common_util.c:	info->protect[i - 1] = 0;	/* unprotect this sector */
./board/mpl/common/common_util.c:	for (; i < info->sector_count; i++) {
./board/mpl/common/common_util.c:		if ((start + size) < info->start[i])
./board/mpl/common/common_util.c:		info->protect[i] = 0;	/* unprotect this sector */
./board/mpl/common/common_util.c:		info->start[start_sect], info->start[i]);
./board/mpl/common/common_util.c:	for (i = 0; i <info->sector_count; i++) {
./board/mpl/common/common_util.c:		info->protect[i] = 0; /* unprotect this sector */
./board/mpl/common/common_util.c:		if (size < info->start[i])
./board/mpl/common/common_util.c:				start,0,info->start[0]);
./board/mpl/common/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/mpl/common/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/mpl/common/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/mpl/common/flash.c:		info->size >> 10, info->sector_count);
./board/mpl/common/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/mpl/common/flash.c:		if (i != (info->sector_count-1))
./board/mpl/common/flash.c:			size = info->start[i+1] - info->start[i];
./board/mpl/common/flash.c:			size = info->start[0] + info->size - info->start[i];
./board/mpl/common/flash.c:		flash = (volatile unsigned long *)info->start[i];
./board/mpl/common/flash.c:			info->start[i],
./board/mpl/common/flash.c:			info->protect[i] ? "RO " : "   ");
./board/mpl/common/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/mpl/common/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/mpl/common/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/mpl/common/flash.c:		info->flash_id = FLASH_MAN_SST;
./board/mpl/common/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/mpl/common/flash.c:		info->sector_count = 0;
./board/mpl/common/flash.c:		info->size = 0;
./board/mpl/common/flash.c:		info->flash_id += FLASH_AM040;
./board/mpl/common/flash.c:		info->sector_count = 8;
./board/mpl/common/flash.c:		info->size = 0x0080000; /* => 512 ko */
./board/mpl/common/flash.c:		info->flash_id += FLASH_AM400T;
./board/mpl/common/flash.c:		info->sector_count = 11;
./board/mpl/common/flash.c:		info->size = 0x00080000;
./board/mpl/common/flash.c:		info->flash_id += FLASH_AM400B;
./board/mpl/common/flash.c:		info->sector_count = 11;
./board/mpl/common/flash.c:		info->size = 0x00080000;
./board/mpl/common/flash.c:		info->flash_id += FLASH_AM800T;
./board/mpl/common/flash.c:		info->sector_count = 19;
./board/mpl/common/flash.c:		info->size = 0x00100000;
./board/mpl/common/flash.c:		info->flash_id += FLASH_AM800B;
./board/mpl/common/flash.c:		info->sector_count = 19;
./board/mpl/common/flash.c:		info->size = 0x00100000;
./board/mpl/common/flash.c:		info->flash_id += FLASH_AM160T;
./board/mpl/common/flash.c:		info->sector_count = 35;
./board/mpl/common/flash.c:		info->size = 0x00200000;
./board/mpl/common/flash.c:		info->flash_id += FLASH_AM160B;
./board/mpl/common/flash.c:		info->sector_count = 35;
./board/mpl/common/flash.c:		info->size = 0x00200000;
./board/mpl/common/flash.c:		info->flash_id += FLASH_AM320T;
./board/mpl/common/flash.c:		info->sector_count = 67;
./board/mpl/common/flash.c:		info->size = 0x00400000;
./board/mpl/common/flash.c:		info->flash_id += FLASH_AM640U;
./board/mpl/common/flash.c:		info->sector_count = 128;
./board/mpl/common/flash.c:		info->size = 0x00800000;
./board/mpl/common/flash.c:		info->flash_id += FLASH_AM320B;
./board/mpl/common/flash.c:		info->sector_count = 67;
./board/mpl/common/flash.c:		info->size = 0x00400000;
./board/mpl/common/flash.c:		info->flash_id += FLASH_SST800A;
./board/mpl/common/flash.c:		info->sector_count = 16;
./board/mpl/common/flash.c:		info->size = 0x00100000;
./board/mpl/common/flash.c:		info->flash_id += FLASH_INTEL320T;
./board/mpl/common/flash.c:		info->sector_count = 71;
./board/mpl/common/flash.c:		info->size = 0x00400000;
./board/mpl/common/flash.c:		info->flash_id += FLASH_SST160A;
./board/mpl/common/flash.c:		info->sector_count = 32;
./board/mpl/common/flash.c:		info->size = 0x00200000;
./board/mpl/common/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/mpl/common/flash.c:	base=0-info->size;
./board/mpl/common/flash.c:	if (((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) ||
./board/mpl/common/flash.c:	     (info->flash_id  == FLASH_AM040) ||
./board/mpl/common/flash.c:	     (info->flash_id  == FLASH_AM640U)){
./board/mpl/common/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/mpl/common/flash.c:			info->start[i] = base + (i * 0x00010000);
./board/mpl/common/flash.c:		if (info->flash_id & FLASH_BTYPE) {
./board/mpl/common/flash.c:			info->start[0] = base + 0x00000000;
./board/mpl/common/flash.c:			info->start[1] = base + 0x00004000;
./board/mpl/common/flash.c:			info->start[2] = base + 0x00006000;
./board/mpl/common/flash.c:			info->start[3] = base + 0x00008000;
./board/mpl/common/flash.c:			for (i = 4; i < info->sector_count; i++)
./board/mpl/common/flash.c:				info->start[i] = base + (i * 0x00010000) - 0x00030000;
./board/mpl/common/flash.c:			i = info->sector_count - 1;
./board/mpl/common/flash.c:			if(info->sector_count==71) {
./board/mpl/common/flash.c:				info->start[i--] = base + info->size - 0x00002000;
./board/mpl/common/flash.c:				info->start[i--] = base + info->size - 0x00004000;
./board/mpl/common/flash.c:				info->start[i--] = base + info->size - 0x00006000;
./board/mpl/common/flash.c:				info->start[i--] = base + info->size - 0x00008000;
./board/mpl/common/flash.c:				info->start[i--] = base + info->size - 0x0000A000;
./board/mpl/common/flash.c:				info->start[i--] = base + info->size - 0x0000C000;
./board/mpl/common/flash.c:				info->start[i--] = base + info->size - 0x0000E000;
./board/mpl/common/flash.c:					info->start[i] = base + i * 0x000010000;
./board/mpl/common/flash.c:				info->start[i--] = base + info->size - 0x00004000;
./board/mpl/common/flash.c:				info->start[i--] = base + info->size - 0x00006000;
./board/mpl/common/flash.c:				info->start[i--] = base + info->size - 0x00008000;
./board/mpl/common/flash.c:					info->start[i] = base + i * 0x00010000;
./board/mpl/common/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/mpl/common/flash.c:		addr2 = (volatile FLASH_WORD_SIZE *)(info->start[i]);
./board/mpl/common/flash.c:		if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL)
./board/mpl/common/flash.c:			info->protect[i] = 0;
./board/mpl/common/flash.c:			info->protect[i] = addr2[2] & 1;
./board/mpl/common/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/mpl/common/flash.c:		addr2 = (FLASH_WORD_SIZE *)info->start[0];
./board/mpl/common/flash.c:	return (info->size);
./board/mpl/common/flash.c:	volatile FLASH_WORD_SIZE *addr = (FLASH_WORD_SIZE *)(info->start[sect]);
./board/mpl/common/flash.c:	volatile FLASH_WORD_SIZE *addr = (FLASH_WORD_SIZE *)(info->start[sect]);
./board/mpl/common/flash.c:	volatile FLASH_WORD_SIZE *addr = (FLASH_WORD_SIZE *)(info->start[0]);
./board/mpl/common/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/mpl/common/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/mpl/common/flash.c:		if (info->protect[sect]) {
./board/mpl/common/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/mpl/common/flash.c:			addr2 = (FLASH_WORD_SIZE *)(info->start[sect]);
./board/mpl/common/flash.c:			if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) {
./board/mpl/common/flash.c:				if((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL){
./board/mpl/common/flash.c:	addr = (FLASH_WORD_SIZE *)info->start[0];
./board/mpl/common/flash.c:	for(i=info->sector_count-1;i>0;i--)
./board/mpl/common/flash.c:		if(addr>=info->start[i])
./board/mpl/common/flash.c:		addr2 = (FLASH_WORD_SIZE *)(info->start[i]);
./board/mpl/common/flash.c:		c-=(info->start[i]-info->start[i-1]);
./board/mpl/common/flash.c:	if((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL){
./board/mpl/common/flash.c:	volatile FLASH_WORD_SIZE *addr2 = (volatile FLASH_WORD_SIZE *)(info->start[0]);
./board/mpl/common/flash.c:		if((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL){
./board/samsung/smdk2410/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/samsung/smdk2410/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/samsung/smdk2410/flash.c:		info->size >> 20, info->sector_count);
./board/samsung/smdk2410/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/samsung/smdk2410/flash.c:		printf (" %08lX%s", info->start[i],
./board/samsung/smdk2410/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/samsung/smdk2410/flash.c:	if (info->flash_id == FLASH_UNKNOWN)
./board/samsung/smdk2410/flash.c:	if ((info->flash_id & FLASH_VENDMASK) !=
./board/samsung/smdk2410/flash.c:		if (info->protect[sect]) {
./board/samsung/smdk2410/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/samsung/smdk2410/flash.c:			vu_short *addr = (vu_short *) (info->start[sect]);
./board/samsung/smdk2400/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/samsung/smdk2400/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/samsung/smdk2400/flash.c:			info->size >> 20, info->sector_count);
./board/samsung/smdk2400/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/samsung/smdk2400/flash.c:			info->start[i],
./board/samsung/smdk2400/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/samsung/smdk2400/flash.c:	if (info->flash_id == FLASH_UNKNOWN)
./board/samsung/smdk2400/flash.c:	if ((info->flash_id & FLASH_VENDMASK) !=
./board/samsung/smdk2400/flash.c:		if (info->protect[sect]) {
./board/samsung/smdk2400/flash.c:			sect, info->start[sect]);
./board/samsung/smdk2400/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/samsung/smdk2400/flash.c:			vu_long *addr = (vu_long *) (info->start[sect]);
./board/samsung/smdk6400/smdk6400.c:		info->portwidth = FLASH_CFI_16BIT;
./board/samsung/smdk6400/smdk6400.c:		info->chipwidth = FLASH_CFI_BY16;
./board/samsung/smdk6400/smdk6400.c:		info->interface = FLASH_CFI_X16;
./board/purple/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_AMD
./board/purple/flash.c:		 && (info->flash_id & FLASH_TYPEMASK) == FLASH_AM160B) {
./board/purple/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/purple/flash.c:			info->start[i] = base;
./board/purple/flash.c:		if (info->start[0] <= base && base < info->start[0] + info->size)
./board/purple/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/purple/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/purple/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/purple/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/purple/flash.c:		info->size >> 20,
./board/purple/flash.c:		info->sector_count);
./board/purple/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/purple/flash.c:		printf (" %08lX%s", info->start[i],
./board/purple/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/purple/flash.c:		info->flash_id += FLASH_AM160B;
./board/purple/flash.c:		info->sector_count = 35;
./board/purple/flash.c:		info->size = 0x00400000;
./board/purple/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/purple/flash.c:		info->sector_count = 0;
./board/purple/flash.c:		info->size = 0;
./board/purple/flash.c:	return (info->size);
./board/purple/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/purple/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/purple/flash.c:			info->flash_id);
./board/purple/flash.c:		if (info->protect[sect]) {
./board/purple/flash.c:		if (info->protect[sect] != 0)	/* protected, skip it */
./board/purple/flash.c:		addr = (FPWV *)(info->start[sect]);
./board/purple/flash.c:    if (info->start[0] != PHYS_FLASH_1)
./board/mx1ads/syncflash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/mx1ads/syncflash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/mx1ads/syncflash.c:		info->size >> 20, info->sector_count);
./board/mx1ads/syncflash.c:	for (i = 0; i < info->sector_count; i++) {
./board/mx1ads/syncflash.c:		printf (" %08lX%s", info->start[i],
./board/mx1ads/syncflash.c:			info->protect[i] ? " (RO)" : "     ");
./board/mx1ads/syncflash.c:	if (info->flash_id == FLASH_UNKNOWN)
./board/mx1ads/syncflash.c:	if ((info->flash_id & FLASH_VENDMASK) != (FLASH_MAN_MT & FLASH_VENDMASK))
./board/mx1ads/syncflash.c:		if (info->protect[sect])
./board/evb64260/sdram_init.c:	info->slot = slot;
./board/evb64260/sdram_init.c:	info->banks = 2;	/* Detect later */
./board/evb64260/sdram_init.c:	info->registered = 0;
./board/evb64260/sdram_init.c:	info->drb_size = 32;	/* 16 - 256MBit, 32 - 512MBit
./board/evb64260/sdram_init.c:	info->tpar = 3;
./board/evb64260/sdram_init.c:	info->tras_clocks = 5;
./board/evb64260/sdram_init.c:	info->burst_len = 4;
./board/evb64260/sdram_init.c:	info->ecc = 0;		/* Detect later */
./board/evb64260/sdram_init.c:	info->slot = slot;
./board/evb64260/sdram_init.c:	info->banks = 1;
./board/evb64260/sdram_init.c:	info->registered = 0;
./board/evb64260/sdram_init.c:	info->drb_size = 4;
./board/evb64260/sdram_init.c:	info->tpar = 3;
./board/evb64260/sdram_init.c:	info->tras_clocks = 6;
./board/evb64260/sdram_init.c:	info->burst_len = 4;
./board/evb64260/sdram_init.c:	info->ecc = 2;
./board/evb64260/sdram_init.c:	info->banks = data[5];
./board/evb64260/sdram_init.c:	    ("sdram_banks: %d, banks: %d\n", sdram_banks, info->banks));
./board/evb64260/sdram_init.c:		info->registered = 1;
./board/evb64260/sdram_init.c:	info->ecc = (data[11] & 2) >> 1;
./board/evb64260/sdram_init.c:	info->tras_clocks = (NSto10PS (data[30]) + (tmemclk - 1)) / tmemclk;
./board/evb64260/sdram_init.c:		    trp_clocks, trcd_clocks, info->tras_clocks));
./board/evb64260/sdram_init.c:	info->tpar = cal_val;
./board/evb64260/sdram_init.c:	if (trp_clocks > info->tpar)
./board/evb64260/sdram_init.c:		info->tpar = trp_clocks;
./board/evb64260/sdram_init.c:	if (trcd_clocks > info->tpar)
./board/evb64260/sdram_init.c:		info->tpar = trcd_clocks;
./board/evb64260/sdram_init.c:	DP (printf ("tpar set to: %d\n", info->tpar));
./board/evb64260/sdram_init.c:	if (info->tpar == 2) {
./board/evb64260/sdram_init.c:		info->tpar = 3;
./board/evb64260/sdram_init.c:		DP (printf ("tpar fixed-up to: %d\n", info->tpar));
./board/evb64260/sdram_init.c:	info->drb_size =
./board/evb64260/sdram_init.c:	DP (printf ("drb_size set to: %d\n", info->drb_size));
./board/evb64260/sdram_init.c:	info->burst_len = data[16] & 0xf;
./board/evb64260/sdram_init.c:	if ((info->burst_len & 8) == 8) {
./board/evb64260/sdram_init.c:		info->burst_len = 1;
./board/evb64260/sdram_init.c:	} else if ((info->burst_len & 4) == 4) {
./board/evb64260/sdram_init.c:		info->burst_len = 0;
./board/evb64260/sdram_init.c:	info->slot = slot;
./board/evb64260/sdram_init.c:	if (!info->banks)
./board/evb64260/sdram_init.c:	DP (printf ("drb_size: %d\n", info->drb_size));
./board/evb64260/sdram_init.c:	switch (info->drb_size) {
./board/evb64260/sdram_init.c:	GT_REG_WRITE (SDRAM_BANK0PARAMETERS + (info->slot * 0x8), tmp);
./board/evb64260/sdram_init.c:	GT_REG_WRITE (SDRAM_BANK1PARAMETERS + (info->slot * 0x8), tmp);
./board/evb64260/sdram_init.c:	    ("SDRAM bankparam slot %d (bank %d+%d): %08lx\n", info->slot,
./board/evb64260/sdram_init.c:	     info->slot * 2, (info->slot * 2) + 1, tmp));
./board/evb64260/sdram_init.c:	for (i = info->slot * 2; i < ((info->slot * 2) + info->banks); i++) {
./board/evb64260/flash.c:	if(!info->sector_count) return;
./board/evb64260/flash.c:	switch(info->flash_id & FLASH_TYPEMASK) {
./board/evb64260/flash.c:		sector_size=info->size/info->sector_count;
./board/evb64260/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/evb64260/flash.c:			info->start[i] = base + (i * sector_size);
./board/evb64260/flash.c:		if (info->flash_id & FLASH_BTYPE) {
./board/evb64260/flash.c:		    info->start[0] = base + 0x00000000;
./board/evb64260/flash.c:		    info->start[1] = base + 0x00008000;
./board/evb64260/flash.c:		    info->start[2] = base + 0x0000C000;
./board/evb64260/flash.c:		    info->start[3] = base + 0x00010000;
./board/evb64260/flash.c:		    for (i = 4; i < info->sector_count; i++) {
./board/evb64260/flash.c:			    info->start[i] = base + (i * 0x00020000) - 0x00060000;
./board/evb64260/flash.c:		    i = info->sector_count - 1;
./board/evb64260/flash.c:		    info->start[i--] = base + info->size - 0x00008000;
./board/evb64260/flash.c:		    info->start[i--] = base + info->size - 0x0000C000;
./board/evb64260/flash.c:		    info->start[i--] = base + info->size - 0x00010000;
./board/evb64260/flash.c:			    info->start[i] = base + i * 0x00020000;
./board/evb64260/flash.c:		if (info->start[0] <= base && base <= info->start[0] + info->size - 1)
./board/evb64260/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/evb64260/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/evb64260/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/evb64260/flash.c:	print_size (info->size, "");
./board/evb64260/flash.c:	printf (" in %d Sectors\n", info->sector_count);
./board/evb64260/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/evb64260/flash.c:			info->start[i],
./board/evb64260/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/evb64260/flash.c:	info->portwidth=portwidth;
./board/evb64260/flash.c:		info->flash_id = FLASH_ROM + FLASH_MAN_UNKNOWN;
./board/evb64260/flash.c:		info->sector_count = 8;
./board/evb64260/flash.c:		info->size = 0x80000;
./board/evb64260/flash.c:		info->flash_id = FLASH_MAN_AMD + FLASH_AM040;
./board/evb64260/flash.c:		info->sector_count = 8;
./board/evb64260/flash.c:		info->size = 0x80000;
./board/evb64260/flash.c:		info->chipwidth=1;
./board/evb64260/flash.c:		return info->size;
./board/evb64260/flash.c:		info->flash_id = FLASH_RAM + FLASH_MAN_UNKNOWN;
./board/evb64260/flash.c:		info->sector_count = 8;
./board/evb64260/flash.c:		info->size = 0x80000;
./board/evb64260/flash.c:		return info->size;
./board/evb64260/flash.c:	    info->flash_id = FLASH_ROM + FLASH_MAN_UNKNOWN;
./board/evb64260/flash.c:	    info->sector_count = 8;
./board/evb64260/flash.c:	    info->size = 0x80000;
./board/evb64260/flash.c:		info->flash_id = FLASH_MAN_AMD + FLASH_AM040;
./board/evb64260/flash.c:		info->sector_count = 8;
./board/evb64260/flash.c:		info->size = 0x80000;
./board/evb64260/flash.c:		info->chipwidth=1;
./board/evb64260/flash.c:	    return info->size;
./board/evb64260/flash.c:		    info->flash_id = FLASH_MAN_AMD;
./board/evb64260/flash.c:		    info->flash_id = FLASH_MAN_FUJ;
./board/evb64260/flash.c:		    info->flash_id = FLASH_MAN_INTEL;
./board/evb64260/flash.c:		    info->flash_id = FLASH_UNKNOWN;
./board/evb64260/flash.c:		    info->sector_count = 0;
./board/evb64260/flash.c:		    info->size = 0;
./board/evb64260/flash.c:		    info->flash_id += FLASH_AM400T;
./board/evb64260/flash.c:		    info->sector_count = 11;
./board/evb64260/flash.c:		    info->size = 0x00100000;
./board/evb64260/flash.c:		    info->chipwidth=1;
./board/evb64260/flash.c:		    info->flash_id += FLASH_AM400B;
./board/evb64260/flash.c:		    info->sector_count = 11;
./board/evb64260/flash.c:		    info->size = 0x00100000;
./board/evb64260/flash.c:		    info->chipwidth=1;
./board/evb64260/flash.c:		    info->flash_id += FLASH_AM800T;
./board/evb64260/flash.c:		    info->sector_count = 19;
./board/evb64260/flash.c:		    info->size = 0x00200000;
./board/evb64260/flash.c:		    info->chipwidth=1;
./board/evb64260/flash.c:		    info->flash_id += FLASH_AM800B;
./board/evb64260/flash.c:		    info->sector_count = 19;
./board/evb64260/flash.c:		    info->size = 0x00200000;
./board/evb64260/flash.c:		    info->chipwidth=1;
./board/evb64260/flash.c:		    info->flash_id += FLASH_AM160T;
./board/evb64260/flash.c:		    info->sector_count = 35;
./board/evb64260/flash.c:		    info->size = 0x00400000;
./board/evb64260/flash.c:		    info->chipwidth=1;
./board/evb64260/flash.c:		    info->flash_id += FLASH_AM160B;
./board/evb64260/flash.c:		    info->sector_count = 35;
./board/evb64260/flash.c:		    info->size = 0x00400000;
./board/evb64260/flash.c:		    info->chipwidth=1;
./board/evb64260/flash.c:		    info->flash_id += FLASH_AM320T;
./board/evb64260/flash.c:		    info->sector_count = 67;
./board/evb64260/flash.c:		    info->size = 0x00800000;
./board/evb64260/flash.c:		    info->flash_id += FLASH_AM320B;
./board/evb64260/flash.c:		    info->sector_count = 67;
./board/evb64260/flash.c:		    info->size = 0x00800000;
./board/evb64260/flash.c:		    info->flash_id += FLASH_AM040;
./board/evb64260/flash.c:		    info->sector_count = 8;
./board/evb64260/flash.c:		    info->size = 0x80000;
./board/evb64260/flash.c:		    info->chipwidth=1;
./board/evb64260/flash.c:		    info->flash_id += FLASH_28F640J3A;
./board/evb64260/flash.c:		    info->sector_count = 64;
./board/evb64260/flash.c:		    info->size = 128*1024 * 64; /* 128kbytes x 64 blocks */
./board/evb64260/flash.c:		    info->chipwidth=2;
./board/evb64260/flash.c:		    if(portwidth==4) info->size*=2;	/* 2x16 */
./board/evb64260/flash.c:		    info->flash_id += FLASH_28F128J3A;
./board/evb64260/flash.c:		    info->sector_count = 128;
./board/evb64260/flash.c:		    info->size = 128*1024 * 128; /* 128kbytes x 128 blocks */
./board/evb64260/flash.c:		    info->chipwidth=2;
./board/evb64260/flash.c:		    if(portwidth==4) info->size*=2;	/* 2x16 */
./board/evb64260/flash.c:		    info->flash_id = FLASH_UNKNOWN;
./board/evb64260/flash.c:		    info->chipwidth=1;
./board/evb64260/flash.c:	if (info->flash_id & FLASH_AM040) {
./board/evb64260/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/evb64260/flash.c:			info->start[i] = base + (i * 0x00010000);
./board/evb64260/flash.c:	} else if (info->flash_id & FLASH_BTYPE) {
./board/evb64260/flash.c:		info->start[0] = base + 0x00000000;
./board/evb64260/flash.c:		info->start[1] = base + 0x00008000;
./board/evb64260/flash.c:		info->start[2] = base + 0x0000C000;
./board/evb64260/flash.c:		info->start[3] = base + 0x00010000;
./board/evb64260/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/evb64260/flash.c:			info->start[i] = base + (i * 0x00020000) - 0x00060000;
./board/evb64260/flash.c:		i = info->sector_count - 1;
./board/evb64260/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/evb64260/flash.c:		info->start[i--] = base + info->size - 0x0000C000;
./board/evb64260/flash.c:		info->start[i--] = base + info->size - 0x00010000;
./board/evb64260/flash.c:			info->start[i] = base + i * 0x00020000;
./board/evb64260/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/evb64260/flash.c:		caddr = (volatile unsigned char *)(info->start[i]);
./board/evb64260/flash.c:		saddr = (volatile unsigned short *)(info->start[i]);
./board/evb64260/flash.c:		laddr = (volatile unsigned long *)(info->start[i]);
./board/evb64260/flash.c:		    info->protect[i] = caddr[2] & 1;
./board/evb64260/flash.c:		    info->protect[i] = saddr[2] & 1;
./board/evb64260/flash.c:		    info->protect[i] = laddr[2] & 1;
./board/evb64260/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/evb64260/flash.c:		caddr = (volatile unsigned char *)info->start[0];
./board/evb64260/flash.c:	return (info->size);
./board/evb64260/flash.c:	volatile unsigned char *addr = (uchar *)(info->start[0]);
./board/evb64260/flash.c:	if(info->portwidth==4) return 1;
./board/evb64260/flash.c:	if((info->flash_id & FLASH_TYPEMASK) == FLASH_ROM) return 1;
./board/evb64260/flash.c:	if((info->flash_id & FLASH_TYPEMASK) == FLASH_RAM) {
./board/evb64260/flash.c:		int sector_size=info->size/info->sector_count;
./board/evb64260/flash.c:		addr = (uchar *)(info->start[sect]);
./board/evb64260/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/evb64260/flash.c:	if ((info->flash_id&FLASH_VENDMASK) == FLASH_MAN_INTEL)  {
./board/evb64260/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/evb64260/flash.c:	    (info->flash_id > FLASH_AMD_COMP)) {
./board/evb64260/flash.c:			info->flash_id);
./board/evb64260/flash.c:		if (info->protect[sect]) {
./board/evb64260/flash.c:	flash_cmd(info->portwidth,addr,0x555,0xAA);
./board/evb64260/flash.c:	flash_cmd(info->portwidth,addr,0x2AA,0x55);
./board/evb64260/flash.c:	flash_cmd(info->portwidth,addr,0x555,0x80);
./board/evb64260/flash.c:	flash_cmd(info->portwidth,addr,0x555,0xAA);
./board/evb64260/flash.c:	flash_cmd(info->portwidth,addr,0x2AA,0x55);
./board/evb64260/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/evb64260/flash.c:			addr = (uchar *)(info->start[sect]);
./board/evb64260/flash.c:			flash_cmd(info->portwidth,addr,0,0x30);
./board/evb64260/flash.c:	addr = (volatile unsigned char *)(info->start[l_sect]);
./board/evb64260/flash.c:	addr = (volatile unsigned char *)info->start[0];
./board/evb64260/flash.c:	flash_cmd(info->portwidth,addr,0,0xf0);
./board/evb64260/flash.c:	flash_cmd(info->portwidth,addr,0,0xf0);
./board/evb64260/flash.c:	if(info->portwidth==4) return 1;
./board/evb64260/flash.c:	if((info->flash_id & FLASH_TYPEMASK) == FLASH_ROM) return 0;
./board/evb64260/flash.c:	if((info->flash_id & FLASH_TYPEMASK) == FLASH_RAM) {
./board/evb64260/flash.c:	volatile unsigned char *addr = (uchar *)(info->start[0]);
./board/evb64260/flash.c:	if(info->portwidth==4) return 1;
./board/evb64260/flash.c:	if((info->flash_id & FLASH_TYPEMASK) == FLASH_ROM) return 1;
./board/evb64260/flash.c:	if((info->flash_id & FLASH_TYPEMASK) == FLASH_RAM) {
./board/evb64260/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL)  {
./board/evb64260/intel_flash.c:	addrw = (bank_addr_t)info->start[sect];
./board/evb64260/intel_flash.c:	saddrw = (bank_addr_t)info->start[sect];
./board/evb64260/intel_flash.c:	saddrw = (bank_addr_t)info->start[sect];
./board/evb64260/intel_flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/evb64260/intel_flash.c:		if (info->protect[sect]) {
./board/evb64260/intel_flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/evb64260/intel_flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/amcc/walnut/flash.c:	if (((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) ||
./board/amcc/walnut/flash.c:	    (info->flash_id == FLASH_AM040)) {
./board/amcc/walnut/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/amcc/walnut/flash.c:			info->start[i] = base + (i * 0x00010000);
./board/amcc/walnut/flash.c:		if (info->flash_id & FLASH_BTYPE) {
./board/amcc/walnut/flash.c:			info->start[0] = base + 0x00000000;
./board/amcc/walnut/flash.c:			info->start[1] = base + 0x00004000;
./board/amcc/walnut/flash.c:			info->start[2] = base + 0x00006000;
./board/amcc/walnut/flash.c:			info->start[3] = base + 0x00008000;
./board/amcc/walnut/flash.c:			for (i = 4; i < info->sector_count; i++) {
./board/amcc/walnut/flash.c:				info->start[i] =
./board/amcc/walnut/flash.c:			i = info->sector_count - 1;
./board/amcc/walnut/flash.c:			info->start[i--] = base + info->size - 0x00004000;
./board/amcc/walnut/flash.c:			info->start[i--] = base + info->size - 0x00006000;
./board/amcc/walnut/flash.c:			info->start[i--] = base + info->size - 0x00008000;
./board/amcc/walnut/flash.c:				info->start[i] = base + i * 0x00010000;
./board/amcc/common/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/amcc/common/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/amcc/common/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/amcc/common/flash.c:	       info->size >> 10, info->sector_count);
./board/amcc/common/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/amcc/common/flash.c:		if (i != (info->sector_count - 1))
./board/amcc/common/flash.c:			size = info->start[i + 1] - info->start[i];
./board/amcc/common/flash.c:			size = info->start[0] + info->size - info->start[i];
./board/amcc/common/flash.c:		flash = (volatile unsigned long *)info->start[i];
./board/amcc/common/flash.c:		       info->start[i],
./board/amcc/common/flash.c:		       erased ? " E" : "  ", info->protect[i] ? "RO " : "   ");
./board/amcc/common/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/amcc/common/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/amcc/common/flash.c:		info->flash_id = FLASH_MAN_SST;
./board/amcc/common/flash.c:		info->flash_id = FLASH_MAN_STM;
./board/amcc/common/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/amcc/common/flash.c:		info->sector_count = 0;
./board/amcc/common/flash.c:		info->size = 0;
./board/amcc/common/flash.c:		info->flash_id += FLASH_AM040;
./board/amcc/common/flash.c:		info->sector_count = 8;
./board/amcc/common/flash.c:		info->size = 0x0080000;		/* => 512 KiB */
./board/amcc/common/flash.c:		info->flash_id += FLASH_AM040;
./board/amcc/common/flash.c:		info->sector_count = 8;
./board/amcc/common/flash.c:		info->size = 0x0080000;		/* => 512 KiB */
./board/amcc/common/flash.c:		info->flash_id += FLASH_AM040;
./board/amcc/common/flash.c:		info->sector_count = 8;
./board/amcc/common/flash.c:		info->size = 0x0080000;		/* => 512 KiB */
./board/amcc/common/flash.c:		info->flash_id += FLASH_AMD016;
./board/amcc/common/flash.c:		info->sector_count = 32;
./board/amcc/common/flash.c:		info->size = 0x00200000;	/* => 2 MiB */
./board/amcc/common/flash.c:		info->flash_id += FLASH_AMDLV033C;
./board/amcc/common/flash.c:		info->sector_count = 64;
./board/amcc/common/flash.c:		info->size = 0x00400000;	/* => 4 MiB */
./board/amcc/common/flash.c:		info->flash_id += FLASH_AM400T;
./board/amcc/common/flash.c:		info->sector_count = 11;
./board/amcc/common/flash.c:		info->size = 0x00080000;	/* => 512 KiB */
./board/amcc/common/flash.c:		info->flash_id += FLASH_AM400B;
./board/amcc/common/flash.c:		info->sector_count = 11;
./board/amcc/common/flash.c:		info->size = 0x00080000;	/* => 512 KiB */
./board/amcc/common/flash.c:		info->flash_id += FLASH_AM800T;
./board/amcc/common/flash.c:		info->sector_count = 19;
./board/amcc/common/flash.c:		info->size = 0x00100000;	/* => 1 MiB */
./board/amcc/common/flash.c:		info->flash_id += FLASH_AM800B;
./board/amcc/common/flash.c:		info->sector_count = 19;
./board/amcc/common/flash.c:		info->size = 0x00100000;	/* => 1 MiB */
./board/amcc/common/flash.c:		info->flash_id += FLASH_AM160T;
./board/amcc/common/flash.c:		info->sector_count = 35;
./board/amcc/common/flash.c:		info->size = 0x00200000;	/* => 2 MiB */
./board/amcc/common/flash.c:		info->flash_id += FLASH_AM160B;
./board/amcc/common/flash.c:		info->sector_count = 35;
./board/amcc/common/flash.c:		info->size = 0x00200000;	/* => 2 MiB */
./board/amcc/common/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/amcc/common/flash.c:	if (((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) ||
./board/amcc/common/flash.c:	    ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM040) ||
./board/amcc/common/flash.c:	    ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMD016)) {
./board/amcc/common/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/amcc/common/flash.c:			info->start[i] = base + (i * 0x00010000);
./board/amcc/common/flash.c:		if (info->flash_id & FLASH_BTYPE) {
./board/amcc/common/flash.c:			info->start[0] = base + 0x00000000;
./board/amcc/common/flash.c:			info->start[1] = base + 0x00004000;
./board/amcc/common/flash.c:			info->start[2] = base + 0x00006000;
./board/amcc/common/flash.c:			info->start[3] = base + 0x00008000;
./board/amcc/common/flash.c:			for (i = 4; i < info->sector_count; i++) {
./board/amcc/common/flash.c:				info->start[i] =
./board/amcc/common/flash.c:			i = info->sector_count - 1;
./board/amcc/common/flash.c:			info->start[i--] = base + info->size - 0x00004000;
./board/amcc/common/flash.c:			info->start[i--] = base + info->size - 0x00006000;
./board/amcc/common/flash.c:			info->start[i--] = base + info->size - 0x00008000;
./board/amcc/common/flash.c:				info->start[i] = base + i * 0x00010000;
./board/amcc/common/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/amcc/common/flash.c:		addr2 = (volatile CONFIG_SYS_FLASH_WORD_SIZE *)(info->start[i]);
./board/amcc/common/flash.c:		if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST)
./board/amcc/common/flash.c:			info->protect[i] = 0;
./board/amcc/common/flash.c:			info->protect[i] = addr2[2] & 1;
./board/amcc/common/flash.c:	return (info->size);
./board/amcc/common/flash.c:	    (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[sect]);
./board/amcc/common/flash.c:	if (((info->flash_id & FLASH_TYPEMASK) == FLASH_AM320B) ||
./board/amcc/common/flash.c:	    ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM320T) ||
./board/amcc/common/flash.c:	    ((info->flash_id & FLASH_TYPEMASK) == FLASH_MXLV320T) ||
./board/amcc/common/flash.c:	    ((info->flash_id & FLASH_TYPEMASK) == FLASH_STMW320DT)) {
./board/amcc/common/flash.c:	volatile CONFIG_SYS_FLASH_WORD_SIZE *addr = (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[0]);
./board/amcc/common/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/amcc/common/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/amcc/common/flash.c:		if (info->protect[sect]) {
./board/amcc/common/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/amcc/common/flash.c:			addr2 = (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[sect]);
./board/amcc/common/flash.c:			if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) {
./board/amcc/common/flash.c:	addr = (CONFIG_SYS_FLASH_WORD_SIZE *) info->start[0];
./board/amcc/common/flash.c:	if (((info->flash_id & FLASH_TYPEMASK) == FLASH_AM320B) ||
./board/amcc/common/flash.c:	    ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM320T) ||
./board/amcc/common/flash.c:	    ((info->flash_id & FLASH_TYPEMASK) == FLASH_MXLV320T) ||
./board/amcc/common/flash.c:	    ((info->flash_id & FLASH_TYPEMASK) == FLASH_STMW320DT)) {
./board/amcc/common/flash.c:	volatile CONFIG_SYS_FLASH_WORD_SIZE *addr2 = (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[0]);
./board/amcc/common/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/amcc/common/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/amcc/common/flash.c:		info->flash_id = FLASH_MAN_SST;
./board/amcc/common/flash.c:		info->flash_id = FLASH_MAN_STM;
./board/amcc/common/flash.c:		info->flash_id = FLASH_MAN_MX;
./board/amcc/common/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/amcc/common/flash.c:		info->sector_count = 0;
./board/amcc/common/flash.c:		info->size = 0;
./board/amcc/common/flash.c:		info->flash_id += FLASH_AM320T;
./board/amcc/common/flash.c:		info->sector_count = 71;
./board/amcc/common/flash.c:		info->size = 0x00400000;  break;	/* => 4 MiB	*/
./board/amcc/common/flash.c:		info->flash_id += FLASH_AM320B;
./board/amcc/common/flash.c:		info->sector_count = 71;
./board/amcc/common/flash.c:		info->size = 0x00400000;  break;	/* => 4 MiB	*/
./board/amcc/common/flash.c:		info->flash_id += FLASH_STMW320DT;
./board/amcc/common/flash.c:		info->sector_count = 67;
./board/amcc/common/flash.c:		info->size = 0x00400000;  break;	/* => 4 MiB	*/
./board/amcc/common/flash.c:		info->flash_id += FLASH_MXLV320T;
./board/amcc/common/flash.c:		info->sector_count = 71;
./board/amcc/common/flash.c:		info->size = 0x00400000;
./board/amcc/common/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/amcc/common/flash.c:	if (((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) ||
./board/amcc/common/flash.c:	    ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM040) ||
./board/amcc/common/flash.c:	    ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMD016)) {
./board/amcc/common/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/amcc/common/flash.c:			info->start[i] = base + (i * 0x00010000);
./board/amcc/common/flash.c:	} else if ((info->flash_id & FLASH_TYPEMASK) == FLASH_STMW320DT) {
./board/amcc/common/flash.c:		base += info->size;
./board/amcc/common/flash.c:		i = info->sector_count;
./board/amcc/common/flash.c:		info->start[i] = base;
./board/amcc/common/flash.c:			info->start[i] = base;
./board/amcc/common/flash.c:		info->start[i] = base;
./board/amcc/common/flash.c:			info->start[i] = base;
./board/amcc/common/flash.c:	} else if ((info->flash_id & FLASH_TYPEMASK) == FLASH_MXLV320T) {
./board/amcc/common/flash.c:		i = info->sector_count - 1;
./board/amcc/common/flash.c:		info->start[i--] = base + info->size - 0x00002000;
./board/amcc/common/flash.c:		info->start[i--] = base + info->size - 0x00004000;
./board/amcc/common/flash.c:		info->start[i--] = base + info->size - 0x00006000;
./board/amcc/common/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/amcc/common/flash.c:		info->start[i--] = base + info->size - 0x0000a000;
./board/amcc/common/flash.c:		info->start[i--] = base + info->size - 0x0000c000;
./board/amcc/common/flash.c:		info->start[i--] = base + info->size - 0x0000e000;
./board/amcc/common/flash.c:		info->start[i--] = base + info->size - 0x00010000;
./board/amcc/common/flash.c:			info->start[i] = base + i * 0x00010000;
./board/amcc/common/flash.c:		if (info->flash_id & FLASH_BTYPE) {
./board/amcc/common/flash.c:			info->start[0] = base + 0x00000000;
./board/amcc/common/flash.c:			info->start[1] = base + 0x00002000;
./board/amcc/common/flash.c:			info->start[2] = base + 0x00004000;
./board/amcc/common/flash.c:			info->start[3] = base + 0x00006000;
./board/amcc/common/flash.c:			info->start[4] = base + 0x00008000;
./board/amcc/common/flash.c:			info->start[5] = base + 0x0000a000;
./board/amcc/common/flash.c:			info->start[6] = base + 0x0000c000;
./board/amcc/common/flash.c:			info->start[7] = base + 0x0000e000;
./board/amcc/common/flash.c:			for (i = 8; i < info->sector_count; i++) {
./board/amcc/common/flash.c:				info->start[i] =
./board/amcc/common/flash.c:			i = info->sector_count - 1;
./board/amcc/common/flash.c:			info->start[i--] = base + info->size - 0x00002000;
./board/amcc/common/flash.c:			info->start[i--] = base + info->size - 0x00004000;
./board/amcc/common/flash.c:			info->start[i--] = base + info->size - 0x00006000;
./board/amcc/common/flash.c:			info->start[i--] = base + info->size - 0x00008000;
./board/amcc/common/flash.c:			info->start[i--] = base + info->size - 0x0000a000;
./board/amcc/common/flash.c:			info->start[i--] = base + info->size - 0x0000c000;
./board/amcc/common/flash.c:			info->start[i--] = base + info->size - 0x0000e000;
./board/amcc/common/flash.c:				info->start[i] = base + i * 0x00010000;
./board/amcc/common/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/amcc/common/flash.c:		addr2 = (volatile CONFIG_SYS_FLASH_WORD_SIZE *)(info->start[i]);
./board/amcc/common/flash.c:		if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST)
./board/amcc/common/flash.c:			info->protect[i] = 0;
./board/amcc/common/flash.c:			info->protect[i] = addr2[2] & 1;
./board/amcc/common/flash.c:	return (info->size);
./board/amcc/common/flash.c:	    (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[sect]);
./board/amcc/common/flash.c:	volatile CONFIG_SYS_FLASH_WORD_SIZE *addr = (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[0]);
./board/amcc/common/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/amcc/common/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/amcc/common/flash.c:		if (info->protect[sect]) {
./board/amcc/common/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/amcc/common/flash.c:			addr2 = (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[sect]);
./board/amcc/common/flash.c:			if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) {
./board/amcc/common/flash.c:	addr = (CONFIG_SYS_FLASH_WORD_SIZE *) info->start[0];
./board/amcc/common/flash.c:	volatile CONFIG_SYS_FLASH_WORD_SIZE *addr2 = (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[0]);
./board/amcc/taihu/flash.c:	if (((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) ||
./board/amcc/taihu/flash.c:	    (info->flash_id == FLASH_AM040)) {
./board/amcc/taihu/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/amcc/taihu/flash.c:			info->start[i] = base + (i * 0x00010000);
./board/amcc/taihu/flash.c:	} else if ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMLV128U) {
./board/amcc/taihu/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/amcc/taihu/flash.c:			info->start[i] = base + (i * 0x00010000*2);
./board/amcc/taihu/flash.c:	} else if ((info->flash_id & FLASH_TYPEMASK) == FLASH_S29GL128N ) {
./board/amcc/taihu/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/amcc/taihu/flash.c:			info->start[i] = base + (i * 0x00020000*2);
./board/amcc/taihu/flash.c:		if (info->flash_id & FLASH_BTYPE) {
./board/amcc/taihu/flash.c:			info->start[0] = base + 0x00000000;
./board/amcc/taihu/flash.c:			info->start[1] = base + 0x00004000;
./board/amcc/taihu/flash.c:			info->start[2] = base + 0x00006000;
./board/amcc/taihu/flash.c:			info->start[3] = base + 0x00008000;
./board/amcc/taihu/flash.c:			for (i = 4; i < info->sector_count; i++) {
./board/amcc/taihu/flash.c:				info->start[i] =
./board/amcc/taihu/flash.c:			i = info->sector_count - 1;
./board/amcc/taihu/flash.c:			info->start[i--] = base + info->size - 0x00004000;
./board/amcc/taihu/flash.c:			info->start[i--] = base + info->size - 0x00006000;
./board/amcc/taihu/flash.c:			info->start[i--] = base + info->size - 0x00008000;
./board/amcc/taihu/flash.c:				info->start[i] = base + i * 0x00010000;
./board/amcc/taihu/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/amcc/taihu/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/amcc/taihu/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/amcc/taihu/flash.c:	       info->size >> 10, info->sector_count);
./board/amcc/taihu/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/amcc/taihu/flash.c:		if (i != (info->sector_count - 1))
./board/amcc/taihu/flash.c:			size = info->start[i + 1] - info->start[i];
./board/amcc/taihu/flash.c:			size = info->start[0] + info->size - info->start[i];
./board/amcc/taihu/flash.c:		flash = (volatile unsigned long *)info->start[i];
./board/amcc/taihu/flash.c:		       info->start[i],
./board/amcc/taihu/flash.c:		       erased ? " E" : "  ", info->protect[i] ? "RO " : "   ");
./board/amcc/taihu/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/amcc/taihu/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/amcc/taihu/flash.c:		info->flash_id = FLASH_MAN_SST;
./board/amcc/taihu/flash.c:		info->flash_id = FLASH_MAN_STM;
./board/amcc/taihu/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/amcc/taihu/flash.c:		info->sector_count = 0;
./board/amcc/taihu/flash.c:		info->size = 0;
./board/amcc/taihu/flash.c:		info->flash_id += FLASH_AM040;
./board/amcc/taihu/flash.c:		info->sector_count = 8;
./board/amcc/taihu/flash.c:		info->size = 0x0080000;	/* => 512 ko */
./board/amcc/taihu/flash.c:		info->flash_id += FLASH_AM040;
./board/amcc/taihu/flash.c:		info->sector_count = 8;
./board/amcc/taihu/flash.c:		info->size = 0x0080000;	/* => 512 ko */
./board/amcc/taihu/flash.c:		info->flash_id += FLASH_AM040;
./board/amcc/taihu/flash.c:		info->sector_count = 8;
./board/amcc/taihu/flash.c:		info->size = 0x0080000;	/* => 512 ko */
./board/amcc/taihu/flash.c:		info->flash_id += FLASH_AMD016;
./board/amcc/taihu/flash.c:		info->sector_count = 32;
./board/amcc/taihu/flash.c:		info->size = 0x00200000;
./board/amcc/taihu/flash.c:		info->flash_id += FLASH_AMDLV033C;
./board/amcc/taihu/flash.c:		info->sector_count = 64;
./board/amcc/taihu/flash.c:		info->size = 0x00400000;
./board/amcc/taihu/flash.c:		info->flash_id += FLASH_AM400T;
./board/amcc/taihu/flash.c:		info->sector_count = 11;
./board/amcc/taihu/flash.c:		info->size = 0x00080000;
./board/amcc/taihu/flash.c:		info->flash_id += FLASH_AM400B;
./board/amcc/taihu/flash.c:		info->sector_count = 11;
./board/amcc/taihu/flash.c:		info->size = 0x00080000;
./board/amcc/taihu/flash.c:		info->flash_id += FLASH_AM800T;
./board/amcc/taihu/flash.c:		info->sector_count = 19;
./board/amcc/taihu/flash.c:		info->size = 0x00100000;
./board/amcc/taihu/flash.c:		info->flash_id += FLASH_AM800B;
./board/amcc/taihu/flash.c:		info->sector_count = 19;
./board/amcc/taihu/flash.c:		info->size = 0x00100000;
./board/amcc/taihu/flash.c:		info->flash_id += FLASH_AM160T;
./board/amcc/taihu/flash.c:		info->sector_count = 35;
./board/amcc/taihu/flash.c:		info->size = 0x00200000;
./board/amcc/taihu/flash.c:		info->flash_id += FLASH_AM160B;
./board/amcc/taihu/flash.c:		info->sector_count = 35;
./board/amcc/taihu/flash.c:		info->size = 0x00200000;
./board/amcc/taihu/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/amcc/taihu/flash.c:	if (((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) ||
./board/amcc/taihu/flash.c:	    ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM040) ||
./board/amcc/taihu/flash.c:	    ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMD016)) {
./board/amcc/taihu/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/amcc/taihu/flash.c:			info->start[i] = base + (i * 0x00010000);
./board/amcc/taihu/flash.c:	else if ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMLV128U) {
./board/amcc/taihu/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/amcc/taihu/flash.c:			info->start[i] = base + (i * 0x00010000 * 2);
./board/amcc/taihu/flash.c:		if (info->flash_id & FLASH_BTYPE) {
./board/amcc/taihu/flash.c:			info->start[0] = base + 0x00000000;
./board/amcc/taihu/flash.c:			info->start[1] = base + 0x00004000;
./board/amcc/taihu/flash.c:			info->start[2] = base + 0x00006000;
./board/amcc/taihu/flash.c:			info->start[3] = base + 0x00008000;
./board/amcc/taihu/flash.c:			for (i = 4; i < info->sector_count; i++) {
./board/amcc/taihu/flash.c:				info->start[i] =
./board/amcc/taihu/flash.c:			i = info->sector_count - 1;
./board/amcc/taihu/flash.c:			info->start[i--] = base + info->size - 0x00004000;
./board/amcc/taihu/flash.c:			info->start[i--] = base + info->size - 0x00006000;
./board/amcc/taihu/flash.c:			info->start[i--] = base + info->size - 0x00008000;
./board/amcc/taihu/flash.c:				info->start[i] = base + i * 0x00010000;
./board/amcc/taihu/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/amcc/taihu/flash.c:		addr2 = (volatile CONFIG_SYS_FLASH_WORD_SIZE *)(info->start[i]);
./board/amcc/taihu/flash.c:		if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST)
./board/amcc/taihu/flash.c:			info->protect[i] = 0;
./board/amcc/taihu/flash.c:			info->protect[i] = addr2[2] & 1;
./board/amcc/taihu/flash.c:	return info->size;
./board/amcc/taihu/flash.c:	    (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[sect]);
./board/amcc/taihu/flash.c:	if (((info->flash_id & FLASH_TYPEMASK) == FLASH_AM320B) ||
./board/amcc/taihu/flash.c:	    ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM320T) ||
./board/amcc/taihu/flash.c:	    ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMLV128U) ||
./board/amcc/taihu/flash.c:	    ((info->flash_id & FLASH_TYPEMASK) == FLASH_S29GL128N) ||
./board/amcc/taihu/flash.c:	    ((info->flash_id & FLASH_TYPEMASK) == FLASH_STMW320DT)) {
./board/amcc/taihu/flash.c:	volatile CONFIG_SYS_FLASH_WORD_SIZE *addr = (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[0]);
./board/amcc/taihu/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/amcc/taihu/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/amcc/taihu/flash.c:		if (info->protect[sect]) {
./board/amcc/taihu/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/amcc/taihu/flash.c:			addr2 = (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[sect]);
./board/amcc/taihu/flash.c:			if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) {
./board/amcc/taihu/flash.c:	addr = (CONFIG_SYS_FLASH_WORD_SIZE *) info->start[0];
./board/amcc/taihu/flash.c:	if (((info->flash_id & FLASH_TYPEMASK) == FLASH_AM320B) ||
./board/amcc/taihu/flash.c:	    ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM320T) ||
./board/amcc/taihu/flash.c:	    ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMLV128U) ||
./board/amcc/taihu/flash.c:	    ((info->flash_id & FLASH_TYPEMASK) == FLASH_S29GL128N) ||
./board/amcc/taihu/flash.c:	    ((info->flash_id & FLASH_TYPEMASK) == FLASH_STMW320DT)) {
./board/amcc/taihu/flash.c:	volatile CONFIG_SYS_FLASH_WORD_SIZE *addr2 = (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[0]);
./board/amcc/taihu/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/amcc/taihu/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/amcc/taihu/flash.c:		info->flash_id = FLASH_MAN_SST;
./board/amcc/taihu/flash.c:		info->flash_id = FLASH_MAN_STM;
./board/amcc/taihu/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/amcc/taihu/flash.c:		info->sector_count = 0;
./board/amcc/taihu/flash.c:		info->size = 0;
./board/amcc/taihu/flash.c:		info->flash_id += FLASH_AM040;
./board/amcc/taihu/flash.c:		info->sector_count = 8;
./board/amcc/taihu/flash.c:		info->size = 0x0080000;	/* => 512 ko */
./board/amcc/taihu/flash.c:		info->flash_id += FLASH_AM040;
./board/amcc/taihu/flash.c:		info->sector_count = 8;
./board/amcc/taihu/flash.c:		info->size = 0x0080000;	/* => 512 ko */
./board/amcc/taihu/flash.c:		info->flash_id += FLASH_AM040;
./board/amcc/taihu/flash.c:		info->sector_count = 8;
./board/amcc/taihu/flash.c:		info->size = 0x0080000;	/* => 512 ko */
./board/amcc/taihu/flash.c:		info->flash_id += FLASH_AMD016;
./board/amcc/taihu/flash.c:		info->sector_count = 32;
./board/amcc/taihu/flash.c:		info->size = 0x00200000;
./board/amcc/taihu/flash.c:		info->flash_id += FLASH_AMDLV033C;
./board/amcc/taihu/flash.c:		info->sector_count = 64;
./board/amcc/taihu/flash.c:		info->size = 0x00400000;
./board/amcc/taihu/flash.c:		info->flash_id += FLASH_AM400T;
./board/amcc/taihu/flash.c:		info->sector_count = 11;
./board/amcc/taihu/flash.c:		info->size = 0x00080000;
./board/amcc/taihu/flash.c:		info->flash_id += FLASH_AM400B;
./board/amcc/taihu/flash.c:		info->sector_count = 11;
./board/amcc/taihu/flash.c:		info->size = 0x00080000;
./board/amcc/taihu/flash.c:		info->flash_id += FLASH_AM800T;
./board/amcc/taihu/flash.c:		info->sector_count = 19;
./board/amcc/taihu/flash.c:		info->size = 0x00100000;
./board/amcc/taihu/flash.c:		info->flash_id += FLASH_AM800B;
./board/amcc/taihu/flash.c:		info->sector_count = 19;
./board/amcc/taihu/flash.c:		info->size = 0x00100000;
./board/amcc/taihu/flash.c:		info->flash_id += FLASH_AM160T;
./board/amcc/taihu/flash.c:		info->sector_count = 35;
./board/amcc/taihu/flash.c:		info->size = 0x00200000;
./board/amcc/taihu/flash.c:		info->flash_id += FLASH_AM160B;
./board/amcc/taihu/flash.c:		info->sector_count = 35;
./board/amcc/taihu/flash.c:		info->size = 0x00200000;
./board/amcc/taihu/flash.c:			info->flash_id += FLASH_AMLV128U;
./board/amcc/taihu/flash.c:			info->sector_count = 256;
./board/amcc/taihu/flash.c:			info->size = 0x01000000;
./board/amcc/taihu/flash.c:			info->flash_id += FLASH_S29GL128N;
./board/amcc/taihu/flash.c:			info->sector_count = 128;
./board/amcc/taihu/flash.c:			info->size = 0x01000000;
./board/amcc/taihu/flash.c:			info->flash_id = FLASH_UNKNOWN;
./board/amcc/taihu/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/amcc/taihu/flash.c:	if (((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) ||
./board/amcc/taihu/flash.c:	    ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM040) ||
./board/amcc/taihu/flash.c:	    ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMD016)) {
./board/amcc/taihu/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/amcc/taihu/flash.c:			info->start[i] = base + (i * 0x00010000);
./board/amcc/taihu/flash.c:	} else if ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMLV128U) {
./board/amcc/taihu/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/amcc/taihu/flash.c:			info->start[i] = base + (i * 0x00010000);
./board/amcc/taihu/flash.c:	} else if ((info->flash_id & FLASH_TYPEMASK) == FLASH_S29GL128N ) {
./board/amcc/taihu/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/amcc/taihu/flash.c:			info->start[i] = base + (i * 0x00020000);
./board/amcc/taihu/flash.c:		if (info->flash_id & FLASH_BTYPE) {
./board/amcc/taihu/flash.c:			info->start[0] = base + 0x00000000;
./board/amcc/taihu/flash.c:			info->start[1] = base + 0x00004000;
./board/amcc/taihu/flash.c:			info->start[2] = base + 0x00006000;
./board/amcc/taihu/flash.c:			info->start[3] = base + 0x00008000;
./board/amcc/taihu/flash.c:			for (i = 4; i < info->sector_count; i++) {
./board/amcc/taihu/flash.c:				info->start[i] =
./board/amcc/taihu/flash.c:			i = info->sector_count - 1;
./board/amcc/taihu/flash.c:			info->start[i--] = base + info->size - 0x00004000;
./board/amcc/taihu/flash.c:			info->start[i--] = base + info->size - 0x00006000;
./board/amcc/taihu/flash.c:			info->start[i--] = base + info->size - 0x00008000;
./board/amcc/taihu/flash.c:				info->start[i] = base + i * 0x00010000;
./board/amcc/taihu/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/amcc/taihu/flash.c:		addr2 = (volatile CONFIG_SYS_FLASH_WORD_SIZE *)(info->start[i]);
./board/amcc/taihu/flash.c:		if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST)
./board/amcc/taihu/flash.c:			info->protect[i] = 0;
./board/amcc/taihu/flash.c:			info->protect[i] = (CONFIG_SYS_FLASH_CHAR_SIZE)addr2[4] & 1;
./board/amcc/taihu/flash.c:	return info->size;
./board/amcc/taihu/flash.c:	    (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[sect]);
./board/amcc/taihu/flash.c:	volatile CONFIG_SYS_FLASH_WORD_SIZE *addr = (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[0]);
./board/amcc/taihu/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/amcc/taihu/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/amcc/taihu/flash.c:		if (info->protect[sect]) {
./board/amcc/taihu/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/amcc/taihu/flash.c:			addr2 = (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[sect]);
./board/amcc/taihu/flash.c:			if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) {
./board/amcc/taihu/flash.c:	addr = (CONFIG_SYS_FLASH_WORD_SIZE *) info->start[0];
./board/amcc/taihu/flash.c:	volatile CONFIG_SYS_FLASH_WORD_SIZE *addr2 = (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[0]);
./board/amcc/bubinga/flash.c:	if (((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) ||
./board/amcc/bubinga/flash.c:	    (info->flash_id == FLASH_AM040)) {
./board/amcc/bubinga/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/amcc/bubinga/flash.c:			info->start[i] = base + (i * 0x00010000);
./board/amcc/bubinga/flash.c:		if (info->flash_id & FLASH_BTYPE) {
./board/amcc/bubinga/flash.c:			info->start[0] = base + 0x00000000;
./board/amcc/bubinga/flash.c:			info->start[1] = base + 0x00004000;
./board/amcc/bubinga/flash.c:			info->start[2] = base + 0x00006000;
./board/amcc/bubinga/flash.c:			info->start[3] = base + 0x00008000;
./board/amcc/bubinga/flash.c:			for (i = 4; i < info->sector_count; i++) {
./board/amcc/bubinga/flash.c:				info->start[i] =
./board/amcc/bubinga/flash.c:			i = info->sector_count - 1;
./board/amcc/bubinga/flash.c:			info->start[i--] = base + info->size - 0x00004000;
./board/amcc/bubinga/flash.c:			info->start[i--] = base + info->size - 0x00006000;
./board/amcc/bubinga/flash.c:			info->start[i--] = base + info->size - 0x00008000;
./board/amcc/bubinga/flash.c:				info->start[i] = base + i * 0x00010000;
./board/amcc/yucca/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/amcc/yucca/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/amcc/yucca/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/amcc/yucca/flash.c:			info->size >> 10, info->sector_count);
./board/amcc/yucca/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/amcc/yucca/flash.c:		if (i != (info->sector_count - 1))
./board/amcc/yucca/flash.c:			size = info->start[i + 1] - info->start[i];
./board/amcc/yucca/flash.c:			size = info->start[0] + info->size - info->start[i];
./board/amcc/yucca/flash.c:		flash = (volatile unsigned long *)info->start[i];
./board/amcc/yucca/flash.c:				info->start[i],
./board/amcc/yucca/flash.c:				info->protect[i] ? "RO " : "   ");
./board/amcc/yucca/flash.c:			info->flash_id = FLASH_MAN_AMD;
./board/amcc/yucca/flash.c:			info->flash_id = FLASH_MAN_FUJ;
./board/amcc/yucca/flash.c:			info->flash_id = FLASH_MAN_SST;
./board/amcc/yucca/flash.c:			info->flash_id = FLASH_MAN_STM;
./board/amcc/yucca/flash.c:			info->flash_id = FLASH_UNKNOWN;
./board/amcc/yucca/flash.c:			info->sector_count = 0;
./board/amcc/yucca/flash.c:			info->size = 0;
./board/amcc/yucca/flash.c:			info->flash_id += FLASH_AM040;
./board/amcc/yucca/flash.c:			info->sector_count = 8;
./board/amcc/yucca/flash.c:			info->size = 0x0080000;	/* => 512 ko */
./board/amcc/yucca/flash.c:			info->flash_id += FLASH_AM040;
./board/amcc/yucca/flash.c:			info->sector_count = 8;
./board/amcc/yucca/flash.c:			info->size = 0x0080000;	/* => 512 ko */
./board/amcc/yucca/flash.c:			info->flash_id += FLASH_AM040;
./board/amcc/yucca/flash.c:			info->sector_count = 8;
./board/amcc/yucca/flash.c:			info->size = 0x0080000;	/* => 512 ko */
./board/amcc/yucca/flash.c:			info->flash_id += FLASH_AMD016;
./board/amcc/yucca/flash.c:			info->sector_count = 32;
./board/amcc/yucca/flash.c:			info->size = 0x00200000;
./board/amcc/yucca/flash.c:			info->flash_id += FLASH_AMDLV033C;
./board/amcc/yucca/flash.c:			info->sector_count = 64;
./board/amcc/yucca/flash.c:			info->size = 0x00400000;
./board/amcc/yucca/flash.c:			info->flash_id += FLASH_AM400T;
./board/amcc/yucca/flash.c:			info->sector_count = 11;
./board/amcc/yucca/flash.c:			info->size = 0x00080000;
./board/amcc/yucca/flash.c:			info->flash_id += FLASH_AM400B;
./board/amcc/yucca/flash.c:			info->sector_count = 11;
./board/amcc/yucca/flash.c:			info->size = 0x00080000;
./board/amcc/yucca/flash.c:			info->flash_id += FLASH_AM800T;
./board/amcc/yucca/flash.c:			info->sector_count = 19;
./board/amcc/yucca/flash.c:			info->size = 0x00100000;
./board/amcc/yucca/flash.c:			info->flash_id += FLASH_AM800B;
./board/amcc/yucca/flash.c:			info->sector_count = 19;
./board/amcc/yucca/flash.c:			info->size = 0x00100000;
./board/amcc/yucca/flash.c:			info->flash_id += FLASH_AM160T;
./board/amcc/yucca/flash.c:			info->sector_count = 35;
./board/amcc/yucca/flash.c:			info->size = 0x00200000;
./board/amcc/yucca/flash.c:			info->flash_id += FLASH_AM160B;
./board/amcc/yucca/flash.c:			info->sector_count = 35;
./board/amcc/yucca/flash.c:			info->size = 0x00200000;
./board/amcc/yucca/flash.c:			info->flash_id = FLASH_UNKNOWN;
./board/amcc/yucca/flash.c:	if (((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) ||
./board/amcc/yucca/flash.c:			((info->flash_id & FLASH_TYPEMASK) == FLASH_AM040) ||
./board/amcc/yucca/flash.c:			((info->flash_id & FLASH_TYPEMASK) == FLASH_AMD016)) {
./board/amcc/yucca/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/amcc/yucca/flash.c:			info->start[i] = base + (i * 0x00010000);
./board/amcc/yucca/flash.c:		if (info->flash_id & FLASH_BTYPE) {
./board/amcc/yucca/flash.c:			info->start[0] = base + 0x00000000;
./board/amcc/yucca/flash.c:			info->start[1] = base + 0x00004000;
./board/amcc/yucca/flash.c:			info->start[2] = base + 0x00006000;
./board/amcc/yucca/flash.c:			info->start[3] = base + 0x00008000;
./board/amcc/yucca/flash.c:			for (i = 4; i < info->sector_count; i++) {
./board/amcc/yucca/flash.c:				info->start[i] =
./board/amcc/yucca/flash.c:			i = info->sector_count - 1;
./board/amcc/yucca/flash.c:			info->start[i--] = base + info->size - 0x00004000;
./board/amcc/yucca/flash.c:			info->start[i--] = base + info->size - 0x00006000;
./board/amcc/yucca/flash.c:			info->start[i--] = base + info->size - 0x00008000;
./board/amcc/yucca/flash.c:				info->start[i] = base + i * 0x00010000;
./board/amcc/yucca/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/amcc/yucca/flash.c:		addr2 = (volatile CONFIG_SYS_FLASH_WORD_SIZE *)(info->start[i]);
./board/amcc/yucca/flash.c:		if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST)
./board/amcc/yucca/flash.c:			info->protect[i] = 0;
./board/amcc/yucca/flash.c:			info->protect[i] = addr2[2] & 1;
./board/amcc/yucca/flash.c:	return (info->size);
./board/amcc/yucca/flash.c:		(CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[sect]);
./board/amcc/yucca/flash.c:	if (((info->flash_id & FLASH_TYPEMASK) == FLASH_AM320B) ||
./board/amcc/yucca/flash.c:			((info->flash_id & FLASH_TYPEMASK) == FLASH_AM320T) ||
./board/amcc/yucca/flash.c:			((info->flash_id & FLASH_TYPEMASK) == FLASH_STMW320DT) ||
./board/amcc/yucca/flash.c:			((info->flash_id & FLASH_TYPEMASK) == FLASH_MXLV320T)) {
./board/amcc/yucca/flash.c:	volatile CONFIG_SYS_FLASH_WORD_SIZE *addr = (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[0]);
./board/amcc/yucca/flash.c:		if (info->flash_id == FLASH_UNKNOWN)
./board/amcc/yucca/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/amcc/yucca/flash.c:		if (info->protect[sect])
./board/amcc/yucca/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/amcc/yucca/flash.c:			addr2 = (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[sect]);
./board/amcc/yucca/flash.c:			if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) {
./board/amcc/yucca/flash.c:	addr = (CONFIG_SYS_FLASH_WORD_SIZE *) info->start[0];
./board/amcc/yucca/flash.c:	if (((info->flash_id & FLASH_TYPEMASK) == FLASH_AM320B) ||
./board/amcc/yucca/flash.c:			((info->flash_id & FLASH_TYPEMASK) == FLASH_AM320T) ||
./board/amcc/yucca/flash.c:			((info->flash_id & FLASH_TYPEMASK) == FLASH_STMW320DT) ||
./board/amcc/yucca/flash.c:			((info->flash_id & FLASH_TYPEMASK) == FLASH_MXLV320T)) {
./board/amcc/yucca/flash.c:	volatile CONFIG_SYS_FLASH_WORD_SIZE *addr2 = (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[0]);
./board/amcc/yucca/flash.c:			info->flash_id = FLASH_MAN_AMD;
./board/amcc/yucca/flash.c:			info->flash_id = FLASH_MAN_FUJ;
./board/amcc/yucca/flash.c:			info->flash_id = FLASH_MAN_SST;
./board/amcc/yucca/flash.c:			info->flash_id = FLASH_MAN_STM;
./board/amcc/yucca/flash.c:			info->flash_id = FLASH_MAN_MX;
./board/amcc/yucca/flash.c:			info->flash_id = FLASH_UNKNOWN;
./board/amcc/yucca/flash.c:			info->sector_count = 0;
./board/amcc/yucca/flash.c:			info->size = 0;
./board/amcc/yucca/flash.c:			info->flash_id += FLASH_AM320T;
./board/amcc/yucca/flash.c:			info->sector_count = 71;
./board/amcc/yucca/flash.c:			info->size = 0x00400000;
./board/amcc/yucca/flash.c:			info->flash_id += FLASH_AM320B;
./board/amcc/yucca/flash.c:			info->sector_count = 71;
./board/amcc/yucca/flash.c:			info->size = 0x00400000;
./board/amcc/yucca/flash.c:			info->flash_id += FLASH_STMW320DT;
./board/amcc/yucca/flash.c:			info->sector_count = 67;
./board/amcc/yucca/flash.c:			info->size = 0x00400000;
./board/amcc/yucca/flash.c:			info->flash_id += FLASH_MXLV320T;
./board/amcc/yucca/flash.c:			info->sector_count = 71;
./board/amcc/yucca/flash.c:			info->size = 0x00400000;
./board/amcc/yucca/flash.c:			info->flash_id = FLASH_UNKNOWN;
./board/amcc/yucca/flash.c:	if (((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) ||
./board/amcc/yucca/flash.c:			((info->flash_id & FLASH_TYPEMASK) == FLASH_AM040) ||
./board/amcc/yucca/flash.c:			((info->flash_id & FLASH_TYPEMASK) == FLASH_AMD016)) {
./board/amcc/yucca/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/amcc/yucca/flash.c:			info->start[i] = base + (i * 0x00010000);
./board/amcc/yucca/flash.c:	} else if ((info->flash_id & FLASH_TYPEMASK) == FLASH_STMW320DT) {
./board/amcc/yucca/flash.c:		base += info->size;
./board/amcc/yucca/flash.c:		i = info->sector_count;
./board/amcc/yucca/flash.c:		info->start[i] = base;
./board/amcc/yucca/flash.c:			info->start[i] = base;
./board/amcc/yucca/flash.c:		info->start[i] = base;
./board/amcc/yucca/flash.c:			info->start[i] = base;
./board/amcc/yucca/flash.c:	} else if ((info->flash_id & FLASH_TYPEMASK) == FLASH_MXLV320T) {
./board/amcc/yucca/flash.c:		i = info->sector_count - 1;
./board/amcc/yucca/flash.c:		info->start[i--] = base + info->size - 0x00002000;
./board/amcc/yucca/flash.c:		info->start[i--] = base + info->size - 0x00004000;
./board/amcc/yucca/flash.c:		info->start[i--] = base + info->size - 0x00006000;
./board/amcc/yucca/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/amcc/yucca/flash.c:		info->start[i--] = base + info->size - 0x0000a000;
./board/amcc/yucca/flash.c:		info->start[i--] = base + info->size - 0x0000c000;
./board/amcc/yucca/flash.c:		info->start[i--] = base + info->size - 0x0000e000;
./board/amcc/yucca/flash.c:		info->start[i--] = base + info->size - 0x00010000;
./board/amcc/yucca/flash.c:			info->start[i] = base + i * 0x00010000;
./board/amcc/yucca/flash.c:		if (info->flash_id & FLASH_BTYPE) {
./board/amcc/yucca/flash.c:			info->start[0] = base + 0x00000000;
./board/amcc/yucca/flash.c:			info->start[1] = base + 0x00004000;
./board/amcc/yucca/flash.c:			info->start[2] = base + 0x00006000;
./board/amcc/yucca/flash.c:			info->start[3] = base + 0x00008000;
./board/amcc/yucca/flash.c:			for (i = 4; i < info->sector_count; i++)
./board/amcc/yucca/flash.c:				info->start[i] = base + (i * 0x00010000) - 0x00030000;
./board/amcc/yucca/flash.c:			i = info->sector_count - 1;
./board/amcc/yucca/flash.c:			info->start[i--] = base + info->size - 0x00004000;
./board/amcc/yucca/flash.c:			info->start[i--] = base + info->size - 0x00006000;
./board/amcc/yucca/flash.c:			info->start[i--] = base + info->size - 0x00008000;
./board/amcc/yucca/flash.c:				info->start[i] = base + i * 0x00010000;
./board/amcc/yucca/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/amcc/yucca/flash.c:		addr2 = (volatile CONFIG_SYS_FLASH_WORD_SIZE *)(info->start[i]);
./board/amcc/yucca/flash.c:		if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST)
./board/amcc/yucca/flash.c:			info->protect[i] = 0;
./board/amcc/yucca/flash.c:			info->protect[i] = addr2[2] & 1;
./board/amcc/yucca/flash.c:	return (info->size);
./board/amcc/yucca/flash.c:		(CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[sect]);
./board/amcc/yucca/flash.c:	volatile CONFIG_SYS_FLASH_WORD_SIZE *addr = (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[0]);
./board/amcc/yucca/flash.c:		if (info->flash_id == FLASH_UNKNOWN)
./board/amcc/yucca/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/amcc/yucca/flash.c:		if (info->protect[sect])
./board/amcc/yucca/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/amcc/yucca/flash.c:			addr2 = (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[sect]);
./board/amcc/yucca/flash.c:			if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) {
./board/amcc/yucca/flash.c:	addr = (CONFIG_SYS_FLASH_WORD_SIZE *) info->start[0];
./board/amcc/yucca/flash.c:	volatile CONFIG_SYS_FLASH_WORD_SIZE *addr2 = (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[0]);
./board/xsengine/flash.c:	if (info->flash_id == FLASH_UNKNOWN) return;
./board/xsengine/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_AMD) {
./board/xsengine/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/xsengine/flash.c:			info->start[i] = base + (i * PHYS_FLASH_SECT_SIZE);
./board/xsengine/flash.c:			info->protect[i] = 0;
./board/xsengine/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/xsengine/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/xsengine/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/xsengine/flash.c:		info->size >> 20, info->sector_count);
./board/xsengine/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/xsengine/flash.c:			info->start[i],
./board/xsengine/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/xsengine/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/xsengine/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/xsengine/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/xsengine/flash.c:		info->sector_count = 0;
./board/xsengine/flash.c:		info->size = 0;
./board/xsengine/flash.c:				info->flash_id = FLASH_UNKNOWN;
./board/xsengine/flash.c:				info->flash_id += FLASH_AMLV640U;
./board/xsengine/flash.c:				info->sector_count = 128;
./board/xsengine/flash.c:				info->size = 0x01000000;
./board/xsengine/flash.c:				info->flash_id = FLASH_UNKNOWN;
./board/xsengine/flash.c:				info->flash_id += FLASH_S29GL064M;
./board/xsengine/flash.c:				info->sector_count = 128;
./board/xsengine/flash.c:				info->size = 0x01000000;
./board/xsengine/flash.c:			info->flash_id = FLASH_UNKNOWN;
./board/xsengine/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/xsengine/flash.c:		switch (info->flash_id & FLASH_TYPEMASK) {
./board/xsengine/flash.c:			for (i = 0; i < info->sector_count; i++) {
./board/xsengine/flash.c:				info->start[i] = base;
./board/xsengine/flash.c:			for (i = 0; i < info->sector_count; i++) {
./board/xsengine/flash.c:				info->start[i] = base;
./board/xsengine/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/xsengine/flash.c:		addr = (volatile unsigned long *)(info->start[i]);
./board/xsengine/flash.c:		info->protect[i] = addr[2] & 1;
./board/xsengine/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/xsengine/flash.c:		addr = (volatile unsigned long *)info->start[0];
./board/xsengine/flash.c:	return (info->size);
./board/xsengine/flash.c:	vu_long *addr = (vu_long*)(info->start[0]);
./board/xsengine/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/xsengine/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/xsengine/flash.c:	    (info->flash_id > FLASH_AMD_COMP)) {
./board/xsengine/flash.c:			info->flash_id);
./board/xsengine/flash.c:		if (info->protect[sect]) {
./board/xsengine/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/xsengine/flash.c:			addr = (vu_long*)(info->start[sect]);
./board/xsengine/flash.c:	addr = (vu_long*)(info->start[l_sect]);
./board/xsengine/flash.c:	addr = (volatile unsigned long *)info->start[0];
./board/xsengine/flash.c:	vu_long *addr = (vu_long*)(info->start[0]);
./board/RPXlite/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/RPXlite/flash.c:		info->start[0] = base + 0x00000000;
./board/RPXlite/flash.c:		info->start[1] = base + 0x00010000;
./board/RPXlite/flash.c:		info->start[2] = base + 0x00018000;
./board/RPXlite/flash.c:		info->start[3] = base + 0x00020000;
./board/RPXlite/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/RPXlite/flash.c:			info->start[i] = base + ((i-3) * 0x00040000) ;
./board/RPXlite/flash.c:		i = info->sector_count - 1;
./board/RPXlite/flash.c:		info->start[i--] = base + info->size - 0x00010000;
./board/RPXlite/flash.c:		info->start[i--] = base + info->size - 0x00018000;
./board/RPXlite/flash.c:		info->start[i--] = base + info->size - 0x00020000;
./board/RPXlite/flash.c:			info->start[i] = base + i * 0x00040000;
./board/RPXlite/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/RPXlite/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/RPXlite/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/RPXlite/flash.c:		info->size >> 20, info->sector_count);
./board/RPXlite/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/RPXlite/flash.c:			info->start[i],
./board/RPXlite/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/RPXlite/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/RPXlite/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/RPXlite/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/RPXlite/flash.c:		info->sector_count = 0;
./board/RPXlite/flash.c:		info->size = 0;
./board/RPXlite/flash.c:		info->flash_id += FLASH_AM400T;
./board/RPXlite/flash.c:		info->sector_count = 11;
./board/RPXlite/flash.c:		info->size = 0x00100000;
./board/RPXlite/flash.c:		info->flash_id += FLASH_AM400B;
./board/RPXlite/flash.c:		info->sector_count = 11;
./board/RPXlite/flash.c:		info->size = 0x00100000;
./board/RPXlite/flash.c:		info->flash_id += FLASH_AM800T;
./board/RPXlite/flash.c:		info->sector_count = 19;
./board/RPXlite/flash.c:		info->size = 0x00200000;
./board/RPXlite/flash.c:		info->flash_id += FLASH_AM800B;
./board/RPXlite/flash.c:		info->sector_count = 19;
./board/RPXlite/flash.c:		info->size = 0x00400000;	/*%%% Size doubled by yooth */
./board/RPXlite/flash.c:		info->flash_id += FLASH_AM160T;
./board/RPXlite/flash.c:		info->sector_count = 35;
./board/RPXlite/flash.c:		info->size = 0x00400000;
./board/RPXlite/flash.c:		info->flash_id += FLASH_AM160B;
./board/RPXlite/flash.c:		info->sector_count = 35;
./board/RPXlite/flash.c:		info->size = 0x00400000;
./board/RPXlite/flash.c:		info->flash_id += FLASH_AM320T;
./board/RPXlite/flash.c:		info->sector_count = 67;
./board/RPXlite/flash.c:		info->size = 0x00800000;
./board/RPXlite/flash.c:		info->flash_id += FLASH_AM320B;
./board/RPXlite/flash.c:		info->sector_count = 67;
./board/RPXlite/flash.c:		info->size = 0x00800000;
./board/RPXlite/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/RPXlite/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/RPXlite/flash.c:		info->start[0] = base + 0x00000000;
./board/RPXlite/flash.c:		info->start[1] = base + 0x00010000;
./board/RPXlite/flash.c:		info->start[2] = base + 0x00018000;
./board/RPXlite/flash.c:		info->start[3] = base + 0x00020000;
./board/RPXlite/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/RPXlite/flash.c:			info->start[i] = base + ((i-3) * 0x00040000) ;
./board/RPXlite/flash.c:		i = info->sector_count - 1;
./board/RPXlite/flash.c:		info->start[i--] = base + info->size - 0x00010000;
./board/RPXlite/flash.c:		info->start[i--] = base + info->size - 0x00018000;
./board/RPXlite/flash.c:		info->start[i--] = base + info->size - 0x00020000;
./board/RPXlite/flash.c:			info->start[i] = base + i * 0x00040000;
./board/RPXlite/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/RPXlite/flash.c:		addr = (volatile unsigned long *)(info->start[i]);
./board/RPXlite/flash.c:		info->protect[i] = addr[4] & 1 ;
./board/RPXlite/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/RPXlite/flash.c:		addr = (volatile unsigned long *)info->start[0];
./board/RPXlite/flash.c:	return (info->size);
./board/RPXlite/flash.c:	vu_long *addr = (vu_long*)(info->start[0]);
./board/RPXlite/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/RPXlite/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/RPXlite/flash.c:	    (info->flash_id > FLASH_AMD_COMP)) {
./board/RPXlite/flash.c:			info->flash_id);
./board/RPXlite/flash.c:		if (info->protect[sect]) {
./board/RPXlite/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/RPXlite/flash.c:			addr = (vu_long *)(info->start[sect]) ;
./board/RPXlite/flash.c:	addr = (vu_long *)(info->start[l_sect]);
./board/RPXlite/flash.c:	addr = (vu_long *)info->start[0];
./board/RPXlite/flash.c:	vu_long *addr = (vu_long *)(info->start[0]);
./board/funkwerk/vovpn-gw/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/funkwerk/vovpn-gw/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/funkwerk/vovpn-gw/flash.c:		info->sector_count = 0;
./board/funkwerk/vovpn-gw/flash.c:		info->size = 0;
./board/funkwerk/vovpn-gw/flash.c:		info->flash_id += FLASH_28F320J3A;
./board/funkwerk/vovpn-gw/flash.c:		info->sector_count = 32;
./board/funkwerk/vovpn-gw/flash.c:		info->size = 0x00400000;
./board/funkwerk/vovpn-gw/flash.c:		info->flash_id += FLASH_28F640J3A;
./board/funkwerk/vovpn-gw/flash.c:		info->sector_count = 64;
./board/funkwerk/vovpn-gw/flash.c:		info->size = 0x00800000;
./board/funkwerk/vovpn-gw/flash.c:		info->flash_id += FLASH_28F128J3A;
./board/funkwerk/vovpn-gw/flash.c:		info->sector_count = 128;
./board/funkwerk/vovpn-gw/flash.c:		info->size = 0x01000000;
./board/funkwerk/vovpn-gw/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/funkwerk/vovpn-gw/flash.c:		info->sector_count = 0;
./board/funkwerk/vovpn-gw/flash.c:		info->size = 0;
./board/funkwerk/vovpn-gw/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/funkwerk/vovpn-gw/flash.c:		info->start[i] = (unsigned long)addr + (i * info->size/info->sector_count);
./board/funkwerk/vovpn-gw/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/funkwerk/vovpn-gw/flash.c:		p = (volatile FLASH_WORD_SIZE *)(info->start[i]);
./board/funkwerk/vovpn-gw/flash.c:		info->protect[i] = p[2 << FLASH_CMD_ADDR_SHIFT] & 1;
./board/funkwerk/vovpn-gw/flash.c:	return (info->size);
./board/funkwerk/vovpn-gw/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/funkwerk/vovpn-gw/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/funkwerk/vovpn-gw/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/funkwerk/vovpn-gw/flash.c:		info->size >> 20, info->sector_count);
./board/funkwerk/vovpn-gw/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/funkwerk/vovpn-gw/flash.c:			info->start[i],
./board/funkwerk/vovpn-gw/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/funkwerk/vovpn-gw/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/funkwerk/vovpn-gw/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/funkwerk/vovpn-gw/flash.c:		if (info->protect[sect]) {
./board/funkwerk/vovpn-gw/flash.c:		if (info->protect[sect]) {
./board/funkwerk/vovpn-gw/flash.c:		addr = (volatile FLASH_WORD_SIZE *)(info->start[sect]);
./board/funkwerk/vovpn-gw/flash.c:		printf("Erase sector %d at start addr 0x%08X", sect, (unsigned int)info->start[sect]);
./board/funkwerk/vovpn-gw/flash.c:				printf("Flash erase timeout at address %lx\n", info->start[sect]);
./board/funkwerk/vovpn-gw/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/funkwerk/vovpn-gw/flash.c:	addr = (volatile FLASH_WORD_SIZE *)(info->start[0]);
./board/funkwerk/vovpn-gw/flash.c:	addr = (volatile FLASH_WORD_SIZE *)(info->start[sector]);
./board/funkwerk/vovpn-gw/flash.c:			printf("Flash protect timeout at address %lx\n",  info->start[sector]);
./board/funkwerk/vovpn-gw/flash.c:	info->protect[sector] = prot;
./board/dave/PPChameleonEVB/nand.c:	struct nand_chip *this = mtdinfo->priv;
./board/dave/common/flash.c:	if (((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) ||
./board/dave/common/flash.c:	    ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM640U)) {
./board/dave/common/flash.c:	    for (i = 0; i < info->sector_count; i++)
./board/dave/common/flash.c:		info->start[i] = base + (i * 0x00010000);
./board/dave/common/flash.c:	} else if (((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL322B) ||
./board/dave/common/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL323B) ||
./board/dave/common/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM320B) ||
./board/dave/common/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL324B)) {
./board/dave/common/flash.c:			info->start[i] = base;
./board/dave/common/flash.c:		while (i < info->sector_count) {	/* 64k regular sectors	*/
./board/dave/common/flash.c:			info->start[i] = base;
./board/dave/common/flash.c:	} else if (((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL322T) ||
./board/dave/common/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL323T) ||
./board/dave/common/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM320T) ||
./board/dave/common/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL324T)) {
./board/dave/common/flash.c:		base += info->size;
./board/dave/common/flash.c:		i = info->sector_count;
./board/dave/common/flash.c:			info->start[i] = base;
./board/dave/common/flash.c:			info->start[i] = base;
./board/dave/common/flash.c:	    if (info->flash_id & FLASH_BTYPE) {
./board/dave/common/flash.c:		info->start[0] = base + 0x00000000;
./board/dave/common/flash.c:		info->start[1] = base + 0x00004000;
./board/dave/common/flash.c:		info->start[2] = base + 0x00006000;
./board/dave/common/flash.c:		info->start[3] = base + 0x00008000;
./board/dave/common/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/dave/common/flash.c:			info->start[i] = base + (i * 0x00010000) - 0x00030000;
./board/dave/common/flash.c:		i = info->sector_count - 1;
./board/dave/common/flash.c:		info->start[i--] = base + info->size - 0x00004000;
./board/dave/common/flash.c:		info->start[i--] = base + info->size - 0x00006000;
./board/dave/common/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/dave/common/flash.c:			info->start[i] = base + i * 0x00010000;
./board/dave/common/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/dave/common/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/dave/common/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/dave/common/flash.c:		info->size >> 20, info->sector_count);
./board/dave/common/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/dave/common/flash.c:		if (i != (info->sector_count-1))
./board/dave/common/flash.c:		  size = info->start[i+1] - info->start[i];
./board/dave/common/flash.c:		  size = info->start[0] + info->size - info->start[i];
./board/dave/common/flash.c:		flash = (volatile unsigned long *)info->start[i];
./board/dave/common/flash.c:			info->start[i],
./board/dave/common/flash.c:			info->protect[i] ? "RO " : "   ");
./board/dave/common/flash.c:			info->start[i],
./board/dave/common/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/dave/common/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/dave/common/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/dave/common/flash.c:		info->flash_id = FLASH_MAN_SST;
./board/dave/common/flash.c:		info->flash_id = FLASH_MAN_STM;
./board/dave/common/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/dave/common/flash.c:		info->sector_count = 0;
./board/dave/common/flash.c:		info->size = 0;
./board/dave/common/flash.c:		info->flash_id += FLASH_AM400T;
./board/dave/common/flash.c:		info->sector_count = 11;
./board/dave/common/flash.c:		info->size = 0x00080000;
./board/dave/common/flash.c:		info->flash_id += FLASH_AM400B;
./board/dave/common/flash.c:		info->sector_count = 11;
./board/dave/common/flash.c:		info->size = 0x00080000;
./board/dave/common/flash.c:		info->flash_id += FLASH_AM800T;
./board/dave/common/flash.c:		info->sector_count = 19;
./board/dave/common/flash.c:		info->size = 0x00100000;
./board/dave/common/flash.c:		info->flash_id += FLASH_AM800B;
./board/dave/common/flash.c:		info->sector_count = 19;
./board/dave/common/flash.c:		info->size = 0x00100000;
./board/dave/common/flash.c:		info->flash_id += FLASH_AM160T;
./board/dave/common/flash.c:		info->sector_count = 35;
./board/dave/common/flash.c:		info->size = 0x00200000;
./board/dave/common/flash.c:		info->flash_id += FLASH_AM160B;
./board/dave/common/flash.c:		info->sector_count = 35;
./board/dave/common/flash.c:		info->size = 0x00200000;
./board/dave/common/flash.c:		info->flash_id += FLASH_STMW320DT;
./board/dave/common/flash.c:		info->sector_count = 67;
./board/dave/common/flash.c:		info->size = 0x00400000;  break;	/* => 4 MB	*/
./board/dave/common/flash.c:		info->flash_id += FLASH_AM320T;
./board/dave/common/flash.c:		info->sector_count = 71;
./board/dave/common/flash.c:		info->size = 0x00400000;  break;	/* => 4 MB	*/
./board/dave/common/flash.c:		info->flash_id += FLASH_AM320B;
./board/dave/common/flash.c:		info->sector_count = 71;
./board/dave/common/flash.c:		info->size = 0x00400000;  break;	/* => 4 MB	*/
./board/dave/common/flash.c:		info->flash_id += FLASH_AMDL322T;
./board/dave/common/flash.c:		info->sector_count = 71;
./board/dave/common/flash.c:		info->size = 0x00400000;  break;	/* => 4 MB	*/
./board/dave/common/flash.c:		info->flash_id += FLASH_AMDL322B;
./board/dave/common/flash.c:		info->sector_count = 71;
./board/dave/common/flash.c:		info->size = 0x00400000;  break;	/* => 4 MB	*/
./board/dave/common/flash.c:		info->flash_id += FLASH_AMDL323T;
./board/dave/common/flash.c:		info->sector_count = 71;
./board/dave/common/flash.c:		info->size = 0x00400000;  break;	/* => 4 MB	*/
./board/dave/common/flash.c:		info->flash_id += FLASH_AMDL323B;
./board/dave/common/flash.c:		info->sector_count = 71;
./board/dave/common/flash.c:		info->size = 0x00400000;  break;	/* => 4 MB	*/
./board/dave/common/flash.c:		info->flash_id += FLASH_AM640U;
./board/dave/common/flash.c:		info->sector_count = 128;
./board/dave/common/flash.c:		info->size = 0x00800000;  break;	/* => 8 MB	*/
./board/dave/common/flash.c:		info->flash_id += FLASH_SST800A;
./board/dave/common/flash.c:		info->sector_count = 16;
./board/dave/common/flash.c:		info->size = 0x00100000;
./board/dave/common/flash.c:		info->flash_id += FLASH_SST160A;
./board/dave/common/flash.c:		info->sector_count = 32;
./board/dave/common/flash.c:		info->size = 0x00200000;
./board/dave/common/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/dave/common/flash.c:	if (((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) ||
./board/dave/common/flash.c:	    ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM640U)) {
./board/dave/common/flash.c:	    for (i = 0; i < info->sector_count; i++)
./board/dave/common/flash.c:		info->start[i] = base + (i * 0x00010000);
./board/dave/common/flash.c:	} else if (((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL322B) ||
./board/dave/common/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL323B) ||
./board/dave/common/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM320B) ||
./board/dave/common/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL324B)) {
./board/dave/common/flash.c:			info->start[i] = base;
./board/dave/common/flash.c:		while (i < info->sector_count) {	/* 64k regular sectors	*/
./board/dave/common/flash.c:			info->start[i] = base;
./board/dave/common/flash.c:	} else if (((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL322T) ||
./board/dave/common/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL323T) ||
./board/dave/common/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM320T) ||
./board/dave/common/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL324T)) {
./board/dave/common/flash.c:		base += info->size;
./board/dave/common/flash.c:		i = info->sector_count;
./board/dave/common/flash.c:			info->start[i] = base;
./board/dave/common/flash.c:			info->start[i] = base;
./board/dave/common/flash.c:	} else if ((info->flash_id & FLASH_TYPEMASK) == FLASH_STMW320DT) {
./board/dave/common/flash.c:		base += info->size;
./board/dave/common/flash.c:		i = info->sector_count;
./board/dave/common/flash.c:		info->start[i] = base;
./board/dave/common/flash.c:			info->start[i] = base;
./board/dave/common/flash.c:		info->start[i] = base;
./board/dave/common/flash.c:			info->start[i] = base;
./board/dave/common/flash.c:	    if (info->flash_id & FLASH_BTYPE) {
./board/dave/common/flash.c:		info->start[0] = base + 0x00000000;
./board/dave/common/flash.c:		info->start[1] = base + 0x00004000;
./board/dave/common/flash.c:		info->start[2] = base + 0x00006000;
./board/dave/common/flash.c:		info->start[3] = base + 0x00008000;
./board/dave/common/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/dave/common/flash.c:			info->start[i] = base + (i * 0x00010000) - 0x00030000;
./board/dave/common/flash.c:		i = info->sector_count - 1;
./board/dave/common/flash.c:		info->start[i--] = base + info->size - 0x00004000;
./board/dave/common/flash.c:		info->start[i--] = base + info->size - 0x00006000;
./board/dave/common/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/dave/common/flash.c:			info->start[i] = base + i * 0x00010000;
./board/dave/common/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/dave/common/flash.c:		addr2 = (volatile CONFIG_SYS_FLASH_WORD_SIZE *)(info->start[i]);
./board/dave/common/flash.c:		if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST)
./board/dave/common/flash.c:		  info->protect[i] = 0;
./board/dave/common/flash.c:		  info->protect[i] = addr2[CONFIG_SYS_FLASH_READ2] & 1;
./board/dave/common/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/dave/common/flash.c:		addr2 = (CONFIG_SYS_FLASH_WORD_SIZE *)info->start[0];
./board/dave/common/flash.c:	return (info->size);
./board/dave/common/flash.c:	volatile CONFIG_SYS_FLASH_WORD_SIZE *addr = (CONFIG_SYS_FLASH_WORD_SIZE *)(info->start[0]);
./board/dave/common/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/dave/common/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/dave/common/flash.c:		if (info->protect[sect]) {
./board/dave/common/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/dave/common/flash.c:		    addr2 = (CONFIG_SYS_FLASH_WORD_SIZE *)(info->start[sect]);
./board/dave/common/flash.c:		    if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) {
./board/dave/common/flash.c:	addr = (CONFIG_SYS_FLASH_WORD_SIZE *)(info->start[l_sect]);
./board/dave/common/flash.c:	addr = (CONFIG_SYS_FLASH_WORD_SIZE *)info->start[0];
./board/dave/common/flash.c:	volatile CONFIG_SYS_FLASH_WORD_SIZE *addr2 = (CONFIG_SYS_FLASH_WORD_SIZE *)(info->start[0]);
./board/pm520/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/pm520/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/pm520/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/pm520/flash.c:			info->start[i] = base + (i * PHYS_FLASH_SECT_SIZE);
./board/pm520/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/pm520/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/pm520/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/pm520/flash.c:			info->size >> 20, info->sector_count);
./board/pm520/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/pm520/flash.c:			info->start[i],
./board/pm520/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/pm520/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/pm520/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/pm520/flash.c:		info->sector_count = 0;
./board/pm520/flash.c:		info->size = 0;
./board/pm520/flash.c:		info->flash_id += FLASH_28F256J3A;
./board/pm520/flash.c:		info->sector_count = 256 / 2;
./board/pm520/flash.c:		info->size =  0x04000000 / 2;
./board/pm520/flash.c:		info->start[0] = CONFIG_SYS_FLASH_BASE + 0x02000000;
./board/pm520/flash.c:		info->flash_id += FLASH_28F128J3A;
./board/pm520/flash.c:		info->sector_count = 128;
./board/pm520/flash.c:		info->size = 0x02000000;
./board/pm520/flash.c:		info->start[0] = CONFIG_SYS_FLASH_BASE + 0x02000000;
./board/pm520/flash.c:		info->flash_id += FLASH_28F640J3A;
./board/pm520/flash.c:		info->sector_count = 64;
./board/pm520/flash.c:		info->size = 0x01000000;
./board/pm520/flash.c:		info->start[0] = CONFIG_SYS_FLASH_BASE + 0x03000000;
./board/pm520/flash.c:		info->flash_id += FLASH_28F320J3A;
./board/pm520/flash.c:		info->sector_count = 32;
./board/pm520/flash.c:		info->size = 0x800000;
./board/pm520/flash.c:		info->start[0] = CONFIG_SYS_FLASH_BASE + 0x03800000;
./board/pm520/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/pm520/flash.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/pm520/flash.c:			info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/pm520/flash.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/pm520/flash.c:	return (info->size);
./board/pm520/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/pm520/flash.c:		for (i = 0; i < info->sector_count; ++i) {
./board/pm520/flash.c:			info->protect[i] = intel_sector_protected(info, i);
./board/pm520/flash.c:	addr = (FPWV *) info->start[sector];
./board/pm520/flash.c:	lock_conf_addr = (FPWV *) info->start[sector] + 2;
./board/pm520/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/pm520/flash.c:	type = (info->flash_id & FLASH_VENDMASK);
./board/pm520/flash.c:			info->flash_id);
./board/pm520/flash.c:		if (info->protect[sect]) {
./board/pm520/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/pm520/flash.c:			FPWV *addr = (FPWV *) (info->start[sect]);
./board/pm520/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/pm520/flash.c:	vu_long *addr = (vu_long *)(info->start[sector]);
./board/pm520/flash.c:		info->protect[sector] = prot;
./board/pm520/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/pm520/flash.c:			if (info->protect[i])
./board/pm520/flash.c:				addr = (vu_long *)(info->start[i]);
./board/iphase4539/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/iphase4539/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/iphase4539/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/iphase4539/flash.c:		info->flash_id += FLASH_AM033C;
./board/iphase4539/flash.c:		info->size = hwc_flash_size();
./board/iphase4539/flash.c:		if (info->size > CONFIG_SYS_MAX_FLASH_SIZE) {
./board/iphase4539/flash.c:			info->size = CONFIG_SYS_MAX_FLASH_SIZE;
./board/iphase4539/flash.c:		info->sector_count = info->size / 0x10000;
./board/iphase4539/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/iphase4539/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/iphase4539/flash.c:		value = in8(info->start[i] + 2);
./board/iphase4539/flash.c:		info->protect[i] = (value & 1) != 0;
./board/iphase4539/flash.c:	return (info->size);
./board/iphase4539/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/iphase4539/flash.c:		size = info->size / info->sector_count;
./board/iphase4539/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/iphase4539/flash.c:			info->start[i] = base + i * size;
./board/iphase4539/flash.c:	volatile u32 addr = info->start[0];
./board/iphase4539/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/iphase4539/flash.c:	if (info->flash_id == FLASH_UNKNOWN ||
./board/iphase4539/flash.c:	    info->flash_id > FLASH_AMD_COMP) {
./board/iphase4539/flash.c:			info->flash_id);
./board/iphase4539/flash.c:		if (info->protect[sect]) {
./board/iphase4539/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/iphase4539/flash.c:			addr = info->start[sect];
./board/iphase4539/flash.c:	addr = info->start[l_sect];
./board/iphase4539/flash.c:	flash_reset (info->start[0]);
./board/iphase4539/flash.c:	volatile u32 addr = info->start[0];
./board/iphase4539/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/iphase4539/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/iphase4539/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/iphase4539/flash.c:	if (info->size % 0x100000 == 0) {
./board/iphase4539/flash.c:			info->size / 0x100000, info->sector_count);
./board/iphase4539/flash.c:	else if (info->size % 0x400 == 0) {
./board/iphase4539/flash.c:			info->size / 0x400, info->sector_count);
./board/iphase4539/flash.c:			info->size, info->sector_count);
./board/iphase4539/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/iphase4539/flash.c:			info->start[i],
./board/iphase4539/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/Marvell/db64360/sdram_init.c:	    info->slot = 0;
./board/Marvell/db64360/sdram_init.c:	    info->banks = 1;
./board/Marvell/db64360/sdram_init.c:	    info->registered = 0;
./board/Marvell/db64360/sdram_init.c:		    info->drb_size = 16;*/ /* 16 - 256MBit, 32 - 512MBit */
./board/Marvell/db64360/sdram_init.c:/*	    info->tpar = 3;
./board/Marvell/db64360/sdram_init.c:	    info->tras_clocks = 5;
./board/Marvell/db64360/sdram_init.c:	    info->burst_len = 4;
./board/Marvell/db64360/sdram_init.c:/*	    info->ecc = 2;*/
./board/Marvell/db64360/sdram_init.c:	if (!info->numOfModuleBanks) {
./board/Marvell/db64360/sdram_init.c:	switch (info->RefreshInterval) {
./board/Marvell/db64360/sdram_init.c:	if (info->registeredAddrAndControlInputs == 1) {
./board/Marvell/db64360/sdram_init.c:	if (info->errorCheckType == 0x2) {
./board/Marvell/db64360/sdram_init.c:	switch (info->sdramWidth) {
./board/Marvell/db64360/sdram_init.c:	switch (info->memoryType) {
./board/Marvell/db64360/sdram_init.c:		switch (info->maxClSupported_DDR) {
./board/Marvell/db64360/sdram_init.c:				if (info->registeredAddrAndControlInputs == 1)	/* registerd DDR SDRAM? */
./board/Marvell/db64360/sdram_init.c:				if (info->registeredAddrAndControlInputs == 1)	/* registerd DDR SDRAM? */
./board/Marvell/db64360/sdram_init.c:				if (info->registeredAddrAndControlInputs == 1)	/* registerd DDR SDRAM? */
./board/Marvell/db64360/sdram_init.c:				if (info->registeredAddrAndControlInputs == 1) {	/* registerd DDR SDRAM? */
./board/Marvell/db64360/sdram_init.c:				if (info->registeredAddrAndControlInputs == 1)	/* registerd DDR SDRAM? */
./board/Marvell/db64360/sdram_init.c:				if (info->registeredAddrAndControlInputs == 1) {	/* registerd DDR SDRAM? */
./board/Marvell/db64360/sdram_init.c:				if (info->registeredAddrAndControlInputs == 1)	/* registerd DDR SDRAM? */
./board/Marvell/db64360/sdram_init.c:				if (info->registeredAddrAndControlInputs == 1) {	/* registerd DDR SDRAM? */
./board/Marvell/db64360/sdram_init.c:				info->maxClSupported_DDR);
./board/Marvell/db64360/sdram_init.c:	DP (printf ("drb_size (n*64Mbit): %d\n", info->drb_size));
./board/Marvell/db64360/sdram_init.c:		(1 << (info->numOfRowAddresses + info->numOfColAddresses));
./board/Marvell/db64360/sdram_init.c:	sdram_chip_size *= info->sdramWidth;
./board/Marvell/db64360/sdram_init.c:	if (info->registeredAddrAndControlInputs
./board/Marvell/db64360/sdram_init.c:	    || info->registeredDQMBinputs) {
./board/Marvell/db64360/sdram_init.c:		     info->registeredAddrAndControlInputs,
./board/Marvell/db64360/sdram_init.c:		     info->registeredDQMBinputs));
./board/Marvell/db64360/sdram_init.c:/*	for (i = info->slot * 2; i < ((info->slot * 2) + info->banks); i++) */
./board/Marvell/db64360/sdram_init.c:		i = info->slot;
./board/Marvell/db64360/mv_eth.c:	command_status = p_pkt_info->cmd_sts | ETH_ZERO_PADDING | ETH_GEN_CRC;
./board/Marvell/db64360/mv_eth.c:	if (p_pkt_info->byte_cnt <= 8) {
./board/Marvell/db64360/mv_eth.c:		eth_b_copy (p_pkt_info->buf_ptr, p_tx_desc_curr->buf_ptr,
./board/Marvell/db64360/mv_eth.c:			    p_pkt_info->byte_cnt);
./board/Marvell/db64360/mv_eth.c:		p_tx_desc_curr->buf_ptr = p_pkt_info->buf_ptr;
./board/Marvell/db64360/mv_eth.c:	p_tx_desc_curr->byte_cnt = p_pkt_info->byte_cnt;
./board/Marvell/db64360/mv_eth.c:	p_tx_desc_curr->return_info = p_pkt_info->return_info;
./board/Marvell/db64360/mv_eth.c:	if (p_pkt_info->cmd_sts & (ETH_TX_LAST_DESC)) {
./board/Marvell/db64360/mv_eth.c:	p_pkt_info->cmd_sts = command_status;
./board/Marvell/db64360/mv_eth.c:	p_pkt_info->return_info = p_tx_desc_used->return_info;
./board/Marvell/db64360/mv_eth.c:	p_pkt_info->byte_cnt = (p_rx_curr_desc->byte_cnt) - RX_BUF_OFFSET;
./board/Marvell/db64360/mv_eth.c:	p_pkt_info->cmd_sts = command_status;
./board/Marvell/db64360/mv_eth.c:	p_pkt_info->buf_ptr = (p_rx_curr_desc->buf_ptr) + RX_BUF_OFFSET;
./board/Marvell/db64360/mv_eth.c:	p_pkt_info->return_info = p_rx_curr_desc->return_info;
./board/Marvell/db64360/mv_eth.c:	p_pkt_info->l4i_chk = p_rx_curr_desc->buf_size;	/* IP fragment indicator */
./board/Marvell/db64360/mv_eth.c:	p_used_rx_desc->buf_ptr = p_pkt_info->buf_ptr;
./board/Marvell/db64360/mv_eth.c:	p_used_rx_desc->return_info = p_pkt_info->return_info;
./board/Marvell/db64360/mv_eth.c:	p_used_rx_desc->byte_cnt = p_pkt_info->byte_cnt;
./board/Marvell/db64460/sdram_init.c:	    info->slot = 0;
./board/Marvell/db64460/sdram_init.c:	    info->banks = 1;
./board/Marvell/db64460/sdram_init.c:	    info->registered = 0;
./board/Marvell/db64460/sdram_init.c:		    info->drb_size = 16;*/ /* 16 - 256MBit, 32 - 512MBit */
./board/Marvell/db64460/sdram_init.c:/*	    info->tpar = 3;
./board/Marvell/db64460/sdram_init.c:	    info->tras_clocks = 5;
./board/Marvell/db64460/sdram_init.c:	    info->burst_len = 4;
./board/Marvell/db64460/sdram_init.c:/*	    info->ecc = 2;*/
./board/Marvell/db64460/sdram_init.c:	if (!info->numOfModuleBanks) {
./board/Marvell/db64460/sdram_init.c:	switch (info->RefreshInterval) {
./board/Marvell/db64460/sdram_init.c:	if (info->registeredAddrAndControlInputs == 1) {
./board/Marvell/db64460/sdram_init.c:	if (info->errorCheckType == 0x2) {
./board/Marvell/db64460/sdram_init.c:	switch (info->sdramWidth) {
./board/Marvell/db64460/sdram_init.c:	switch (info->memoryType) {
./board/Marvell/db64460/sdram_init.c:		switch (info->maxClSupported_DDR) {
./board/Marvell/db64460/sdram_init.c:				if (info->registeredAddrAndControlInputs == 1)	/* registerd DDR SDRAM? */
./board/Marvell/db64460/sdram_init.c:				if (info->registeredAddrAndControlInputs == 1)	/* registerd DDR SDRAM? */
./board/Marvell/db64460/sdram_init.c:				if (info->registeredAddrAndControlInputs == 1)	/* registerd DDR SDRAM? */
./board/Marvell/db64460/sdram_init.c:				if (info->registeredAddrAndControlInputs == 1) {	/* registerd DDR SDRAM? */
./board/Marvell/db64460/sdram_init.c:				if (info->registeredAddrAndControlInputs == 1)	/* registerd DDR SDRAM? */
./board/Marvell/db64460/sdram_init.c:				if (info->registeredAddrAndControlInputs == 1) {	/* registerd DDR SDRAM? */
./board/Marvell/db64460/sdram_init.c:				if (info->registeredAddrAndControlInputs == 1)	/* registerd DDR SDRAM? */
./board/Marvell/db64460/sdram_init.c:				if (info->registeredAddrAndControlInputs == 1) {	/* registerd DDR SDRAM? */
./board/Marvell/db64460/sdram_init.c:				info->maxClSupported_DDR);
./board/Marvell/db64460/sdram_init.c:	DP (printf ("drb_size (n*64Mbit): %d\n", info->drb_size));
./board/Marvell/db64460/sdram_init.c:		(1 << (info->numOfRowAddresses + info->numOfColAddresses));
./board/Marvell/db64460/sdram_init.c:	sdram_chip_size *= info->sdramWidth;
./board/Marvell/db64460/sdram_init.c:	if (info->registeredAddrAndControlInputs
./board/Marvell/db64460/sdram_init.c:	    || info->registeredDQMBinputs) {
./board/Marvell/db64460/sdram_init.c:		     info->registeredAddrAndControlInputs,
./board/Marvell/db64460/sdram_init.c:		     info->registeredDQMBinputs));
./board/Marvell/db64460/sdram_init.c:/*      for (i = info->slot * 2; i < ((info->slot * 2) + info->banks); i++) */
./board/Marvell/db64460/sdram_init.c:		i = info->slot;
./board/Marvell/db64460/mv_eth.c:	command_status = p_pkt_info->cmd_sts | ETH_ZERO_PADDING | ETH_GEN_CRC;
./board/Marvell/db64460/mv_eth.c:	if (p_pkt_info->byte_cnt <= 8) {
./board/Marvell/db64460/mv_eth.c:		eth_b_copy (p_pkt_info->buf_ptr, p_tx_desc_curr->buf_ptr,
./board/Marvell/db64460/mv_eth.c:			    p_pkt_info->byte_cnt);
./board/Marvell/db64460/mv_eth.c:		p_tx_desc_curr->buf_ptr = p_pkt_info->buf_ptr;
./board/Marvell/db64460/mv_eth.c:	p_tx_desc_curr->byte_cnt = p_pkt_info->byte_cnt;
./board/Marvell/db64460/mv_eth.c:	p_tx_desc_curr->return_info = p_pkt_info->return_info;
./board/Marvell/db64460/mv_eth.c:	if (p_pkt_info->cmd_sts & (ETH_TX_LAST_DESC)) {
./board/Marvell/db64460/mv_eth.c:	p_pkt_info->cmd_sts = command_status;
./board/Marvell/db64460/mv_eth.c:	p_pkt_info->return_info = p_tx_desc_used->return_info;
./board/Marvell/db64460/mv_eth.c:	p_pkt_info->byte_cnt = (p_rx_curr_desc->byte_cnt) - RX_BUF_OFFSET;
./board/Marvell/db64460/mv_eth.c:	p_pkt_info->cmd_sts = command_status;
./board/Marvell/db64460/mv_eth.c:	p_pkt_info->buf_ptr = (p_rx_curr_desc->buf_ptr) + RX_BUF_OFFSET;
./board/Marvell/db64460/mv_eth.c:	p_pkt_info->return_info = p_rx_curr_desc->return_info;
./board/Marvell/db64460/mv_eth.c:	p_pkt_info->l4i_chk = p_rx_curr_desc->buf_size;	/* IP fragment indicator */
./board/Marvell/db64460/mv_eth.c:	p_used_rx_desc->buf_ptr = p_pkt_info->buf_ptr;
./board/Marvell/db64460/mv_eth.c:	p_used_rx_desc->return_info = p_pkt_info->return_info;
./board/Marvell/db64460/mv_eth.c:	p_used_rx_desc->byte_cnt = p_pkt_info->byte_cnt;
./board/Marvell/common/flash.c:	if (!info->sector_count)
./board/Marvell/common/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/Marvell/common/flash.c:		sector_size = info->size / info->sector_count;
./board/Marvell/common/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/Marvell/common/flash.c:			info->start[i] = base + (i * sector_size);
./board/Marvell/common/flash.c:		if (info->flash_id & FLASH_BTYPE) {
./board/Marvell/common/flash.c:			info->start[0] = base + 0x00000000;
./board/Marvell/common/flash.c:			info->start[1] = base + 0x00008000;
./board/Marvell/common/flash.c:			info->start[2] = base + 0x0000C000;
./board/Marvell/common/flash.c:			info->start[3] = base + 0x00010000;
./board/Marvell/common/flash.c:			for (i = 4; i < info->sector_count; i++) {
./board/Marvell/common/flash.c:				info->start[i] =
./board/Marvell/common/flash.c:			i = info->sector_count - 1;
./board/Marvell/common/flash.c:			info->start[i--] = base + info->size - 0x00008000;
./board/Marvell/common/flash.c:			info->start[i--] = base + info->size - 0x0000C000;
./board/Marvell/common/flash.c:			info->start[i--] = base + info->size - 0x00010000;
./board/Marvell/common/flash.c:				info->start[i] = base + i * 0x00020000;
./board/Marvell/common/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/Marvell/common/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/Marvell/common/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/Marvell/common/flash.c:	if ((info->size >> 20) > 0) {
./board/Marvell/common/flash.c:			info->size >> 20, info->sector_count);
./board/Marvell/common/flash.c:			info->size >> 10, info->sector_count);
./board/Marvell/common/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/Marvell/common/flash.c:			info->start[i], info->protect[i] ? " (RO)" : "     ");
./board/Marvell/common/flash.c:	info->portwidth = portwidth;
./board/Marvell/common/flash.c:			info->flash_id = FLASH_ROM + FLASH_MAN_UNKNOWN;
./board/Marvell/common/flash.c:			info->sector_count = 8;
./board/Marvell/common/flash.c:			info->size = 0x80000;
./board/Marvell/common/flash.c:			return info->size;
./board/Marvell/common/flash.c:			info->flash_id = FLASH_RAM + FLASH_MAN_UNKNOWN;
./board/Marvell/common/flash.c:			info->sector_count = 8;
./board/Marvell/common/flash.c:			info->size = 0x80000;
./board/Marvell/common/flash.c:			return info->size;
./board/Marvell/common/flash.c:		info->flash_id = FLASH_ROM + FLASH_MAN_UNKNOWN;
./board/Marvell/common/flash.c:		info->sector_count = 8;
./board/Marvell/common/flash.c:		info->size = 0x80000;
./board/Marvell/common/flash.c:		return info->size;
./board/Marvell/common/flash.c:		info->flash_id = FLASH_MAN_STM;
./board/Marvell/common/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/Marvell/common/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/Marvell/common/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/Marvell/common/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/Marvell/common/flash.c:		info->sector_count = 0;
./board/Marvell/common/flash.c:		info->size = 0;
./board/Marvell/common/flash.c:		info->flash_id += FLASH_AM400T;
./board/Marvell/common/flash.c:		info->sector_count = 11;
./board/Marvell/common/flash.c:		info->size = 0x00100000;
./board/Marvell/common/flash.c:		info->chipwidth = 1;
./board/Marvell/common/flash.c:		info->flash_id += FLASH_AM400B;
./board/Marvell/common/flash.c:		info->sector_count = 11;
./board/Marvell/common/flash.c:		info->size = 0x00100000;
./board/Marvell/common/flash.c:		info->chipwidth = 1;
./board/Marvell/common/flash.c:		info->flash_id += FLASH_AM800T;
./board/Marvell/common/flash.c:		info->sector_count = 19;
./board/Marvell/common/flash.c:		info->size = 0x00200000;
./board/Marvell/common/flash.c:		info->chipwidth = 1;
./board/Marvell/common/flash.c:		info->flash_id += FLASH_AM800B;
./board/Marvell/common/flash.c:		info->sector_count = 19;
./board/Marvell/common/flash.c:		info->size = 0x00200000;
./board/Marvell/common/flash.c:		info->chipwidth = 1;
./board/Marvell/common/flash.c:		info->flash_id += FLASH_AM160T;
./board/Marvell/common/flash.c:		info->sector_count = 35;
./board/Marvell/common/flash.c:		info->size = 0x00400000;
./board/Marvell/common/flash.c:		info->chipwidth = 1;
./board/Marvell/common/flash.c:		info->flash_id += FLASH_AM160B;
./board/Marvell/common/flash.c:		info->sector_count = 35;
./board/Marvell/common/flash.c:		info->size = 0x00400000;
./board/Marvell/common/flash.c:		info->chipwidth = 1;
./board/Marvell/common/flash.c:		info->flash_id += FLASH_AM320T;
./board/Marvell/common/flash.c:		info->sector_count = 67;
./board/Marvell/common/flash.c:		info->size = 0x00800000;
./board/Marvell/common/flash.c:		info->flash_id += FLASH_AM320B;
./board/Marvell/common/flash.c:		info->sector_count = 67;
./board/Marvell/common/flash.c:		info->size = 0x00800000;
./board/Marvell/common/flash.c:		info->flash_id += FLASH_AM040;
./board/Marvell/common/flash.c:		info->sector_count = 8;
./board/Marvell/common/flash.c:		info->size = 0x80000;
./board/Marvell/common/flash.c:		info->chipwidth = 1;
./board/Marvell/common/flash.c:		info->flash_id += FLASH_28F640J3A;
./board/Marvell/common/flash.c:		info->sector_count = 64;
./board/Marvell/common/flash.c:		info->size = 128 * 1024 * 64;	/* 128kbytes x 64 blocks */
./board/Marvell/common/flash.c:		info->chipwidth = 2;
./board/Marvell/common/flash.c:			info->size *= 2;	/* 2x16 */
./board/Marvell/common/flash.c:		info->flash_id += FLASH_28F128J3A;
./board/Marvell/common/flash.c:		info->sector_count = 128;
./board/Marvell/common/flash.c:		info->size = 128 * 1024 * 128;	/* 128kbytes x 128 blocks */
./board/Marvell/common/flash.c:		info->chipwidth = 2;
./board/Marvell/common/flash.c:			info->size *= 2;	/* 2x16 */
./board/Marvell/common/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/Marvell/common/flash.c:		info->chipwidth = 1;
./board/Marvell/common/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/Marvell/common/flash.c:		caddr = (volatile unsigned char *) (info->start[i]);
./board/Marvell/common/flash.c:		saddr = (volatile unsigned short *) (info->start[i]);
./board/Marvell/common/flash.c:		laddr = (volatile unsigned long *) (info->start[i]);
./board/Marvell/common/flash.c:			info->protect[i] = caddr[2] & 1;
./board/Marvell/common/flash.c:			info->protect[i] = saddr[2] & 1;
./board/Marvell/common/flash.c:			info->protect[i] = laddr[2] & 1;
./board/Marvell/common/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/Marvell/common/flash.c:		caddr = (volatile unsigned char *) info->start[0];
./board/Marvell/common/flash.c:	return (info->size);
./board/Marvell/common/flash.c:	volatile unsigned char *addr = (uchar *) (info->start[0]);
./board/Marvell/common/flash.c:	if (info->portwidth == 4)
./board/Marvell/common/flash.c:		if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/Marvell/common/flash.c:			if (info->chipwidth == 2) {
./board/Marvell/common/flash.c:					if (info->protect[sect])
./board/Marvell/common/flash.c:				flash_cmd (info->portwidth, addr, 0,
./board/Marvell/common/flash.c:				flash_cmd (info->portwidth, addr, 0,
./board/Marvell/common/flash.c:				flash_cmd (info->portwidth, addr, 0,
./board/Marvell/common/flash.c:					if (info->protect[sect] == 0) {	/* not protected */
./board/Marvell/common/flash.c:						flash_cmd (info->portwidth,
./board/Marvell/common/flash.c:							    char *) info->
./board/Marvell/common/flash.c:						flash_cmd (info->portwidth,
./board/Marvell/common/flash.c:							    char *) info->
./board/Marvell/common/flash.c:						flash_cmd (info->portwidth,
./board/Marvell/common/flash.c:							 long *) info->
./board/Marvell/common/flash.c:								printf ("Time out limit reached erasing sector at address %08lx\n", info->start[sect]);
./board/Marvell/common/flash.c:							flash_cmd (info->
./board/Marvell/common/flash.c:							flash_cmd (info->
./board/Marvell/common/flash.c:							     info->
./board/Marvell/common/flash.c:								printf ("Flash erasure error at address 0x%08lx\n", info->start[sect]);
./board/Marvell/common/flash.c:									(info->
./board/Marvell/common/flash.c:						flash_cmd (info->portwidth,
./board/Marvell/common/flash.c:				printf ("Error: Intel flash device is only %d-bits wide\n", info->chipwidth * 8);
./board/Marvell/common/flash.c:	if ((info->flash_id & FLASH_TYPEMASK) == FLASH_ROM)
./board/Marvell/common/flash.c:	if ((info->flash_id & FLASH_TYPEMASK) == FLASH_RAM) {	/* RAM just copy 0s to RAM */
./board/Marvell/common/flash.c:			int sector_size = info->size / info->sector_count;
./board/Marvell/common/flash.c:			addr = (uchar *) (info->start[sect]);
./board/Marvell/common/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/Marvell/common/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {	/* Intel works spezial */
./board/Marvell/common/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||	/* Flash is unknown to PPCBoot */
./board/Marvell/common/flash.c:	    (info->flash_id > FLASH_AMD_COMP)) {
./board/Marvell/common/flash.c:			info->flash_id);
./board/Marvell/common/flash.c:		if (info->protect[sect]) {
./board/Marvell/common/flash.c:	flash_cmd (info->portwidth, addr, 0x555, 0xAA);	/* start erase routine */
./board/Marvell/common/flash.c:	flash_cmd (info->portwidth, addr, 0x2AA, 0x55);
./board/Marvell/common/flash.c:	flash_cmd (info->portwidth, addr, 0x555, 0x80);
./board/Marvell/common/flash.c:	flash_cmd (info->portwidth, addr, 0x555, 0xAA);
./board/Marvell/common/flash.c:	flash_cmd (info->portwidth, addr, 0x2AA, 0x55);
./board/Marvell/common/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/Marvell/common/flash.c:			addr = (uchar *) (info->start[sect]);
./board/Marvell/common/flash.c:			flash_cmd (info->portwidth, addr, 0, 0x30);
./board/Marvell/common/flash.c:	addr = (volatile unsigned char *) (info->start[l_sect]);
./board/Marvell/common/flash.c:	addr = (volatile unsigned char *) info->start[0];
./board/Marvell/common/flash.c:	flash_cmd (info->portwidth, addr, 0, 0xf0);
./board/Marvell/common/flash.c:	flash_cmd (info->portwidth, addr, 0, 0xf0);
./board/Marvell/common/flash.c:/*	if(info->portwidth==4) return 1; */
./board/Marvell/common/flash.c:/*	if(info->portwidth==4) {
./board/Marvell/common/flash.c:	if ((info->flash_id & FLASH_TYPEMASK) == FLASH_ROM)
./board/Marvell/common/flash.c:	if ((info->flash_id & FLASH_TYPEMASK) == FLASH_RAM) {
./board/Marvell/common/flash.c:	volatile unsigned char *addr = (uchar *) (info->start[0]);
./board/Marvell/common/flash.c:	if (info->portwidth == 4)
./board/Marvell/common/flash.c:		if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/Marvell/common/flash.c:			if (info->chipwidth == 2) {
./board/Marvell/common/flash.c:				flash_cmd (info->portwidth, addr, 0,
./board/Marvell/common/flash.c:				flash_cmd (info->portwidth, addr, 0,
./board/Marvell/common/flash.c:				flash_cmd (info->portwidth, addr, 0,
./board/Marvell/common/flash.c:				flash_cmd (info->portwidth, (uchar *) dest, 0,
./board/Marvell/common/flash.c:				flash_cmd (info->portwidth, addr, 0,
./board/Marvell/common/flash.c:				while ((*(volatile unsigned long *) info->
./board/Marvell/common/flash.c:						flash_cmd (info->portwidth,
./board/Marvell/common/flash.c:					flash_cmd (info->portwidth, addr, 0,
./board/Marvell/common/flash.c:				flash_cmd (info->portwidth, addr, 0,
./board/Marvell/common/flash.c:					flash_cmd (info->portwidth, addr, 0,
./board/Marvell/common/flash.c:					flash_cmd (info->portwidth, addr, 0,
./board/Marvell/common/flash.c:				flash_cmd (info->portwidth, addr, 0,
./board/Marvell/common/flash.c:				printf ("Error: Intel flash device is only %d-bits wide\n", info->chipwidth * 8);
./board/Marvell/common/flash.c:	if ((info->flash_id & FLASH_TYPEMASK) == FLASH_ROM)
./board/Marvell/common/flash.c:	if ((info->flash_id & FLASH_TYPEMASK) == FLASH_RAM) {
./board/Marvell/common/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/Marvell/common/intel_flash.c:	addrw = (bank_addr_t) info->start[sect];
./board/Marvell/common/intel_flash.c:	saddrw = (bank_addr_t) info->start[sect];
./board/Marvell/common/intel_flash.c:	saddrw = (bank_addr_t) info->start[sect];
./board/Marvell/common/intel_flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/Marvell/common/intel_flash.c:		if (info->protect[sect]) {
./board/Marvell/common/intel_flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/Marvell/common/intel_flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/prodrive/p3mx/mv_eth.c:	command_status = p_pkt_info->cmd_sts | ETH_ZERO_PADDING | ETH_GEN_CRC;
./board/prodrive/p3mx/mv_eth.c:	if (p_pkt_info->byte_cnt <= 8) {
./board/prodrive/p3mx/mv_eth.c:		eth_b_copy (p_pkt_info->buf_ptr, p_tx_desc_curr->buf_ptr,
./board/prodrive/p3mx/mv_eth.c:			    p_pkt_info->byte_cnt);
./board/prodrive/p3mx/mv_eth.c:		p_tx_desc_curr->buf_ptr = p_pkt_info->buf_ptr;
./board/prodrive/p3mx/mv_eth.c:	p_tx_desc_curr->byte_cnt = p_pkt_info->byte_cnt;
./board/prodrive/p3mx/mv_eth.c:	p_tx_desc_curr->return_info = p_pkt_info->return_info;
./board/prodrive/p3mx/mv_eth.c:	if (p_pkt_info->cmd_sts & (ETH_TX_LAST_DESC)) {
./board/prodrive/p3mx/mv_eth.c:	p_pkt_info->cmd_sts = command_status;
./board/prodrive/p3mx/mv_eth.c:	p_pkt_info->return_info = p_tx_desc_used->return_info;
./board/prodrive/p3mx/mv_eth.c:	p_pkt_info->byte_cnt = (p_rx_curr_desc->byte_cnt) - RX_BUF_OFFSET;
./board/prodrive/p3mx/mv_eth.c:	p_pkt_info->cmd_sts = command_status;
./board/prodrive/p3mx/mv_eth.c:	p_pkt_info->buf_ptr = (p_rx_curr_desc->buf_ptr) + RX_BUF_OFFSET;
./board/prodrive/p3mx/mv_eth.c:	p_pkt_info->return_info = p_rx_curr_desc->return_info;
./board/prodrive/p3mx/mv_eth.c:	p_pkt_info->l4i_chk = p_rx_curr_desc->buf_size; /* IP fragment indicator */
./board/prodrive/p3mx/mv_eth.c:	p_used_rx_desc->buf_ptr = p_pkt_info->buf_ptr;
./board/prodrive/p3mx/mv_eth.c:	p_used_rx_desc->return_info = p_pkt_info->return_info;
./board/prodrive/p3mx/mv_eth.c:	p_used_rx_desc->byte_cnt = p_pkt_info->byte_cnt;
./board/prodrive/common/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/prodrive/common/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/prodrive/common/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/prodrive/common/flash.c:		info->size >> 20, info->sector_count);
./board/prodrive/common/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/prodrive/common/flash.c:		if (i != (info->sector_count-1))
./board/prodrive/common/flash.c:			size = info->start[i+1] - info->start[i];
./board/prodrive/common/flash.c:			size = info->start[0] + info->size - info->start[i];
./board/prodrive/common/flash.c:		flash = (volatile unsigned long *)info->start[i];
./board/prodrive/common/flash.c:			info->start[i],
./board/prodrive/common/flash.c:			info->protect[i] ? "RO " : "   ");
./board/prodrive/common/flash.c:			info->start[i],
./board/prodrive/common/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/prodrive/common/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/prodrive/common/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/prodrive/common/flash.c:		info->flash_id = FLASH_MAN_SST;
./board/prodrive/common/flash.c:		info->flash_id = FLASH_MAN_STM;
./board/prodrive/common/flash.c:		info->flash_id = FLASH_MAN_EXCEL;
./board/prodrive/common/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/prodrive/common/flash.c:		info->sector_count = 0;
./board/prodrive/common/flash.c:		info->size = 0;
./board/prodrive/common/flash.c:		info->flash_id += FLASH_AM400T;
./board/prodrive/common/flash.c:		info->sector_count = 11;
./board/prodrive/common/flash.c:		info->size = 0x00080000;
./board/prodrive/common/flash.c:		info->flash_id += FLASH_AM400B;
./board/prodrive/common/flash.c:		info->sector_count = 11;
./board/prodrive/common/flash.c:		info->size = 0x00080000;
./board/prodrive/common/flash.c:		info->flash_id += FLASH_AM800T;
./board/prodrive/common/flash.c:		info->sector_count = 19;
./board/prodrive/common/flash.c:		info->size = 0x00100000;
./board/prodrive/common/flash.c:		info->flash_id += FLASH_AM800B;
./board/prodrive/common/flash.c:		info->sector_count = 19;
./board/prodrive/common/flash.c:		info->size = 0x00100000;
./board/prodrive/common/flash.c:		info->flash_id += FLASH_AM160T;
./board/prodrive/common/flash.c:		info->sector_count = 35;
./board/prodrive/common/flash.c:		info->size = 0x00200000;
./board/prodrive/common/flash.c:		info->flash_id += FLASH_AM160B;
./board/prodrive/common/flash.c:		info->sector_count = 35;
./board/prodrive/common/flash.c:		info->size = 0x00200000;
./board/prodrive/common/flash.c:		info->flash_id += FLASH_AM320T;
./board/prodrive/common/flash.c:		info->sector_count = 71;
./board/prodrive/common/flash.c:		info->size = 0x00400000;  break;	/* => 4 MB	*/
./board/prodrive/common/flash.c:		info->flash_id += FLASH_AM320B;
./board/prodrive/common/flash.c:		info->sector_count = 71;
./board/prodrive/common/flash.c:		info->size = 0x00400000;  break;	/* => 4 MB	*/
./board/prodrive/common/flash.c:		info->flash_id += FLASH_AMDL322T;
./board/prodrive/common/flash.c:		info->sector_count = 71;
./board/prodrive/common/flash.c:		info->size = 0x00400000;  break;	/* => 4 MB	*/
./board/prodrive/common/flash.c:		info->flash_id += FLASH_AMDL322B;
./board/prodrive/common/flash.c:		info->sector_count = 71;
./board/prodrive/common/flash.c:		info->size = 0x00400000;  break;	/* => 4 MB	*/
./board/prodrive/common/flash.c:		info->flash_id += FLASH_AMDL323T;
./board/prodrive/common/flash.c:		info->sector_count = 71;
./board/prodrive/common/flash.c:		info->size = 0x00400000;  break;	/* => 4 MB	*/
./board/prodrive/common/flash.c:		info->flash_id += FLASH_AMDL323B;
./board/prodrive/common/flash.c:		info->sector_count = 71;
./board/prodrive/common/flash.c:		info->size = 0x00400000;  break;	/* => 4 MB	*/
./board/prodrive/common/flash.c:		info->flash_id += FLASH_SST020;
./board/prodrive/common/flash.c:		info->sector_count = 64;
./board/prodrive/common/flash.c:		info->size = 0x00040000;
./board/prodrive/common/flash.c:		info->flash_id += FLASH_SST040;
./board/prodrive/common/flash.c:		info->sector_count = 128;
./board/prodrive/common/flash.c:		info->size = 0x00080000;
./board/prodrive/common/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/prodrive/common/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) {
./board/prodrive/common/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/prodrive/common/flash.c:			info->start[i] = base + (i * 0x00001000);
./board/prodrive/common/flash.c:	} else if (((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL322B) ||
./board/prodrive/common/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL323B) ||
./board/prodrive/common/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM320B) ||
./board/prodrive/common/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL324B)) {
./board/prodrive/common/flash.c:			info->start[i] = base;
./board/prodrive/common/flash.c:		while (i < info->sector_count) {	/* 64k regular sectors	*/
./board/prodrive/common/flash.c:			info->start[i] = base;
./board/prodrive/common/flash.c:	} else if (((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL322T) ||
./board/prodrive/common/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL323T) ||
./board/prodrive/common/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM320T) ||
./board/prodrive/common/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL324T)) {
./board/prodrive/common/flash.c:		base += info->size;
./board/prodrive/common/flash.c:		i = info->sector_count;
./board/prodrive/common/flash.c:			info->start[i] = base;
./board/prodrive/common/flash.c:			info->start[i] = base;
./board/prodrive/common/flash.c:		if (info->flash_id & FLASH_BTYPE) {
./board/prodrive/common/flash.c:			info->start[0] = base + 0x00000000;
./board/prodrive/common/flash.c:			info->start[1] = base + 0x00004000;
./board/prodrive/common/flash.c:			info->start[2] = base + 0x00006000;
./board/prodrive/common/flash.c:			info->start[3] = base + 0x00008000;
./board/prodrive/common/flash.c:			for (i = 4; i < info->sector_count; i++) {
./board/prodrive/common/flash.c:				info->start[i] = base + (i * 0x00010000) - 0x00030000;
./board/prodrive/common/flash.c:			i = info->sector_count - 1;
./board/prodrive/common/flash.c:			info->start[i--] = base + info->size - 0x00004000;
./board/prodrive/common/flash.c:			info->start[i--] = base + info->size - 0x00006000;
./board/prodrive/common/flash.c:			info->start[i--] = base + info->size - 0x00008000;
./board/prodrive/common/flash.c:				info->start[i] = base + i * 0x00010000;
./board/prodrive/common/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/prodrive/common/flash.c:		addr2 = (volatile CONFIG_SYS_FLASH_WORD_SIZE *)(info->start[i]);
./board/prodrive/common/flash.c:		if ((info->flash_id & FLASH_VENDMASK) != FLASH_MAN_AMD)
./board/prodrive/common/flash.c:			info->protect[i] = 0;
./board/prodrive/common/flash.c:			info->protect[i] = addr2[CONFIG_SYS_FLASH_READ2] & 1;
./board/prodrive/common/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/prodrive/common/flash.c:		addr2 = (CONFIG_SYS_FLASH_WORD_SIZE *)info->start[0];
./board/prodrive/common/flash.c:	return (info->size);
./board/prodrive/common/flash.c:	volatile CONFIG_SYS_FLASH_WORD_SIZE *addr = (CONFIG_SYS_FLASH_WORD_SIZE *)(info->start[0]);
./board/prodrive/common/flash.c:		if (info->flash_id == FLASH_UNKNOWN)
./board/prodrive/common/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/prodrive/common/flash.c:		if (info->protect[sect])
./board/prodrive/common/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/prodrive/common/flash.c:			addr2 = (CONFIG_SYS_FLASH_WORD_SIZE *)(info->start[sect]);
./board/prodrive/common/flash.c:			if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) {
./board/prodrive/common/flash.c:	addr = (CONFIG_SYS_FLASH_WORD_SIZE *)(info->start[l_sect]);
./board/prodrive/common/flash.c:	addr = (CONFIG_SYS_FLASH_WORD_SIZE *)info->start[0];
./board/prodrive/common/flash.c:	volatile CONFIG_SYS_FLASH_WORD_SIZE *addr2 = (CONFIG_SYS_FLASH_WORD_SIZE *)(info->start[0]);
./board/eNET/eNET.c:		info->portwidth = FLASH_CFI_8BIT;
./board/eNET/eNET.c:		info->chipwidth = FLASH_CFI_BY8;
./board/eNET/eNET.c:		info->interface = FLASH_CFI_X8;
./board/ssv/common/flash.c:		info->size >> 10, info->sector_count);
./board/ssv/common/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/ssv/common/flash.c:		if (i != (info->sector_count - 1))
./board/ssv/common/flash.c:			size = info->start[i + 1] - info->start[i];
./board/ssv/common/flash.c:			size = info->start[0] + info->size - info->start[i];
./board/ssv/common/flash.c:		flash = (volatile unsigned char *) info->start[i];
./board/ssv/common/flash.c:		printf (" %08lX%s%s", info->start[i], erased ? " E" : "  ",
./board/ssv/common/flash.c:			info->protect[i] ? "RO " : "   ");
./board/ssv/common/flash.c:	volatile CONFIG_SYS_FLASH_WORD_SIZE *addr = (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[0]);
./board/ssv/common/flash.c:		if (info->protect[sect]) {
./board/ssv/common/flash.c:		printf("- Erase: Sect: %i @ 0x%08x\n", sect,  info->start[sect]);
./board/ssv/common/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/ssv/common/flash.c:			addr2 = (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[sect]);
./board/ssv/common/flash.c:	volatile CONFIG_SYS_FLASH_WORD_SIZE *cmd = (vu_short *) info->start[0];
./board/netstar/netstar.c:		info->portwidth = FLASH_CFI_16BIT;
./board/netstar/netstar.c:		info->chipwidth = FLASH_CFI_BY16;
./board/netstar/netstar.c:		info->interface = FLASH_CFI_X16;
./board/ivm/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/ivm/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/ivm/flash.c:	    if (info->flash_id & FLASH_BTYPE) {
./board/ivm/flash.c:		info->start[0] = base + 0x00000000;
./board/ivm/flash.c:		info->start[1] = base + 0x00004000;
./board/ivm/flash.c:		info->start[2] = base + 0x00006000;
./board/ivm/flash.c:		info->start[3] = base + 0x00008000;
./board/ivm/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/ivm/flash.c:			info->start[i] = base + ((i-3) * 0x00020000);
./board/ivm/flash.c:		i = info->sector_count - 1;
./board/ivm/flash.c:		info->start[i--] = base + info->size - 0x00004000;
./board/ivm/flash.c:		info->start[i--] = base + info->size - 0x00006000;
./board/ivm/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/ivm/flash.c:			info->start[i] = base + i * 0x00020000;
./board/ivm/flash.c:	    for (i = 0; i < info->sector_count; i++) {
./board/ivm/flash.c:		info->start[i] = base + (i * 0x00002000);
./board/ivm/flash.c:	    if (info->flash_id & FLASH_BTYPE) {
./board/ivm/flash.c:		info->start[0] = base + 0x00000000;
./board/ivm/flash.c:		info->start[1] = base + 0x00008000;
./board/ivm/flash.c:		info->start[2] = base + 0x0000C000;
./board/ivm/flash.c:		info->start[3] = base + 0x00010000;
./board/ivm/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/ivm/flash.c:			info->start[i] = base + (i * 0x00020000) - 0x00060000;
./board/ivm/flash.c:		i = info->sector_count - 1;
./board/ivm/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/ivm/flash.c:		info->start[i--] = base + info->size - 0x0000C000;
./board/ivm/flash.c:		info->start[i--] = base + info->size - 0x00010000;
./board/ivm/flash.c:			info->start[i] = base + i * 0x00020000;
./board/ivm/flash.c:		info->flash_id);
./board/ivm/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/ivm/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/ivm/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/ivm/flash.c:	if (info->size >= (1 << 20)) {
./board/ivm/flash.c:		info->size >> i,
./board/ivm/flash.c:		info->sector_count);
./board/ivm/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/ivm/flash.c:			info->start[i],
./board/ivm/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/ivm/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/ivm/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/ivm/flash.c:		info->flash_id = FLASH_MAN_SST;
./board/ivm/flash.c:		info->flash_id = FLASH_MAN_STM;
./board/ivm/flash.c:		info->flash_id = FLASH_MAN_MT;
./board/ivm/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/ivm/flash.c:		info->sector_count = 0;
./board/ivm/flash.c:		info->size = 0;
./board/ivm/flash.c:		info->flash_id += FLASH_AM400T;
./board/ivm/flash.c:		info->sector_count = 11;
./board/ivm/flash.c:		info->size = 0x00100000;
./board/ivm/flash.c:		info->flash_id += FLASH_AM400B;
./board/ivm/flash.c:		info->sector_count = 11;
./board/ivm/flash.c:		info->size = 0x00100000;
./board/ivm/flash.c:		info->flash_id += FLASH_AM800T;
./board/ivm/flash.c:		info->sector_count = 19;
./board/ivm/flash.c:		info->size = 0x00200000;
./board/ivm/flash.c:		info->flash_id += FLASH_AM800B;
./board/ivm/flash.c:		info->sector_count = 19;
./board/ivm/flash.c:		info->size = 0x00200000;
./board/ivm/flash.c:		info->flash_id += FLASH_AM160T;
./board/ivm/flash.c:		info->sector_count = 35;
./board/ivm/flash.c:		info->size = 0x00400000;
./board/ivm/flash.c:		info->flash_id += FLASH_AM160B;
./board/ivm/flash.c:		info->sector_count = 35;
./board/ivm/flash.c:		info->size = 0x00400000;
./board/ivm/flash.c:		info->flash_id += FLASH_AM320T;
./board/ivm/flash.c:		info->sector_count = 67;
./board/ivm/flash.c:		info->size = 0x00800000;
./board/ivm/flash.c:		info->flash_id += FLASH_AM320B;
./board/ivm/flash.c:		info->sector_count = 67;
./board/ivm/flash.c:		info->size = 0x00800000;
./board/ivm/flash.c:		info->flash_id += FLASH_SST200A;
./board/ivm/flash.c:		info->sector_count = 64;	/* 39xF200A ID ( 2M = 128K x 16	) */
./board/ivm/flash.c:		info->size = 0x00080000;
./board/ivm/flash.c:		info->flash_id += FLASH_SST400A;
./board/ivm/flash.c:		info->sector_count = 128;	/* 39xF400A ID ( 4M = 256K x 16	) */
./board/ivm/flash.c:		info->size = 0x00100000;
./board/ivm/flash.c:		info->flash_id += FLASH_SST800A;
./board/ivm/flash.c:		info->sector_count = 256;	/* 39xF800A ID ( 8M = 512K x 16	) */
./board/ivm/flash.c:		info->size = 0x00200000;
./board/ivm/flash.c:		info->flash_id += FLASH_STM800AB;
./board/ivm/flash.c:		info->sector_count = 19;
./board/ivm/flash.c:		info->size = 0x00200000;
./board/ivm/flash.c:		info->flash_id += FLASH_28F400_T;
./board/ivm/flash.c:		info->sector_count = 7;
./board/ivm/flash.c:		info->size = 0x00080000;
./board/ivm/flash.c:		info->flash_id += FLASH_28F400_B;
./board/ivm/flash.c:		info->sector_count = 7;
./board/ivm/flash.c:		info->size = 0x00080000;
./board/ivm/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/ivm/flash.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/ivm/flash.c:			info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/ivm/flash.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/ivm/flash.c:	return (info->size);
./board/ivm/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/ivm/flash.c:	if ((info->flash_id & FLASH_VENDMASK) != FLASH_MAN_MT) {
./board/ivm/flash.c:		if (info->protect[sect]) {
./board/ivm/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/ivm/flash.c:			vu_short *addr = (vu_short *)(info->start[sect]);
./board/ivm/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/alaska/flash.c:	if (info->flash_id == FLASH_UNKNOWN)
./board/alaska/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_AMD) {
./board/alaska/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/alaska/flash.c:			info->start[i] = base + (i * PHYS_AMD_SECT_SIZE);
./board/alaska/flash.c:			info->protect[i] = 0;
./board/alaska/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/alaska/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/alaska/flash.c:			info->start[i] = base + (i * PHYS_INTEL_SECT_SIZE);
./board/alaska/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/alaska/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/alaska/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/alaska/flash.c:		info->size >> 20, info->sector_count);
./board/alaska/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/alaska/flash.c:			info->start[i], info->protect[i] ? " (RO)" : "     ");
./board/alaska/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/alaska/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/alaska/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/alaska/flash.c:		info->sector_count = 0;
./board/alaska/flash.c:		info->size = 0;
./board/alaska/flash.c:		info->flash_id += FLASH_28F128J3A;
./board/alaska/flash.c:		info->sector_count = 64;
./board/alaska/flash.c:		info->size = 0x00800000;	/* => 16 MB     */
./board/alaska/flash.c:		info->flash_id += FLASH_AM040;
./board/alaska/flash.c:			info->sector_count = 7;
./board/alaska/flash.c:			info->size = 0x00070000;	/* => 448 KB     */
./board/alaska/flash.c:			info->sector_count = 1;
./board/alaska/flash.c:			info->size = PHYS_AMD_SECT_SIZE;	/* => 64 KB     */
./board/alaska/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/alaska/flash.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/alaska/flash.c:			info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/alaska/flash.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/alaska/flash.c:	return (info->size);
./board/alaska/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/alaska/flash.c:		for (i = 0; i < info->sector_count; ++i) {
./board/alaska/flash.c:			info->protect[i] = intel_sector_protected(info, i);
./board/alaska/flash.c:	addr = (FPWV *) info->start[sector];
./board/alaska/flash.c:	lock_conf_addr = (FPWV *) info->start[sector] + 4;
./board/alaska/flash.c:		if (info->flash_id == FLASH_UNKNOWN)
./board/alaska/flash.c:	type = (info->flash_id & FLASH_VENDMASK);
./board/alaska/flash.c:		type = (info->flash_id & FLASH_VENDMASK);
./board/alaska/flash.c:				info->flash_id);
./board/alaska/flash.c:		if (info->protect[sect]) {
./board/alaska/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/alaska/flash.c:			FPWV *addr = (FPWV *) (info->start[sect]);
./board/alaska/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/alaska/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/alaska/flash.c:	FPWV *addr = (FPWV *) (info->start[sector]);
./board/alaska/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_AMD) {
./board/alaska/flash.c:		info->protect[sector] = prot;
./board/alaska/flash.c:		info->protect[sector] = prot;
./board/alaska/flash.c:			for (i = 0; i < info->sector_count; i++) {
./board/alaska/flash.c:				if (info->protect[i]) {
./board/alaska/flash.c:					addr = (FPWV *) (info->start[i]);
./board/keymile/mgcoge/mgcoge.c:			flash_data[i + 3] = cpu_to_be32 (info->size);
./board/keymile/mgcoge/mgcoge.c:			size = info->size;
./board/keymile/mgcoge/mgcoge.c:			size += info->size;
./board/keymile/mgcoge/mgcoge.c:	flash_reg[2] = cpu_to_be32 (info->size);
./board/keymile/mgcoge/mgcoge.c:	flash_reg[5] = cpu_to_be32 (info->size);
./board/keymile/km8xx/km8xx.c:			flash_data[i + 3] = cpu_to_be32 (info->size);
./board/keymile/kmeter1/kmeter1.c:			size = info->size;
./board/keymile/kmeter1/kmeter1.c:			size += info->size;
./board/keymile/kmeter1/kmeter1.c:	size = info->size;
./board/keymile/kmeter1/kmeter1.c:	flash_reg[5] = cpu_to_be32 (info->size);
./board/incaip/flash.c:	FPWV *base = (FPWV *)(info->start[0]);
./board/incaip/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL)
./board/incaip/flash.c:	else if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_AMD)
./board/incaip/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL
./board/incaip/flash.c:	    && (info->flash_id & FLASH_BTYPE)) {
./board/incaip/flash.c:			info->start[i] = base + (i * bootsect_size);
./board/incaip/flash.c:		for (i = 8; i < info->sector_count; i++) {
./board/incaip/flash.c:			info->start[i] = base + ((i - 7) * sect_size);
./board/incaip/flash.c:	else if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_AMD
./board/incaip/flash.c:		 && (info->flash_id & FLASH_TYPEMASK) == FLASH_AM640U) {
./board/incaip/flash.c:		for( i = 0; i < info->sector_count; i++ )
./board/incaip/flash.c:			info->start[i] = base + (i * sect_size);
./board/incaip/flash.c:		if (info->start[0] <= base && base < info->start[0] + info->size)
./board/incaip/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/incaip/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/incaip/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/incaip/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/incaip/flash.c:		info->size >> 20,
./board/incaip/flash.c:		info->sector_count);
./board/incaip/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/incaip/flash.c:		printf (" %08lX%s", info->start[i],
./board/incaip/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/incaip/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/incaip/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/incaip/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/incaip/flash.c:		info->sector_count = 0;
./board/incaip/flash.c:		info->size = 0;
./board/incaip/flash.c:	if (info->flash_id != FLASH_UNKNOWN) switch (addr[0]) {
./board/incaip/flash.c:		info->flash_id += FLASH_AM640U;
./board/incaip/flash.c:		info->sector_count = 128;
./board/incaip/flash.c:		info->size = 0x00800000 * (sizeof(FPW)/2);
./board/incaip/flash.c:		info->flash_id += FLASH_28F800C3B;
./board/incaip/flash.c:		info->sector_count = 23;
./board/incaip/flash.c:		info->size = 0x00100000 * (sizeof(FPW)/2);
./board/incaip/flash.c:		info->flash_id += FLASH_INTEL800B;
./board/incaip/flash.c:		info->sector_count = 23;
./board/incaip/flash.c:		info->size = 0x00100000 * (sizeof(FPW)/2);
./board/incaip/flash.c:		info->flash_id += FLASH_28F160C3B;
./board/incaip/flash.c:		info->sector_count = 39;
./board/incaip/flash.c:		info->size = 0x00200000 * (sizeof(FPW)/2);
./board/incaip/flash.c:		info->flash_id += FLASH_INTEL160B;
./board/incaip/flash.c:		info->sector_count = 39;
./board/incaip/flash.c:		info->size = 0x00200000 * (sizeof(FPW)/2);
./board/incaip/flash.c:		info->flash_id += FLASH_28F320C3B;
./board/incaip/flash.c:		info->sector_count = 71;
./board/incaip/flash.c:		info->size = 0x00400000 * (sizeof(FPW)/2);
./board/incaip/flash.c:		info->flash_id += FLASH_INTEL320B;
./board/incaip/flash.c:		info->sector_count = 71;
./board/incaip/flash.c:		info->size = 0x00400000 * (sizeof(FPW)/2);
./board/incaip/flash.c:		info->flash_id += FLASH_28F640C3B;
./board/incaip/flash.c:		info->sector_count = 135;
./board/incaip/flash.c:		info->size = 0x00800000 * (sizeof(FPW)/2);
./board/incaip/flash.c:		info->flash_id += FLASH_INTEL640B;
./board/incaip/flash.c:		info->sector_count = 135;
./board/incaip/flash.c:		info->size = 0x00800000 * (sizeof(FPW)/2);
./board/incaip/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/incaip/flash.c:		info->sector_count = 0;
./board/incaip/flash.c:		info->size = 0;
./board/incaip/flash.c:	return (info->size);
./board/incaip/flash.c:	int intel = (info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL;
./board/incaip/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/incaip/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/incaip/flash.c:			info->flash_id);
./board/incaip/flash.c:		if (info->protect[sect]) {
./board/incaip/flash.c:		if (info->protect[sect] != 0)	/* protected, skip it */
./board/incaip/flash.c:		addr = (FPWV *)(info->start[sect]);
./board/incaip/flash.c:			base = (FPWV *)(info->start[0]);
./board/incaip/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/incaip/flash.c:    base = (FPWV *)(info->start[0]);
./board/bf533-ezkit/flash.c:	info->flash_id = id;
./board/bf533-ezkit/flash.c:			info->start[i] = (baseaddr + (i * AFP_SectorSize1));
./board/bf533-ezkit/flash.c:		info->size = 0x200000;
./board/bf533-ezkit/flash.c:		info->sector_count = 32;
./board/bf533-ezkit/flash.c:		info->start[0] = baseaddr + SecFlashASec1Off;
./board/bf533-ezkit/flash.c:		info->start[1] = baseaddr + SecFlashASec2Off;
./board/bf533-ezkit/flash.c:		info->start[2] = baseaddr + SecFlashASec3Off;
./board/bf533-ezkit/flash.c:		info->start[3] = baseaddr + SecFlashASec4Off;
./board/bf533-ezkit/flash.c:		info->size = 0x10000;
./board/bf533-ezkit/flash.c:		info->sector_count = 4;
./board/bf533-ezkit/flash.c:		info->start[0] = baseaddr + SecFlashBSec1Off;
./board/bf533-ezkit/flash.c:		info->start[1] = baseaddr + SecFlashBSec2Off;
./board/bf533-ezkit/flash.c:		info->start[2] = baseaddr + SecFlashBSec3Off;
./board/bf533-ezkit/flash.c:		info->start[3] = baseaddr + SecFlashBSec4Off;
./board/bf533-ezkit/flash.c:		info->size = 0x10000;
./board/bf533-ezkit/flash.c:		info->sector_count = 4;
./board/bf533-ezkit/flash.c:	return (info->size);
./board/bf533-ezkit/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/bf533-ezkit/flash.c:	switch (info->flash_id) {
./board/bf533-ezkit/flash.c:		printf("Unknown Vendor: (0x%08lX) ", info->flash_id);
./board/bf533-ezkit/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/bf533-ezkit/flash.c:		       info->start[i], info->protect[i] ? " (RO)" : "     ");
./board/bf533-ezkit/flash.c:		if (info->protect[sect])
./board/bf533-ezkit/flash.c:			if (info->protect[i] == 0) {	/* not protected */
./board/bf533-ezkit/flash.c:				if (erase_block_flash(i, info->start[i]) < 0) {
./board/r360mpi/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/r360mpi/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/r360mpi/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/r360mpi/flash.c:			info->start[i] = base + (i * 0x00020000);
./board/r360mpi/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/r360mpi/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/r360mpi/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/r360mpi/flash.c:			info->size >> 20, info->sector_count);
./board/r360mpi/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/r360mpi/flash.c:			info->start[i],
./board/r360mpi/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/r360mpi/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/r360mpi/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/r360mpi/flash.c:		info->sector_count = 0;
./board/r360mpi/flash.c:		info->size = 0;
./board/r360mpi/flash.c:		info->flash_id += FLASH_28F320J3A;
./board/r360mpi/flash.c:		info->sector_count = 32;
./board/r360mpi/flash.c:		info->size = 0x00400000;
./board/r360mpi/flash.c:		info->flash_id += FLASH_28F640J3A;
./board/r360mpi/flash.c:		info->sector_count = 64;
./board/r360mpi/flash.c:		info->size = 0x00800000;
./board/r360mpi/flash.c:		info->flash_id += FLASH_28F128J3A;
./board/r360mpi/flash.c:		info->sector_count = 128;
./board/r360mpi/flash.c:		info->size = 0x01000000;
./board/r360mpi/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/r360mpi/flash.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/r360mpi/flash.c:				info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/r360mpi/flash.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/r360mpi/flash.c:	return (info->size);
./board/r360mpi/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/r360mpi/flash.c:	type = (info->flash_id & FLASH_VENDMASK);
./board/r360mpi/flash.c:			info->flash_id);
./board/r360mpi/flash.c:		if (info->protect[sect]) {
./board/r360mpi/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/r360mpi/flash.c:			FPWV *addr = (FPWV *) (info->start[sect]);
./board/r360mpi/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/mpc8540eval/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/mpc8540eval/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/mpc8540eval/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/mpc8540eval/flash.c:		info->size >> 20, info->sector_count);
./board/mpc8540eval/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/mpc8540eval/flash.c:			info->start[i],
./board/mpc8540eval/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/mpc8540eval/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/mpc8540eval/flash.c:		info->sector_count = 0;
./board/mpc8540eval/flash.c:		info->size = 0;
./board/mpc8540eval/flash.c:		info->chipwidth = FLASH_CFI_BY16;
./board/mpc8540eval/flash.c:		if(vb == vd) info->portwidth = FLASH_CFI_32BIT;
./board/mpc8540eval/flash.c:		else info->portwidth = FLASH_CFI_16BIT;
./board/mpc8540eval/flash.c:		info->chipwidth = FLASH_CFI_BY16;
./board/mpc8540eval/flash.c:		if(va == vc) info->portwidth = FLASH_CFI_32BIT;
./board/mpc8540eval/flash.c:		else info->portwidth = FLASH_CFI_16BIT;
./board/mpc8540eval/flash.c:		info->chipwidth = FLASH_CFI_BY8;
./board/mpc8540eval/flash.c:		if(va == vb) info->portwidth = FLASH_CFI_16BIT;
./board/mpc8540eval/flash.c:		else info->portwidth = FLASH_CFI_8BIT;
./board/mpc8540eval/flash.c:	switch (info->portwidth) {
./board/mpc8540eval/flash.c:	switch (info->chipwidth) {
./board/mpc8540eval/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/mpc8540eval/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/mpc8540eval/flash.c:		info->sector_count = 0;
./board/mpc8540eval/flash.c:		info->size = 0;
./board/mpc8540eval/flash.c:	if (info->portwidth==FLASH_CFI_16BIT) {
./board/mpc8540eval/flash.c:	else if (info->portwidth == FLASH_CFI_32BIT) {
./board/mpc8540eval/flash.c:		info->flash_id += FLASH_28F016SV;
./board/mpc8540eval/flash.c:		info->sector_count = 32;
./board/mpc8540eval/flash.c:		info->flash_id += FLASH_28F160S3;
./board/mpc8540eval/flash.c:		info->sector_count = 32;
./board/mpc8540eval/flash.c:		info->flash_id += FLASH_28F320S3;
./board/mpc8540eval/flash.c:		info->sector_count = 64;
./board/mpc8540eval/flash.c:		info->flash_id += FLASH_28F640J3A;
./board/mpc8540eval/flash.c:		info->sector_count = 64;
./board/mpc8540eval/flash.c:		info->flash_id      = FLASH_MAN_SHARP | FLASH_LH28F016SCT;
./board/mpc8540eval/flash.c:		info->sector_count  = 32;
./board/mpc8540eval/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/mpc8540eval/flash.c:	sector_offset = sector_offset * (info->portwidth / info->chipwidth);
./board/mpc8540eval/flash.c:	info->size = info->sector_count * sector_offset;
./board/mpc8540eval/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/mpc8540eval/flash.c:		info->start[i] = base;
./board/mpc8540eval/flash.c:		info->protect[i] = 0;
./board/mpc8540eval/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/mpc8540eval/flash.c:		addr = (vu_long *)info->start[0];
./board/mpc8540eval/flash.c:	return (info->size);
./board/mpc8540eval/flash.c:	if ((info->portwidth / info->chipwidth)==2) {
./board/mpc8540eval/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/mpc8540eval/flash.c:	if (    ((info->flash_id & FLASH_VENDMASK) != FLASH_MAN_INTEL)
./board/mpc8540eval/flash.c:	     && ((info->flash_id & FLASH_VENDMASK) != FLASH_MAN_SHARP) ) {
./board/mpc8540eval/flash.c:			info->flash_id);
./board/mpc8540eval/flash.c:		if (info->protect[sect]) {
./board/mpc8540eval/flash.c:	if(clear_block_lock_bit(info, (vu_long *)(info->start[s_first]))){
./board/mpc8540eval/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/mpc8540eval/flash.c:			vu_short *addr16 = (vu_short *)(info->start[sect]);
./board/mpc8540eval/flash.c:			vu_long *addr   = (vu_long *)(info->start[sect]);
./board/mpc8540eval/flash.c:			switch (info->portwidth) {
./board/mpc8540eval/flash.c:					if((info->flash_id & FLASH_TYPEMASK) != FLASH_LH28F016SCT) {
./board/mpc8540eval/flash.c:					if((info->flash_id & FLASH_TYPEMASK) != FLASH_LH28F016SCT) {
./board/mpc8540eval/flash.c:	switch (info->portwidth) {
./board/mpc8540eval/flash.c:		if ((info->portwidth / info->chipwidth)==2) {
./board/mpc8540eval/flash.c:	if ((info->portwidth / info->chipwidth)==2) {
./board/netvia/flash.c:	if ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM040) {
./board/netvia/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/netvia/flash.c:			info->start[i] = base + (i * 0x00010000);
./board/netvia/flash.c:	} else if (info->flash_id & FLASH_BTYPE) {
./board/netvia/flash.c:		info->start[0] = base + 0x00000000;
./board/netvia/flash.c:		info->start[1] = base + 0x00004000;
./board/netvia/flash.c:		info->start[2] = base + 0x00006000;
./board/netvia/flash.c:		info->start[3] = base + 0x00008000;
./board/netvia/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/netvia/flash.c:			info->start[i] = base + (i * 0x00010000) - 0x00030000;
./board/netvia/flash.c:		i = info->sector_count - 1;
./board/netvia/flash.c:		info->start[i--] = base + info->size - 0x00004000;
./board/netvia/flash.c:		info->start[i--] = base + info->size - 0x00006000;
./board/netvia/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/netvia/flash.c:			info->start[i] = base + i * 0x00010000;
./board/netvia/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/netvia/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/netvia/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/netvia/flash.c:	printf("  Size: %ld MB in %d Sectors\n", info->size >> 20, info->sector_count);
./board/netvia/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/netvia/flash.c:		printf(" %08lX%s", info->start[i], info->protect[i] ? " (RO)" : "     ");
./board/netvia/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/netvia/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/netvia/flash.c:		info->flash_id = FLASH_MAN_MX;
./board/netvia/flash.c:		info->flash_id = FLASH_MAN_STM;
./board/netvia/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/netvia/flash.c:		info->sector_count = 0;
./board/netvia/flash.c:		info->size = 0;
./board/netvia/flash.c:		info->flash_id += FLASH_AM400T;
./board/netvia/flash.c:		info->sector_count = 11;
./board/netvia/flash.c:		info->size = 0x00080000;
./board/netvia/flash.c:		info->flash_id += FLASH_AM400B;
./board/netvia/flash.c:		info->sector_count = 11;
./board/netvia/flash.c:		info->size = 0x00080000;
./board/netvia/flash.c:		info->flash_id += FLASH_AM800T;
./board/netvia/flash.c:		info->sector_count = 19;
./board/netvia/flash.c:		info->size = 0x00100000;
./board/netvia/flash.c:		info->flash_id += FLASH_AM800B;
./board/netvia/flash.c:		info->sector_count = 19;
./board/netvia/flash.c:		info->size = 0x00100000;
./board/netvia/flash.c:		info->flash_id += FLASH_AM160T;
./board/netvia/flash.c:		info->sector_count = 35;
./board/netvia/flash.c:		info->size = 0x00200000;
./board/netvia/flash.c:		info->flash_id += FLASH_AM160B;
./board/netvia/flash.c:		info->sector_count = 35;
./board/netvia/flash.c:		info->size = 0x00200000;
./board/netvia/flash.c:		info->flash_id += FLASH_AM040;
./board/netvia/flash.c:		info->sector_count = 8;
./board/netvia/flash.c:		info->size = 0x00080000;
./board/netvia/flash.c:		info->flash_id += FLASH_AM040;
./board/netvia/flash.c:		info->sector_count = 8;
./board/netvia/flash.c:		info->size = 0x00080000;
./board/netvia/flash.c:		info->flash_id += FLASH_AM320T;
./board/netvia/flash.c:		info->sector_count = 67;
./board/netvia/flash.c:		info->size = 0x00400000;
./board/netvia/flash.c:		info->flash_id += FLASH_AM320B;
./board/netvia/flash.c:		info->sector_count = 67;
./board/netvia/flash.c:		info->size = 0x00400000;
./board/netvia/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/netvia/flash.c:	if ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM040) {
./board/netvia/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/netvia/flash.c:			info->start[i] = base + (i * 0x00010000);
./board/netvia/flash.c:	} else if (info->flash_id & FLASH_BTYPE) {
./board/netvia/flash.c:		info->start[0] = base + 0x00000000;
./board/netvia/flash.c:		info->start[1] = base + 0x00004000;
./board/netvia/flash.c:		info->start[2] = base + 0x00006000;
./board/netvia/flash.c:		info->start[3] = base + 0x00008000;
./board/netvia/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/netvia/flash.c:			info->start[i] = base + (i * 0x00010000) - 0x00030000;
./board/netvia/flash.c:		i = info->sector_count - 1;
./board/netvia/flash.c:		info->start[i--] = base + info->size - 0x00004000;
./board/netvia/flash.c:		info->start[i--] = base + info->size - 0x00006000;
./board/netvia/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/netvia/flash.c:			info->start[i] = base + i * 0x00010000;
./board/netvia/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/netvia/flash.c:		caddr = (volatile unsigned char *)(info->start[i]);
./board/netvia/flash.c:		info->protect[i] = caddr[2] & 1;
./board/netvia/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/netvia/flash.c:		caddr = (vu_char *) info->start[0];
./board/netvia/flash.c:	return (info->size);
./board/netvia/flash.c:	vu_char *addr = (vu_char *) (info->start[0]);
./board/netvia/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/netvia/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/netvia/flash.c:	    (info->flash_id > FLASH_AMD_COMP)) {
./board/netvia/flash.c:		printf("Can't erase unknown flash type %08lx - aborted\n", info->flash_id);
./board/netvia/flash.c:		if (info->protect[sect]) {
./board/netvia/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/netvia/flash.c:			addr = (vu_char *) (info->start[sect]);
./board/netvia/flash.c:	addr = (vu_char *) (info->start[l_sect]);
./board/netvia/flash.c:	addr = (vu_char *) info->start[0];
./board/netvia/flash.c:	vu_char *addr = (vu_char *) (info->start[0]);
./board/netta2/flash.c:	if ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM040) {
./board/netta2/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/netta2/flash.c:			info->start[i] = base + (i * 0x00010000);
./board/netta2/flash.c:	} else if (info->flash_id & FLASH_BTYPE) {
./board/netta2/flash.c:		info->start[0] = base + 0x00000000;
./board/netta2/flash.c:		info->start[1] = base + 0x00004000;
./board/netta2/flash.c:		info->start[2] = base + 0x00006000;
./board/netta2/flash.c:		info->start[3] = base + 0x00008000;
./board/netta2/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/netta2/flash.c:			info->start[i] = base + (i * 0x00010000) - 0x00030000;
./board/netta2/flash.c:		i = info->sector_count - 1;
./board/netta2/flash.c:		info->start[i--] = base + info->size - 0x00004000;
./board/netta2/flash.c:		info->start[i--] = base + info->size - 0x00006000;
./board/netta2/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/netta2/flash.c:			info->start[i] = base + i * 0x00010000;
./board/netta2/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/netta2/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/netta2/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/netta2/flash.c:	printf("  Size: %ld MB in %d Sectors\n", info->size >> 20, info->sector_count);
./board/netta2/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/netta2/flash.c:		printf(" %08lX%s", info->start[i], info->protect[i] ? " (RO)" : "     ");
./board/netta2/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/netta2/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/netta2/flash.c:		info->flash_id = FLASH_MAN_MX;
./board/netta2/flash.c:		info->flash_id = FLASH_MAN_STM;
./board/netta2/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/netta2/flash.c:		info->sector_count = 0;
./board/netta2/flash.c:		info->size = 0;
./board/netta2/flash.c:		info->flash_id += FLASH_AM400T;
./board/netta2/flash.c:		info->sector_count = 11;
./board/netta2/flash.c:		info->size = 0x00080000;
./board/netta2/flash.c:		info->flash_id += FLASH_AM400B;
./board/netta2/flash.c:		info->sector_count = 11;
./board/netta2/flash.c:		info->size = 0x00080000;
./board/netta2/flash.c:		info->flash_id += FLASH_AM800T;
./board/netta2/flash.c:		info->sector_count = 19;
./board/netta2/flash.c:		info->size = 0x00100000;
./board/netta2/flash.c:		info->flash_id += FLASH_AM800B;
./board/netta2/flash.c:		info->sector_count = 19;
./board/netta2/flash.c:		info->size = 0x00100000;
./board/netta2/flash.c:		info->flash_id += FLASH_AM160T;
./board/netta2/flash.c:		info->sector_count = 35;
./board/netta2/flash.c:		info->size = 0x00200000;
./board/netta2/flash.c:		info->flash_id += FLASH_AM160B;
./board/netta2/flash.c:		info->sector_count = 35;
./board/netta2/flash.c:		info->size = 0x00200000;
./board/netta2/flash.c:		info->flash_id += FLASH_AM040;
./board/netta2/flash.c:		info->sector_count = 8;
./board/netta2/flash.c:		info->size = 0x00080000;
./board/netta2/flash.c:		info->flash_id += FLASH_AM040;
./board/netta2/flash.c:		info->sector_count = 8;
./board/netta2/flash.c:		info->size = 0x00080000;
./board/netta2/flash.c:		info->flash_id += FLASH_AM320T;
./board/netta2/flash.c:		info->sector_count = 67;
./board/netta2/flash.c:		info->size = 0x00400000;
./board/netta2/flash.c:		info->flash_id += FLASH_AM320B;
./board/netta2/flash.c:		info->sector_count = 67;
./board/netta2/flash.c:		info->size = 0x00400000;
./board/netta2/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/netta2/flash.c:	if ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM040) {
./board/netta2/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/netta2/flash.c:			info->start[i] = base + (i * 0x00010000);
./board/netta2/flash.c:	} else if (info->flash_id & FLASH_BTYPE) {
./board/netta2/flash.c:		info->start[0] = base + 0x00000000;
./board/netta2/flash.c:		info->start[1] = base + 0x00004000;
./board/netta2/flash.c:		info->start[2] = base + 0x00006000;
./board/netta2/flash.c:		info->start[3] = base + 0x00008000;
./board/netta2/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/netta2/flash.c:			info->start[i] = base + (i * 0x00010000) - 0x00030000;
./board/netta2/flash.c:		i = info->sector_count - 1;
./board/netta2/flash.c:		info->start[i--] = base + info->size - 0x00004000;
./board/netta2/flash.c:		info->start[i--] = base + info->size - 0x00006000;
./board/netta2/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/netta2/flash.c:			info->start[i] = base + i * 0x00010000;
./board/netta2/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/netta2/flash.c:		caddr = (volatile unsigned char *)(info->start[i]);
./board/netta2/flash.c:		info->protect[i] = caddr[2] & 1;
./board/netta2/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/netta2/flash.c:		caddr = (vu_char *) info->start[0];
./board/netta2/flash.c:	return (info->size);
./board/netta2/flash.c:	vu_char *addr = (vu_char *) (info->start[0]);
./board/netta2/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/netta2/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/netta2/flash.c:	    (info->flash_id > FLASH_AMD_COMP)) {
./board/netta2/flash.c:		printf("Can't erase unknown flash type %08lx - aborted\n", info->flash_id);
./board/netta2/flash.c:		if (info->protect[sect]) {
./board/netta2/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/netta2/flash.c:			addr = (vu_char *) (info->start[sect]);
./board/netta2/flash.c:	addr = (vu_char *) (info->start[l_sect]);
./board/netta2/flash.c:	addr = (vu_char *) info->start[0];
./board/netta2/flash.c:	vu_char *addr = (vu_char *) (info->start[0]);
./board/armadillo/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/armadillo/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/armadillo/flash.c:		info->size >> 20, info->sector_count);
./board/armadillo/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/armadillo/flash.c:		printf (" %08lX%s", info->start[i],
./board/armadillo/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/armadillo/flash.c:	if ((info->flash_id & FLASH_VENDMASK) !=
./board/armadillo/flash.c:		if (info->protect[sect]) {
./board/armadillo/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/v37/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/v37/flash.c:		info->start[0] = base + (0x00000000<<addr_shift);
./board/v37/flash.c:		info->start[1] = base + (0x00002000<<addr_shift);
./board/v37/flash.c:		info->start[2] = base + (0x00003000<<addr_shift);
./board/v37/flash.c:		info->start[3] = base + (0x00004000<<addr_shift);
./board/v37/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/v37/flash.c:			info->start[i] = base + ((i-3) * (0x00008000<<addr_shift)) ;
./board/v37/flash.c:		i = info->sector_count - 1;
./board/v37/flash.c:		info->start[i--] = base + info->size - (0x00002000<<addr_shift);
./board/v37/flash.c:		info->start[i--] = base + info->size - (0x00003000<<addr_shift);
./board/v37/flash.c:		info->start[i--] = base + info->size - (0x00004000<<addr_shift);
./board/v37/flash.c:			info->start[i] = base + i * (0x00008000<<addr_shift);
./board/v37/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/v37/flash.c:		addr = (vu_short *)(info->start[i]);
./board/v37/flash.c:		info->protect[i] = addr[1<<addr_shift] & 1 ;
./board/v37/flash.c:	addr = (vu_short *)info->start[0];
./board/v37/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/v37/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/v37/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/v37/flash.c:		info->size >> 20, info->sector_count);
./board/v37/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/v37/flash.c:			info->start[i],
./board/v37/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/v37/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/v37/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/v37/flash.c:		info->flash_id = FLASH_MAN_TOSH;
./board/v37/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/v37/flash.c:		info->sector_count = 0;
./board/v37/flash.c:		info->size = 0;
./board/v37/flash.c:		info->flash_id += FLASH_AM160T;
./board/v37/flash.c:		info->sector_count = 35;
./board/v37/flash.c:		info->size = 0x00200000;
./board/v37/flash.c:		info->flash_id += FLASH_AM160B;
./board/v37/flash.c:		info->sector_count = 35;
./board/v37/flash.c:		info->size = 0x00200000;
./board/v37/flash.c:		info->flash_id += FLASH_AM400T;
./board/v37/flash.c:		info->sector_count = 11;
./board/v37/flash.c:		info->size = 0x00100000;
./board/v37/flash.c:		info->flash_id += FLASH_AM400B;
./board/v37/flash.c:		info->sector_count = 11;
./board/v37/flash.c:		info->size = 0x00100000;
./board/v37/flash.c:		info->flash_id += FLASH_AM800T;
./board/v37/flash.c:		info->sector_count = 19;
./board/v37/flash.c:		info->size = 0x00200000;
./board/v37/flash.c:		info->flash_id += FLASH_AM800B;
./board/v37/flash.c:		info->sector_count = 19;
./board/v37/flash.c:		info->size = 0x00400000;	/*%%% Size doubled by yooth */
./board/v37/flash.c:		info->flash_id += FLASH_AM160T;
./board/v37/flash.c:		info->sector_count = 35;
./board/v37/flash.c:		info->size = 0x00200000;
./board/v37/flash.c:		info->flash_id += FLASH_AM160B;
./board/v37/flash.c:		info->sector_count = 35;
./board/v37/flash.c:		info->size = 0x00200000;
./board/v37/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/v37/flash.c:	return(info->size);
./board/v37/flash.c:	vu_short *addr = (vu_short*)(info->start[0]);
./board/v37/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/v37/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/v37/flash.c:	    (info->flash_id > FLASH_AMD_COMP)) {
./board/v37/flash.c:			info->flash_id);
./board/v37/flash.c:		if (info->protect[sect]) {
./board/v37/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/v37/flash.c:			addr = (vu_short *)(info->start[sect]) ;
./board/v37/flash.c:	addr = (vu_short *)(info->start[l_sect]);
./board/v37/flash.c:	addr = (vu_short *)info->start[0];
./board/v37/flash.c:	vu_short *addr = (vu_short *)(info->start[0]);
./board/cpc45/flash.c:	switch ((i = info->flash_id & FLASH_VENDMASK)) {
./board/cpc45/flash.c:	switch ((i = info->flash_id & FLASH_TYPEMASK)) {
./board/cpc45/flash.c:		info->size >> 20, info->sector_count);
./board/cpc45/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/cpc45/flash.c:		printf (" %08lX%s", info->start[i],
./board/cpc45/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/cpc45/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/cpc45/flash.c:	if ((info->flash_id & FLASH_VENDMASK) !=
./board/cpc45/flash.c:		if (info->protect[sect]) {
./board/cpc45/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/cpc45/flash.c:			vu_long *addr = (vu_long *) (info->start[sect]);
./board/cpc45/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/evb4510/flash.c:		if (info->protect[sect]) {
./board/evb4510/flash.c:	info->flash_id = FLASH_DEV_U7_2MB;
./board/evb4510/flash.c:	info->sector_count = 35;
./board/evb4510/flash.c:	info->size = 2 * 1024 * 1024;	/* 2MB */
./board/evb4510/flash.c:	info->start[0] = amd160base;
./board/evb4510/flash.c:	info->start[1] = amd160base + 0x4000;
./board/evb4510/flash.c:	info->start[2] = amd160base + 0x6000;
./board/evb4510/flash.c:	info->start[3] = amd160base + 0x8000;
./board/evb4510/flash.c:	for (i = 1; i < info->sector_count; i++)
./board/evb4510/flash.c:		info->start[3 + i] = amd160base + i * (64 * 1024);
./board/evb4510/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/evb4510/flash.c:		FLASH_CMD_SELECT (info->flash_id,
./board/evb4510/flash.c:				  info->start[i] | CACHE_DISABLE_MASK);
./board/evb4510/flash.c:			GET__U8 (((info->start[i] + 4) | CACHE_DISABLE_MASK));
./board/evb4510/flash.c:		FLASH_CMD_RESET (info->flash_id,
./board/evb4510/flash.c:		info->protect[i] = (flashtest & 0x0001);
./board/evb4510/flash.c:	info->flash_id = FLASH_DEV_U9_512KB;
./board/evb4510/flash.c:	info->sector_count = 8;
./board/evb4510/flash.c:	info->size = 512 * 1024;	/* 512KB, 8 x 64KB */
./board/evb4510/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/evb4510/flash.c:		info->start[i] = amd040base + i * (64 * 1024);
./board/evb4510/flash.c:		FLASH_CMD_SELECT (info->flash_id,
./board/evb4510/flash.c:				  info->start[i] | CACHE_DISABLE_MASK);
./board/evb4510/flash.c:			GET__U8 (((info->start[i] + 2) | CACHE_DISABLE_MASK));
./board/evb4510/flash.c:		FLASH_CMD_RESET (info->flash_id,
./board/evb4510/flash.c:		info->protect[i] = (flashtest & 0x0001);
./board/evb4510/flash.c:	if (info->flash_id == FLASH_DEV_U7_2MB) {
./board/evb4510/flash.c:	} else if (info->flash_id == FLASH_DEV_U9_512KB) {
./board/evb4510/flash.c:		info->size >> 10, info->sector_count);
./board/evb4510/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/evb4510/flash.c:			info->start[i], info->protect[i] ? " !" : "  ");
./board/evb4510/flash.c:	if ((s_first < info->sector_count) && (s_first <= s_last)) {
./board/evb4510/flash.c:				info->start[i]);
./board/evb4510/flash.c:			FLASH_CMD_ERASE_SEC (info->flash_id,
./board/evb4510/flash.c:					     (info->
./board/evb4510/flash.c:					     (info->
./board/evb4510/flash.c:			error = _flash_poll (info->flash_id,
./board/evb4510/flash.c:					     info->
./board/evb4510/flash.c:			FLASH_CMD_RESET (info->flash_id,
./board/evb4510/flash.c:					 (info->
./board/evb4510/flash.c:	FLASH_CMD_UNLOCK_BYPASS (info->flash_id,
./board/evb4510/flash.c:				 (info->start[0] | CACHE_DISABLE_MASK));
./board/evb4510/flash.c:		error = _flash_poll (info->flash_id, (u32) bp, *bps,
./board/evb4510/flash.c:	FLASH_CMD_BYPASS_RESET (info->flash_id, info->start[0]);
./board/icecube/flash.c:	FPWV *base = (FPWV *)(info->start[0]);
./board/icecube/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL)
./board/icecube/flash.c:	else if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_AMD)
./board/icecube/flash.c:		if (info->size &&
./board/icecube/flash.c:			info->start[0] <= base && base <= info->start[0] + info->size - 1)
./board/icecube/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/icecube/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/icecube/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/icecube/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/icecube/flash.c:		info->size >> 20,
./board/icecube/flash.c:		info->sector_count);
./board/icecube/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/icecube/flash.c:		printf (" %08lX%s", info->start[i],
./board/icecube/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/icecube/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/icecube/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/icecube/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/icecube/flash.c:		info->sector_count = 0;
./board/icecube/flash.c:		info->size = 0;
./board/icecube/flash.c:	if (info->flash_id != FLASH_UNKNOWN) switch ((FPW)addr[1]) {
./board/icecube/flash.c:		info->flash_id += FLASH_AMDLV065D;
./board/icecube/flash.c:		info->sector_count = 128;
./board/icecube/flash.c:		info->size = 0x00800000;
./board/icecube/flash.c:		for( i = 0; i < info->sector_count; i++ )
./board/icecube/flash.c:			info->start[i] = (ulong)addr + (i * 0x10000);
./board/icecube/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/icecube/flash.c:		info->sector_count = 0;
./board/icecube/flash.c:		info->size = 0;
./board/icecube/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/icecube/flash.c:		info->sector_count = 0;
./board/icecube/flash.c:		info->size = 0;
./board/icecube/flash.c:	return (info->size);
./board/icecube/flash.c:	int intel = (info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL;
./board/icecube/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/icecube/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/icecube/flash.c:			info->flash_id);
./board/icecube/flash.c:		if (info->protect[sect]) {
./board/icecube/flash.c:		if (info->protect[sect] != 0)	/* protected, skip it */
./board/icecube/flash.c:		addr = (FPWV *)(info->start[sect]);
./board/icecube/flash.c:			base = (FPWV *)(info->start[0]);
./board/icecube/flash.c:		switch (info->flash_id & FLASH_VENDMASK) {
./board/icecube/flash.c:	base = (FPWV *)(info->start[0]);
./board/pm828/flash.c:	info->sector_count = info->size = 0;
./board/pm828/flash.c:	info->flash_id = FLASH_UNKNOWN;
./board/pm828/flash.c:		info->flash_id = FLASH_28F160C3B;
./board/pm828/flash.c:		info->sector_count = 39;
./board/pm828/flash.c:		info->size = 0x00800000;	/* 4 * 2 MB = 8 MB	*/
./board/pm828/flash.c:		info->flash_id = FLASH_28F160F3B;
./board/pm828/flash.c:		info->sector_count = 39;
./board/pm828/flash.c:		info->size = 0x00800000;	/* 4 * 2 MB = 8 MB      */
./board/pm828/flash.c:		info->flash_id = FLASH_28F640C3B;
./board/pm828/flash.c:		info->sector_count = 135;
./board/pm828/flash.c:		info->size = 0x02000000;	/* 16 * 2 MB = 32 MB	*/
./board/pm828/flash.c:	info->flash_id |= INTEL_MANUFACT << 16; /* set manufacturer offset */
./board/pm828/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/pm828/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/pm828/flash.c:			if (((info->flash_id & FLASH_TYPEMASK) == FLASH_28F160C3B) ||
./board/pm828/flash.c:			    ((info->flash_id & FLASH_TYPEMASK) == FLASH_28F640C3B)) {
./board/pm828/flash.c:			info->start[i] = (uint) tmp;
./board/pm828/flash.c:	memset (info->protect, 0, info->sector_count);
./board/pm828/flash.c:	return (info->size);
./board/pm828/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/pm828/flash.c:	switch ((info->flash_id >> 16) & 0xff) {
./board/pm828/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/pm828/flash.c:			info->size >> 20, info->sector_count);
./board/pm828/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/pm828/flash.c:			info->start[i],
./board/pm828/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/pm828/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/pm828/flash.c:		if (info->protect[sect])
./board/pm828/flash.c:				(volatile unsigned long *) info->start[sect];
./board/pm828/flash.c:		if (info->protect[sect] == 0) {
./board/cpu87/flash.c:	info->sector_count = info->size = 0;
./board/cpu87/flash.c:	info->flash_id = FLASH_UNKNOWN;
./board/cpu87/flash.c:		info->flash_id = FLASH_28F160C3B;
./board/cpu87/flash.c:		info->sector_count = 39;
./board/cpu87/flash.c:		info->size = 0x00800000;	/* 4 * 2 MB = 8 MB	*/
./board/cpu87/flash.c:		info->flash_id = FLASH_28F160F3B;
./board/cpu87/flash.c:		info->sector_count = 39;
./board/cpu87/flash.c:		info->size = 0x00800000;	/* 4 * 2 MB = 8 MB      */
./board/cpu87/flash.c:		info->flash_id = FLASH_28F640C3B;
./board/cpu87/flash.c:		info->sector_count = 135;
./board/cpu87/flash.c:		info->size = 0x02000000;	/* 16 * 2 MB = 32 MB	*/
./board/cpu87/flash.c:	info->flash_id |= INTEL_MANUFACT << 16; /* set manufacturer offset */
./board/cpu87/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/cpu87/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/cpu87/flash.c:			if (((info->flash_id & FLASH_TYPEMASK) == FLASH_28F160C3B) ||
./board/cpu87/flash.c:			    ((info->flash_id & FLASH_TYPEMASK) == FLASH_28F640C3B)) {
./board/cpu87/flash.c:			info->start[i] = (uint) tmp;
./board/cpu87/flash.c:	memset (info->protect, 0, info->sector_count);
./board/cpu87/flash.c:	return (info->size);
./board/cpu87/flash.c:		info->flash_id     = vendor << 16 | devid;
./board/cpu87/flash.c:		info->sector_count = 8;
./board/cpu87/flash.c:		info->size         = info->sector_count * 0x10000;
./board/cpu87/flash.c:		info->flash_id     = vendor << 16 | devid;
./board/cpu87/flash.c:		info->sector_count = 16;
./board/cpu87/flash.c:		info->size         = 4 * info->sector_count * 0x10000;
./board/cpu87/flash.c:		info->flash_id     = vendor << 16 | devid;
./board/cpu87/flash.c:		info->sector_count = 32;
./board/cpu87/flash.c:		info->size         = 4 * info->sector_count * 0x10000;
./board/cpu87/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/cpu87/flash.c:		info->start[i] = base + i * (info->size / info->sector_count);
./board/cpu87/flash.c:		addr = (volatile unsigned char *)(info->start[i]);
./board/cpu87/flash.c:		info->protect[i] = addr[2] & 1;
./board/cpu87/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/cpu87/flash.c:		addr = (vu_char *)info->start[0];
./board/cpu87/flash.c:	return (info->size);
./board/cpu87/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/cpu87/flash.c:	switch ((info->flash_id >> 16) & 0xff) {
./board/cpu87/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/cpu87/flash.c:	if (info->size < 0x100000)
./board/cpu87/flash.c:				info->size >> 10, info->sector_count);
./board/cpu87/flash.c:				info->size >> 20, info->sector_count);
./board/cpu87/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/cpu87/flash.c:			info->start[i],
./board/cpu87/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/cpu87/flash.c:	vu_char *addr = (vu_char *)(info->start[0]);
./board/cpu87/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/cpu87/flash.c:		if (info->protect[sect])
./board/cpu87/flash.c:	if (info->flash_id >> 16 == 0x1) {
./board/cpu87/flash.c:			if (info->protect[sect] == 0) { /* not protected */
./board/cpu87/flash.c:				addr = (vu_char *)(info->start[sect]);
./board/cpu87/flash.c:		addr = (vu_char *)(info->start[l_sect]);
./board/cpu87/flash.c:		addr = (volatile unsigned char *)info->start[0];
./board/cpu87/flash.c:				(volatile unsigned long *) info->start[sect];
./board/cpu87/flash.c:			if (info->protect[sect] == 0) {
./board/cpu87/flash.c:	if (info->flash_id >> 16 == 0x1) {
./board/cpu87/flash.c:	vu_char *addr = (vu_char *)(info->start[0]);
./board/g2000/strataflash.c:	return ((uchar *)(info->start[sect] + (offset * info->portwidth)));
./board/g2000/strataflash.c:	return (cp[info->portwidth - 1]);
./board/g2000/strataflash.c:    return ((addr[(2*info->portwidth) - 1] << 8) | addr[info->portwidth - 1]);
./board/g2000/strataflash.c:    return ( (addr[(2*info->portwidth) - 1] << 24 ) | (addr[(info->portwidth) -1] << 16) |
./board/g2000/strataflash.c:	    (addr[(4*info->portwidth) - 1] << 8) | addr[(3*info->portwidth) - 1]);
./board/g2000/strataflash.c:	if( info->flash_id != FLASH_MAN_CFI) {
./board/g2000/strataflash.c:		if (info->protect[sect]) {
./board/g2000/strataflash.c:		if (info->protect[sect] == 0) { /* not protected */
./board/g2000/strataflash.c:			if(flash_full_status_check(info, sect, info->erase_blk_tout, "erase")) {
./board/g2000/strataflash.c:	if (info->flash_id != FLASH_MAN_CFI) {
./board/g2000/strataflash.c:	       (info->portwidth	 << 3 ), (info->chipwidth  << 3 ));
./board/g2000/strataflash.c:		info->size >> 20, info->sector_count);
./board/g2000/strataflash.c:	       info->erase_blk_tout, info->write_tout, info->buffer_write_tout, info->buffer_size);
./board/g2000/strataflash.c:	for (i=0; i<info->sector_count; ++i) {
./board/g2000/strataflash.c:		if (i != (info->sector_count-1))
./board/g2000/strataflash.c:		  size = info->start[i+1] - info->start[i];
./board/g2000/strataflash.c:		  size = info->start[0] + info->size - info->start[i];
./board/g2000/strataflash.c:		flash = (volatile unsigned long *)info->start[i];
./board/g2000/strataflash.c:			info->start[i],
./board/g2000/strataflash.c:			info->protect[i] ? "RO " : "   ");
./board/g2000/strataflash.c:			info->start[i],
./board/g2000/strataflash.c:			info->protect[i] ? " (RO)" : "     ");
./board/g2000/strataflash.c:	wp = (addr & ~(info->portwidth - 1));
./board/g2000/strataflash.c:		for(; (i< info->portwidth) && (cnt > 0) ; i++) {
./board/g2000/strataflash.c:		for(; (cnt == 0) && (i < info->portwidth); ++i, ++cp)
./board/g2000/strataflash.c:	while(cnt >= info->portwidth) {
./board/g2000/strataflash.c:		i = info->buffer_size > cnt? cnt: info->buffer_size;
./board/g2000/strataflash.c:	while(cnt >= info->portwidth) {
./board/g2000/strataflash.c:		for(i = 0; i < info->portwidth; i++) {
./board/g2000/strataflash.c:		wp += info->portwidth;
./board/g2000/strataflash.c:		cnt -= info->portwidth;
./board/g2000/strataflash.c:	for (i=0, cp=wp; (i<info->portwidth) && (cnt>0); ++i, ++cp) {
./board/g2000/strataflash.c:	for (; i<info->portwidth; ++i, ++cp) {
./board/g2000/strataflash.c:	if((retcode = flash_full_status_check(info, sector, info->erase_blk_tout,
./board/g2000/strataflash.c:		info->protect[sector] = prot;
./board/g2000/strataflash.c:			for(i = 0 ; i<info->sector_count; i++) {
./board/g2000/strataflash.c:				if(info->protect[i])
./board/g2000/strataflash.c:		if (get_timer(start) > info->erase_blk_tout) {
./board/g2000/strataflash.c:			printf("Flash %s timeout at address %lx\n", prompt, info->start[sector]);
./board/g2000/strataflash.c:		printf("Flash %s error at address %lx\n", prompt,info->start[sector]);
./board/g2000/strataflash.c:	switch(info->portwidth) {
./board/g2000/strataflash.c:	for(i=0; i< info->portwidth; i++)
./board/g2000/strataflash.c:		*cp++ = ((i+1) % info->chipwidth) ? '\0':cmd;
./board/g2000/strataflash.c:	switch(info->portwidth) {
./board/g2000/strataflash.c:	switch(info->portwidth) {
./board/g2000/strataflash.c:	switch(info->portwidth) {
./board/g2000/strataflash.c:	for(info->portwidth=FLASH_CFI_8BIT; info->portwidth <= FLASH_CFI_32BIT;
./board/g2000/strataflash.c:	    info->portwidth <<= 1) {
./board/g2000/strataflash.c:		for(info->chipwidth =FLASH_CFI_BY8;
./board/g2000/strataflash.c:		    info->chipwidth <= info->portwidth;
./board/g2000/strataflash.c:		    info->chipwidth <<= 1) {
./board/g2000/strataflash.c:	info->start[0] = base;
./board/g2000/strataflash.c:		printf("portwidth=%d chipwidth=%d\n", info->portwidth, info->chipwidth); /* test-only */
./board/g2000/strataflash.c:		size_ratio = info->portwidth / info->chipwidth;
./board/g2000/strataflash.c:				info->start[sect_cnt] = sector;
./board/g2000/strataflash.c:				info->protect[sect_cnt] = flash_isset(info, sect_cnt, FLASH_OFFSET_PROTECT, FLASH_STATUS_PROTECT);
./board/g2000/strataflash.c:		info->sector_count = sect_cnt;
./board/g2000/strataflash.c:		info->size = (1 << flash_read_uchar(info, FLASH_OFFSET_SIZE)) * size_ratio;
./board/g2000/strataflash.c:		info->buffer_size = (1 << flash_read_ushort(info, 0, FLASH_OFFSET_BUFFER_SIZE));
./board/g2000/strataflash.c:		info->erase_blk_tout = (tmp * (1 << flash_read_uchar(info, FLASH_OFFSET_EMAX_TOUT)));
./board/g2000/strataflash.c:		info->buffer_write_tout = (tmp * (1 << flash_read_uchar(info, FLASH_OFFSET_WBMAX_TOUT)));
./board/g2000/strataflash.c:		info->write_tout = (tmp * (1 << flash_read_uchar(info, FLASH_OFFSET_WMAX_TOUT)))/ 1000;
./board/g2000/strataflash.c:		info->flash_id = FLASH_MAN_CFI;
./board/g2000/strataflash.c:	return(info->size);
./board/g2000/strataflash.c:	switch(info->portwidth) {
./board/g2000/strataflash.c:	switch(info->portwidth) {
./board/g2000/strataflash.c:	return flash_full_status_check(info, 0, info->write_tout, "write");
./board/g2000/strataflash.c:	for(sector = info->sector_count - 1; sector >= 0; sector--) {
./board/g2000/strataflash.c:		if(addr >= info->start[sector])
./board/g2000/strataflash.c:	if((retcode = flash_status_check(info, sector, info->buffer_write_tout,
./board/g2000/strataflash.c:		switch(info->portwidth) {
./board/g2000/strataflash.c:			switch(info->portwidth) {
./board/g2000/strataflash.c:		retcode = flash_full_status_check(info, sector, info->buffer_write_tout,
./board/gw8260/flash.c:    if (info->flash_id == FLASH_UNKNOWN) {
./board/gw8260/flash.c:    switch ((info->flash_id >> 16) & 0xff) {
./board/gw8260/flash.c:    switch (info->flash_id & FLASH_TYPEMASK) {
./board/gw8260/flash.c:	    info->size >> 20, info->sector_count);
./board/gw8260/flash.c:    for (i=0; i<info->sector_count; ++i) {
./board/gw8260/flash.c:		info->start[i],
./board/gw8260/flash.c:		info->protect[i] ? " (RO)" : "	   "
./board/gw8260/flash.c:	info->size = 0;
./board/gw8260/flash.c:	info->flash_id	   = (vendor & 0xff) << 16 | AMD_ID_F080B;
./board/gw8260/flash.c:	info->sector_count = 16;
./board/gw8260/flash.c:	info->size	   = 4 * info->sector_count * 64*1024;
./board/gw8260/flash.c:	info->flash_id	   = (vendor & 0xff) << 16 | AMD_ID_F016D;
./board/gw8260/flash.c:	info->sector_count = 32;
./board/gw8260/flash.c:	info->size	   = 4 * info->sector_count * 64*1024;
./board/gw8260/flash.c:	info->size = 0;
./board/gw8260/flash.c:    /*printf("sector count = %08x\n", info->sector_count); */
./board/gw8260/flash.c:    for (i = 0; i < info->sector_count; i++) {
./board/gw8260/flash.c:	info->start[i] = base + i * (info->size / info->sector_count);
./board/gw8260/flash.c:	addr = (volatile unsigned long *)(info->start[i]);
./board/gw8260/flash.c:	info->protect[i] = addr[2] & 1;
./board/gw8260/flash.c:    addr = (vu_long *)info->start[0];
./board/gw8260/flash.c:    /*printf("size = %08x\n", info->size); */
./board/gw8260/flash.c:    return info->size;
./board/gw8260/flash.c:    vu_long *addr = (vu_long*)(info->start[0]);
./board/gw8260/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/gw8260/flash.c:	if (info->protect[sect]) {
./board/gw8260/flash.c:	if (info->protect[sect] == 0) { /* not protected */
./board/gw8260/flash.c:	    addr = (vu_long*)(info->start[sect]);
./board/gw8260/flash.c:    addr = (vu_long*)(info->start[l_sect]);
./board/gw8260/flash.c:    addr = (volatile unsigned long *)info->start[0];
./board/gw8260/flash.c:    vu_long *addr = (vu_long*)(info->start[0]);
./board/ppmc8260/strataflash.c:	return ((uchar *)(info->start[sect] + (offset * info->portwidth)));
./board/ppmc8260/strataflash.c:	return (cp[info->portwidth - 1]);
./board/ppmc8260/strataflash.c:    return ((addr[(2*info->portwidth) - 1] << 8) | addr[info->portwidth - 1]);
./board/ppmc8260/strataflash.c:    return ( (addr[(2*info->portwidth) - 1] << 24 ) | (addr[(info->portwidth) -1] << 16) |
./board/ppmc8260/strataflash.c:	    (addr[(4*info->portwidth) - 1] << 8) | addr[(3*info->portwidth) - 1]);
./board/ppmc8260/strataflash.c:	if( info->flash_id != FLASH_MAN_CFI) {
./board/ppmc8260/strataflash.c:		if (info->protect[sect]) {
./board/ppmc8260/strataflash.c:		if (info->protect[sect] == 0) { /* not protected */
./board/ppmc8260/strataflash.c:			if(flash_full_status_check(info, sect, info->erase_blk_tout, "erase")) {
./board/ppmc8260/strataflash.c:	if (info->flash_id != FLASH_MAN_CFI) {
./board/ppmc8260/strataflash.c:	       (info->portwidth	 << 3 ), (info->chipwidth  << 3 ));
./board/ppmc8260/strataflash.c:		info->size >> 20, info->sector_count);
./board/ppmc8260/strataflash.c:	       info->erase_blk_tout, info->write_tout, info->buffer_write_tout, info->buffer_size);
./board/ppmc8260/strataflash.c:	for (i=0; i<info->sector_count; ++i) {
./board/ppmc8260/strataflash.c:			info->start[i],
./board/ppmc8260/strataflash.c:			info->protect[i] ? " (RO)" : " "
./board/ppmc8260/strataflash.c:	wp = (addr & ~(info->portwidth - 1));
./board/ppmc8260/strataflash.c:		for(; (i< info->portwidth) && (cnt > 0) ; i++) {
./board/ppmc8260/strataflash.c:		for(; (cnt == 0) && (i < info->portwidth); ++i, ++cp)
./board/ppmc8260/strataflash.c:	while(cnt >= info->portwidth) {
./board/ppmc8260/strataflash.c:		i = info->buffer_size > cnt? cnt: info->buffer_size;
./board/ppmc8260/strataflash.c:	while(cnt >= info->portwidth) {
./board/ppmc8260/strataflash.c:		for(i = 0; i < info->portwidth; i++) {
./board/ppmc8260/strataflash.c:		wp += info->portwidth;
./board/ppmc8260/strataflash.c:		cnt -= info->portwidth;
./board/ppmc8260/strataflash.c:	for (i=0, cp=wp; (i<info->portwidth) && (cnt>0); ++i, ++cp) {
./board/ppmc8260/strataflash.c:	for (; i<info->portwidth; ++i, ++cp) {
./board/ppmc8260/strataflash.c:	if((retcode = flash_full_status_check(info, sector, info->erase_blk_tout,
./board/ppmc8260/strataflash.c:		info->protect[sector] = prot;
./board/ppmc8260/strataflash.c:			for(i = 0 ; i<info->sector_count; i++) {
./board/ppmc8260/strataflash.c:				if(info->protect[i])
./board/ppmc8260/strataflash.c:		if (get_timer(start) > info->erase_blk_tout) {
./board/ppmc8260/strataflash.c:			printf("Flash %s timeout at address %lx\n", prompt, info->start[sector]);
./board/ppmc8260/strataflash.c:		printf("Flash %s error at address %lx\n", prompt,info->start[sector]);
./board/ppmc8260/strataflash.c:	switch(info->portwidth) {
./board/ppmc8260/strataflash.c:	for(i=0; i< info->portwidth; i++)
./board/ppmc8260/strataflash.c:		*cp++ = ((i+1) % info->chipwidth) ? '\0':cmd;
./board/ppmc8260/strataflash.c:	switch(info->portwidth) {
./board/ppmc8260/strataflash.c:	switch(info->portwidth) {
./board/ppmc8260/strataflash.c:	switch(info->portwidth) {
./board/ppmc8260/strataflash.c:	for(info->portwidth=FLASH_CFI_8BIT; info->portwidth <= FLASH_CFI_32BIT;
./board/ppmc8260/strataflash.c:	    info->portwidth <<= 1) {
./board/ppmc8260/strataflash.c:		for(info->chipwidth =FLASH_CFI_BY8;
./board/ppmc8260/strataflash.c:		    info->chipwidth <= info->portwidth;
./board/ppmc8260/strataflash.c:		    info->chipwidth <<= 1) {
./board/ppmc8260/strataflash.c:	info->start[0] = base;
./board/ppmc8260/strataflash.c:		size_ratio = info->portwidth / info->chipwidth;
./board/ppmc8260/strataflash.c:				info->start[sect_cnt] = sector;
./board/ppmc8260/strataflash.c:				info->protect[sect_cnt] = flash_isset(info, sect_cnt, FLASH_OFFSET_PROTECT, FLASH_STATUS_PROTECT);
./board/ppmc8260/strataflash.c:		info->sector_count = sect_cnt;
./board/ppmc8260/strataflash.c:		info->size = (1 << flash_read_uchar(info, FLASH_OFFSET_SIZE)) * size_ratio;
./board/ppmc8260/strataflash.c:		info->buffer_size = (1 << flash_read_ushort(info, 0, FLASH_OFFSET_BUFFER_SIZE));
./board/ppmc8260/strataflash.c:		info->erase_blk_tout = (tmp * (1 << flash_read_uchar(info, FLASH_OFFSET_EMAX_TOUT)));
./board/ppmc8260/strataflash.c:		info->buffer_write_tout = (tmp * (1 << flash_read_uchar(info, FLASH_OFFSET_WBMAX_TOUT)));
./board/ppmc8260/strataflash.c:		info->write_tout = (tmp * (1 << flash_read_uchar(info, FLASH_OFFSET_WMAX_TOUT)))/ 1000;
./board/ppmc8260/strataflash.c:		info->flash_id = FLASH_MAN_CFI;
./board/ppmc8260/strataflash.c:	return(info->size);
./board/ppmc8260/strataflash.c:	switch(info->portwidth) {
./board/ppmc8260/strataflash.c:	switch(info->portwidth) {
./board/ppmc8260/strataflash.c:	return flash_full_status_check(info, 0, info->write_tout, "write");
./board/ppmc8260/strataflash.c:	for(sector = info->sector_count - 1; sector >= 0; sector--) {
./board/ppmc8260/strataflash.c:		if(addr >= info->start[sector])
./board/ppmc8260/strataflash.c:	if((retcode = flash_status_check(info, sector, info->buffer_write_tout,
./board/ppmc8260/strataflash.c:		switch(info->portwidth) {
./board/ppmc8260/strataflash.c:			switch(info->portwidth) {
./board/ppmc8260/strataflash.c:		retcode = flash_full_status_check(info, sector, info->buffer_write_tout,
./board/rsdproto/flash.c:    if (info->flash_id == FLASH_UNKNOWN) {
./board/rsdproto/flash.c:    switch (info->flash_id >> 16) {
./board/rsdproto/flash.c:    switch (info->flash_id & FLASH_TYPEMASK) {
./board/rsdproto/flash.c:			info->size >> 20, info->sector_count);
./board/rsdproto/flash.c:    for (i=0; i<info->sector_count; ++i) {
./board/rsdproto/flash.c:				info->start[i],
./board/rsdproto/flash.c:				info->protect[i] ? " (RO)" : "     "
./board/rsdproto/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/rsdproto/flash.c:		if (info->protect[sect]) {
./board/rsdproto/flash.c:	f_addr	= (unsigned long long *)info->start[0];
./board/rsdproto/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/rsdproto/flash.c:			  (unsigned long long *)(info->start[sect]);
./board/rsdproto/flash.c:			  (unsigned long long *)(info->start[l_sect]);
./board/rsdproto/flash.c:	f_addr	= (unsigned long long *)info->start[0];
./board/rsdproto/flash.c:			f_addr	= (unsigned long long *)info->start[0];
./board/cradle/flash.c:		switch (info->flash_id & FLASH_VENDMASK) {
./board/cradle/flash.c:		switch (info->flash_id & FLASH_TYPEMASK) {
./board/cradle/flash.c:			info->size >> 20, info->sector_count);
./board/cradle/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/cradle/flash.c:			printf (" %08lX%s", info->start[i],
./board/cradle/flash.c:				info->protect[i] ? " (RO)" : "     ");
./board/cradle/flash.c:	if (info->flash_id == FLASH_UNKNOWN)
./board/cradle/flash.c:	if ((info->flash_id & FLASH_VENDMASK) !=
./board/cradle/flash.c:		if (info->protect[sect]) {
./board/cradle/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/cradle/flash.c:			vu_short *addr = (vu_short *) (info->start[sect]);
./board/eltec/elppc/flash.c:    if (info->flash_id == FLASH_UNKNOWN) {
./board/eltec/elppc/flash.c:    if (info->flash_id == FLASH_UNKNOWN) {
./board/eltec/elppc/flash.c:    switch (info->flash_id & FLASH_VENDMASK) {
./board/eltec/elppc/flash.c:    switch (info->flash_id & FLASH_TYPEMASK) {
./board/eltec/elppc/flash.c:    if (info->size >= (1 << 20)) {
./board/eltec/elppc/flash.c:	printf ("  Size: %ld MB in %d Sectors\n", info->size >> 20, info->sector_count);
./board/eltec/elppc/flash.c:	printf ("  Size: %ld kB in %d Sectors\n", info->size >> 10, info->sector_count);
./board/eltec/elppc/flash.c:    for (i=0; i<info->sector_count; ++i) {
./board/eltec/elppc/flash.c:	if (i != (info->sector_count-1))
./board/eltec/elppc/flash.c:	    size = info->start[i+1] - info->start[i];
./board/eltec/elppc/flash.c:	    size = info->start[0] + info->size - info->start[i];
./board/eltec/elppc/flash.c:	flash = (volatile unsigned long *)info->start[i];
./board/eltec/elppc/flash.c:	    info->start[i],
./board/eltec/elppc/flash.c:	    info->protect[i] ? "RO " : "   ");
./board/eltec/elppc/flash.c:	info->flash_id = FLASH_MAN_AMD;
./board/eltec/elppc/flash.c:	info->flash_id = FLASH_UNKNOWN;
./board/eltec/elppc/flash.c:	info->sector_count = 0;
./board/eltec/elppc/flash.c:	info->size = 0;
./board/eltec/elppc/flash.c:	info->flash_id |= AMD_ID_F040B;
./board/eltec/elppc/flash.c:	info->sector_count = 8;
./board/eltec/elppc/flash.c:	info->size = 0x00080000;
./board/eltec/elppc/flash.c:	info->flash_id |= AMD_ID_F016D;
./board/eltec/elppc/flash.c:	info->sector_count = 32;
./board/eltec/elppc/flash.c:	info->size         = 0x00200000;
./board/eltec/elppc/flash.c:	info->flash_id |= AMD_ID_F032B;
./board/eltec/elppc/flash.c:	info->sector_count = 64;
./board/eltec/elppc/flash.c:	info->size         = 0x00400000;
./board/eltec/elppc/flash.c:	info->flash_id = FLASH_UNKNOWN;
./board/eltec/elppc/flash.c:    printf("flash id 0x%lx; sector count 0x%x, size 0x%lx\n", info->flash_id, info->sector_count, info->size);
./board/eltec/elppc/flash.c:    for (i = 0; i < info->sector_count; i++) {
./board/eltec/elppc/flash.c:	info->start[i] = base + i * (info->size / info->sector_count);
./board/eltec/elppc/flash.c:	caddr = (volatile unsigned char *)(info->start[i]);
./board/eltec/elppc/flash.c:	info->protect[i] = caddr[2] & 1;
./board/eltec/elppc/flash.c:    if (info->flash_id != FLASH_UNKNOWN) {
./board/eltec/elppc/flash.c:	caddr = (volatile unsigned char *)info->start[0];
./board/eltec/elppc/flash.c:    return (info->size);
./board/eltec/elppc/flash.c:    volatile FLASH_WORD_SIZE *addr = (FLASH_WORD_SIZE *)(info->start[0]);
./board/eltec/elppc/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/eltec/elppc/flash.c:    if ((info->flash_id == FLASH_UNKNOWN) ||
./board/eltec/elppc/flash.c:	(info->flash_id > FLASH_AMD_COMP)) {
./board/eltec/elppc/flash.c:	if (info->protect[sect]) {
./board/eltec/elppc/flash.c:	if (info->protect[sect] == 0) { /* not protected */
./board/eltec/elppc/flash.c:	    addr = (FLASH_WORD_SIZE *)(info->start[sect]);
./board/eltec/elppc/flash.c:	    if (info->flash_id & FLASH_MAN_SST) {
./board/eltec/elppc/flash.c:    addr = (FLASH_WORD_SIZE *)(info->start[l_sect]);
./board/eltec/elppc/flash.c:    addr = (FLASH_WORD_SIZE *)info->start[0];
./board/eltec/elppc/flash.c:	volatile FLASH_WORD_SIZE *addr2 = (FLASH_WORD_SIZE *)(info->start[0]);
./board/eltec/bab7xx/flash.c:    if (info->flash_id == FLASH_UNKNOWN) {
./board/eltec/bab7xx/flash.c:    if (info->flash_id == FLASH_UNKNOWN) {
./board/eltec/bab7xx/flash.c:    switch (info->flash_id & FLASH_VENDMASK) {
./board/eltec/bab7xx/flash.c:    switch (info->flash_id & FLASH_TYPEMASK) {
./board/eltec/bab7xx/flash.c:    if (info->size >= (1 << 20)) {
./board/eltec/bab7xx/flash.c:	printf ("  Size: %ld MB in %d Sectors\n", info->size >> 20, info->sector_count);
./board/eltec/bab7xx/flash.c:	printf ("  Size: %ld kB in %d Sectors\n", info->size >> 10, info->sector_count);
./board/eltec/bab7xx/flash.c:    for (i=0; i<info->sector_count; ++i) {
./board/eltec/bab7xx/flash.c:	if (i != (info->sector_count-1))
./board/eltec/bab7xx/flash.c:	    size = info->start[i+1] - info->start[i];
./board/eltec/bab7xx/flash.c:	    size = info->start[0] + info->size - info->start[i];
./board/eltec/bab7xx/flash.c:	flash = (volatile unsigned long *)info->start[i];
./board/eltec/bab7xx/flash.c:	    info->start[i],
./board/eltec/bab7xx/flash.c:	    info->protect[i] ? "RO " : "   ");
./board/eltec/bab7xx/flash.c:	info->flash_id = FLASH_MAN_AMD;
./board/eltec/bab7xx/flash.c:	info->flash_id = FLASH_UNKNOWN;
./board/eltec/bab7xx/flash.c:	info->sector_count = 0;
./board/eltec/bab7xx/flash.c:	info->size = 0;
./board/eltec/bab7xx/flash.c:	info->flash_id |= AMD_ID_F040B;
./board/eltec/bab7xx/flash.c:	info->sector_count = 8;
./board/eltec/bab7xx/flash.c:	info->size = 0x00080000;
./board/eltec/bab7xx/flash.c:	info->flash_id |= AMD_ID_F016D;
./board/eltec/bab7xx/flash.c:	info->sector_count = 32;
./board/eltec/bab7xx/flash.c:	info->size         = 0x00200000;
./board/eltec/bab7xx/flash.c:	info->flash_id |= AMD_ID_F032B;
./board/eltec/bab7xx/flash.c:	info->sector_count = 64;
./board/eltec/bab7xx/flash.c:	info->size         = 0x00400000;
./board/eltec/bab7xx/flash.c:	info->flash_id = FLASH_UNKNOWN;
./board/eltec/bab7xx/flash.c:    printf("flash id 0x%lx; sector count 0x%x, size 0x%lx\n", info->flash_id, info->sector_count, info->size);
./board/eltec/bab7xx/flash.c:    for (i = 0; i < info->sector_count; i++) {
./board/eltec/bab7xx/flash.c:	info->start[i] = base + i * (info->size / info->sector_count);
./board/eltec/bab7xx/flash.c:	caddr = (volatile unsigned char *)(info->start[i]);
./board/eltec/bab7xx/flash.c:	info->protect[i] = caddr[2] & 1;
./board/eltec/bab7xx/flash.c:    if (info->flash_id != FLASH_UNKNOWN) {
./board/eltec/bab7xx/flash.c:	caddr = (volatile unsigned char *)info->start[0];
./board/eltec/bab7xx/flash.c:    return (info->size);
./board/eltec/bab7xx/flash.c:    volatile FLASH_WORD_SIZE *addr = (FLASH_WORD_SIZE *)(info->start[0]);
./board/eltec/bab7xx/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/eltec/bab7xx/flash.c:    if ((info->flash_id == FLASH_UNKNOWN) ||
./board/eltec/bab7xx/flash.c:	(info->flash_id > FLASH_AMD_COMP)) {
./board/eltec/bab7xx/flash.c:	if (info->protect[sect]) {
./board/eltec/bab7xx/flash.c:	if (info->protect[sect] == 0) { /* not protected */
./board/eltec/bab7xx/flash.c:	    addr = (FLASH_WORD_SIZE *)(info->start[sect]);
./board/eltec/bab7xx/flash.c:	    if (info->flash_id & FLASH_MAN_SST) {
./board/eltec/bab7xx/flash.c:    addr = (FLASH_WORD_SIZE *)(info->start[l_sect]);
./board/eltec/bab7xx/flash.c:    addr = (FLASH_WORD_SIZE *)info->start[0];
./board/eltec/bab7xx/flash.c:	volatile FLASH_WORD_SIZE *addr2 = (FLASH_WORD_SIZE *)(info->start[0]);
./board/eltec/mhpc/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/eltec/mhpc/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/eltec/mhpc/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/eltec/mhpc/flash.c:			info->start[i] = base + (i * 0x00020000);
./board/eltec/mhpc/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/eltec/mhpc/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/eltec/mhpc/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/eltec/mhpc/flash.c:					info->flash_id & FLASH_TYPEMASK); break;
./board/eltec/mhpc/flash.c:		info->size >> 20, info->sector_count);
./board/eltec/mhpc/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/eltec/mhpc/flash.c:			info->start[i],
./board/eltec/mhpc/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/eltec/mhpc/flash.c:      info->flash_id = FLASH_MAN_INTEL;
./board/eltec/mhpc/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/eltec/mhpc/flash.c:		info->sector_count = 0;
./board/eltec/mhpc/flash.c:		info->size = 0;
./board/eltec/mhpc/flash.c:	info->flash_id += FLASH_28F640J5 ;
./board/eltec/mhpc/flash.c:	info->sector_count = 64;
./board/eltec/mhpc/flash.c:	info->size = 0x00800000;
./board/eltec/mhpc/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/eltec/mhpc/flash.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/eltec/mhpc/flash.c:			info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/eltec/mhpc/flash.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/eltec/mhpc/flash.c:	return (info->size);
./board/eltec/mhpc/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/eltec/mhpc/flash.c:	type = (info->flash_id & FLASH_VENDMASK);
./board/eltec/mhpc/flash.c:			info->flash_id);
./board/eltec/mhpc/flash.c:		if (info->protect[sect]) {
./board/eltec/mhpc/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/eltec/mhpc/flash.c:			FPWV *addr = (FPWV *)(info->start[sect]);
./board/eltec/mhpc/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/atc/flash.c:	FPWV *base = (FPWV *)(info->start[0]);
./board/atc/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL)
./board/atc/flash.c:	else if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_AMD)
./board/atc/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL
./board/atc/flash.c:	    && (info->flash_id & FLASH_BTYPE)) {
./board/atc/flash.c:			info->start[i] = base + (i * bootsect_size);
./board/atc/flash.c:		for (i = 8; i < info->sector_count; i++) {
./board/atc/flash.c:			info->start[i] = base + ((i - 7) * sect_size);
./board/atc/flash.c:	else if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_AMD
./board/atc/flash.c:		 && (info->flash_id & FLASH_TYPEMASK) == FLASH_AM640U) {
./board/atc/flash.c:		for( i = 0; i < info->sector_count; i++ )
./board/atc/flash.c:			info->start[i] = base + (i * sect_size);
./board/atc/flash.c:		if (info->start[0] <= base && base < info->start[0] + info->size)
./board/atc/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/atc/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/atc/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/atc/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/atc/flash.c:		info->size >> 20,
./board/atc/flash.c:		info->sector_count);
./board/atc/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/atc/flash.c:		printf (" %08lX%s", info->start[i],
./board/atc/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/atc/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/atc/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/atc/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/atc/flash.c:		info->sector_count = 0;
./board/atc/flash.c:		info->size = 0;
./board/atc/flash.c:	if (info->flash_id != FLASH_UNKNOWN) switch (addr[1]) {
./board/atc/flash.c:		info->flash_id += FLASH_AM640U;
./board/atc/flash.c:		info->sector_count = 128;
./board/atc/flash.c:		info->size = 0x00800000 * (sizeof(FPW)/2);
./board/atc/flash.c:		info->flash_id += FLASH_28F800C3B;
./board/atc/flash.c:		info->sector_count = 23;
./board/atc/flash.c:		info->size = 0x00100000 * (sizeof(FPW)/2);
./board/atc/flash.c:		info->flash_id += FLASH_INTEL800B;
./board/atc/flash.c:		info->sector_count = 23;
./board/atc/flash.c:		info->size = 0x00100000 * (sizeof(FPW)/2);
./board/atc/flash.c:		info->flash_id += FLASH_28F160C3B;
./board/atc/flash.c:		info->sector_count = 39;
./board/atc/flash.c:		info->size = 0x00200000 * (sizeof(FPW)/2);
./board/atc/flash.c:		info->flash_id += FLASH_INTEL160B;
./board/atc/flash.c:		info->sector_count = 39;
./board/atc/flash.c:		info->size = 0x00200000 * (sizeof(FPW)/2);
./board/atc/flash.c:		info->flash_id += FLASH_28F320C3B;
./board/atc/flash.c:		info->sector_count = 71;
./board/atc/flash.c:		info->size = 0x00400000 * (sizeof(FPW)/2);
./board/atc/flash.c:		info->flash_id += FLASH_INTEL320B;
./board/atc/flash.c:		info->sector_count = 71;
./board/atc/flash.c:		info->size = 0x00400000 * (sizeof(FPW)/2);
./board/atc/flash.c:		info->flash_id += FLASH_28F640C3B;
./board/atc/flash.c:		info->sector_count = 135;
./board/atc/flash.c:		info->size = 0x00800000 * (sizeof(FPW)/2);
./board/atc/flash.c:		info->flash_id += FLASH_INTEL640B;
./board/atc/flash.c:		info->sector_count = 135;
./board/atc/flash.c:		info->size = 0x00800000 * (sizeof(FPW)/2);
./board/atc/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/atc/flash.c:		info->sector_count = 0;
./board/atc/flash.c:		info->size = 0;
./board/atc/flash.c:	return (info->size);
./board/atc/flash.c:	int intel = (info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL;
./board/atc/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/atc/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/atc/flash.c:			info->flash_id);
./board/atc/flash.c:		if (info->protect[sect]) {
./board/atc/flash.c:		if (info->protect[sect] != 0)	/* protected, skip it */
./board/atc/flash.c:		addr = (FPWV *)(info->start[sect]);
./board/atc/flash.c:			base = (FPWV *)(info->start[0]);
./board/atc/flash.c:		switch (info->flash_id & FLASH_VENDMASK) {
./board/atc/flash.c:	base = (FPWV *)(info->start[0]);
./board/netta/flash.c:	if ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM040) {
./board/netta/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/netta/flash.c:			info->start[i] = base + (i * 0x00010000);
./board/netta/flash.c:	} else if (info->flash_id & FLASH_BTYPE) {
./board/netta/flash.c:		info->start[0] = base + 0x00000000;
./board/netta/flash.c:		info->start[1] = base + 0x00004000;
./board/netta/flash.c:		info->start[2] = base + 0x00006000;
./board/netta/flash.c:		info->start[3] = base + 0x00008000;
./board/netta/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/netta/flash.c:			info->start[i] = base + (i * 0x00010000) - 0x00030000;
./board/netta/flash.c:		i = info->sector_count - 1;
./board/netta/flash.c:		info->start[i--] = base + info->size - 0x00004000;
./board/netta/flash.c:		info->start[i--] = base + info->size - 0x00006000;
./board/netta/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/netta/flash.c:			info->start[i] = base + i * 0x00010000;
./board/netta/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/netta/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/netta/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/netta/flash.c:	printf("  Size: %ld MB in %d Sectors\n", info->size >> 20, info->sector_count);
./board/netta/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/netta/flash.c:		printf(" %08lX%s", info->start[i], info->protect[i] ? " (RO)" : "     ");
./board/netta/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/netta/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/netta/flash.c:		info->flash_id = FLASH_MAN_MX;
./board/netta/flash.c:		info->flash_id = FLASH_MAN_STM;
./board/netta/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/netta/flash.c:		info->sector_count = 0;
./board/netta/flash.c:		info->size = 0;
./board/netta/flash.c:		info->flash_id += FLASH_AM400T;
./board/netta/flash.c:		info->sector_count = 11;
./board/netta/flash.c:		info->size = 0x00080000;
./board/netta/flash.c:		info->flash_id += FLASH_AM400B;
./board/netta/flash.c:		info->sector_count = 11;
./board/netta/flash.c:		info->size = 0x00080000;
./board/netta/flash.c:		info->flash_id += FLASH_AM800T;
./board/netta/flash.c:		info->sector_count = 19;
./board/netta/flash.c:		info->size = 0x00100000;
./board/netta/flash.c:		info->flash_id += FLASH_AM800B;
./board/netta/flash.c:		info->sector_count = 19;
./board/netta/flash.c:		info->size = 0x00100000;
./board/netta/flash.c:		info->flash_id += FLASH_AM160T;
./board/netta/flash.c:		info->sector_count = 35;
./board/netta/flash.c:		info->size = 0x00200000;
./board/netta/flash.c:		info->flash_id += FLASH_AM160B;
./board/netta/flash.c:		info->sector_count = 35;
./board/netta/flash.c:		info->size = 0x00200000;
./board/netta/flash.c:		info->flash_id += FLASH_AM040;
./board/netta/flash.c:		info->sector_count = 8;
./board/netta/flash.c:		info->size = 0x00080000;
./board/netta/flash.c:		info->flash_id += FLASH_AM040;
./board/netta/flash.c:		info->sector_count = 8;
./board/netta/flash.c:		info->size = 0x00080000;
./board/netta/flash.c:		info->flash_id += FLASH_AM320T;
./board/netta/flash.c:		info->sector_count = 67;
./board/netta/flash.c:		info->size = 0x00400000;
./board/netta/flash.c:		info->flash_id += FLASH_AM320B;
./board/netta/flash.c:		info->sector_count = 67;
./board/netta/flash.c:		info->size = 0x00400000;
./board/netta/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/netta/flash.c:	if ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM040) {
./board/netta/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/netta/flash.c:			info->start[i] = base + (i * 0x00010000);
./board/netta/flash.c:	} else if (info->flash_id & FLASH_BTYPE) {
./board/netta/flash.c:		info->start[0] = base + 0x00000000;
./board/netta/flash.c:		info->start[1] = base + 0x00004000;
./board/netta/flash.c:		info->start[2] = base + 0x00006000;
./board/netta/flash.c:		info->start[3] = base + 0x00008000;
./board/netta/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/netta/flash.c:			info->start[i] = base + (i * 0x00010000) - 0x00030000;
./board/netta/flash.c:		i = info->sector_count - 1;
./board/netta/flash.c:		info->start[i--] = base + info->size - 0x00004000;
./board/netta/flash.c:		info->start[i--] = base + info->size - 0x00006000;
./board/netta/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/netta/flash.c:			info->start[i] = base + i * 0x00010000;
./board/netta/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/netta/flash.c:		caddr = (volatile unsigned char *)(info->start[i]);
./board/netta/flash.c:		info->protect[i] = caddr[2] & 1;
./board/netta/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/netta/flash.c:		caddr = (vu_char *) info->start[0];
./board/netta/flash.c:	return (info->size);
./board/netta/flash.c:	vu_char *addr = (vu_char *) (info->start[0]);
./board/netta/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/netta/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/netta/flash.c:	    (info->flash_id > FLASH_AMD_COMP)) {
./board/netta/flash.c:		printf("Can't erase unknown flash type %08lx - aborted\n", info->flash_id);
./board/netta/flash.c:		if (info->protect[sect]) {
./board/netta/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/netta/flash.c:			addr = (vu_char *) (info->start[sect]);
./board/netta/flash.c:	addr = (vu_char *) (info->start[l_sect]);
./board/netta/flash.c:	addr = (vu_char *) info->start[0];
./board/netta/flash.c:	vu_char *addr = (vu_char *) (info->start[0]);
./board/a3000/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/a3000/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/a3000/flash.c:		    for (i = 0; i < info->sector_count; i++) {
./board/a3000/flash.c:				info->start[i] = base;
./board/a3000/flash.c:		    printf ("Don't know sector ofsets for flash type 0x%lx\n", info->flash_id);
./board/a3000/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/a3000/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/a3000/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/a3000/flash.c:	if (info->size >= (1 << 20)) {
./board/a3000/flash.c:		info->size >> i,
./board/a3000/flash.c:		info->sector_count);
./board/a3000/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/a3000/flash.c:			info->start[i],
./board/a3000/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/a3000/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/a3000/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/a3000/flash.c:		info->flash_id = FLASH_MAN_SST;
./board/a3000/flash.c:		info->flash_id = FLASH_MAN_STM;
./board/a3000/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/a3000/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/a3000/flash.c:		info->sector_count = 0;
./board/a3000/flash.c:		info->size = 0;
./board/a3000/flash.c:		info->flash_id += FLASH_28F320J3A;
./board/a3000/flash.c:		info->sector_count = 32;
./board/a3000/flash.c:		info->size = 0x00400000;
./board/a3000/flash.c:		info->flash_id += FLASH_28F640J3A;
./board/a3000/flash.c:		info->sector_count = 64;
./board/a3000/flash.c:		info->size = 0x00800000;
./board/a3000/flash.c:		info->flash_id += FLASH_28F128J3A;
./board/a3000/flash.c:		info->sector_count = 128;
./board/a3000/flash.c:		info->size = 0x01000000;
./board/a3000/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/a3000/flash.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/a3000/flash.c:			info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/a3000/flash.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/a3000/flash.c:	return (info->size);
./board/a3000/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/a3000/flash.c:	if ((info->flash_id & FLASH_VENDMASK) != FLASH_MAN_INTEL) {
./board/a3000/flash.c:		if (info->protect[sect]) {
./board/a3000/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/a3000/flash.c:			vu_char *addr = (vu_char *)(info->start[sect]);
./board/a3000/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/snmc/qs850/flash.c:	large_sect_size = info->size / (info->sector_count - 8 + 1);
./board/snmc/qs850/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/snmc/qs850/flash.c:			info->start[i] = base;
./board/snmc/qs850/flash.c:		for (; i < info->sector_count; i++) {
./board/snmc/qs850/flash.c:			info->start[i] = base;
./board/snmc/qs850/flash.c:		for (i = 0; i < (info->sector_count - 8); i++) {
./board/snmc/qs850/flash.c:			info->start[i] = base;
./board/snmc/qs850/flash.c:		for (; i < info->sector_count; i++) {
./board/snmc/qs850/flash.c:			info->start[i] = base;
./board/snmc/qs850/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/snmc/qs850/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/snmc/qs850/flash.c:	if (info->flash_id & 0x0001 ) {
./board/snmc/qs850/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/snmc/qs850/flash.c:	info->size >> 20, info->sector_count);
./board/snmc/qs850/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/snmc/qs850/flash.c:		printf (" %08lX%s", info->start[i],
./board/snmc/qs850/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/snmc/qs850/flash.c:			info->flash_id = FLASH_MAN_AMD;
./board/snmc/qs850/flash.c:			info->flash_id = FLASH_MAN_FUJ;
./board/snmc/qs850/flash.c:			info->flash_id = FLASH_MAN_STM;
./board/snmc/qs850/flash.c:			info->flash_id = FLASH_MAN_SST;
./board/snmc/qs850/flash.c:			info->flash_id = FLASH_MAN_INTEL;
./board/snmc/qs850/flash.c:			info->flash_id = FLASH_UNKNOWN;
./board/snmc/qs850/flash.c:			info->sector_count = 0;
./board/snmc/qs850/flash.c:			info->size = 0;
./board/snmc/qs850/flash.c:			info->flash_id += FLASH_AM160T;
./board/snmc/qs850/flash.c:			info->sector_count = 35;
./board/snmc/qs850/flash.c:			info->size = 0x00400000;
./board/snmc/qs850/flash.c:			info->flash_id += FLASH_AM160B;
./board/snmc/qs850/flash.c:			info->sector_count = 35;
./board/snmc/qs850/flash.c:			info->size = 0x00400000;
./board/snmc/qs850/flash.c:			info->flash_id += FLASH_AMDL163T;
./board/snmc/qs850/flash.c:			info->sector_count = 39;
./board/snmc/qs850/flash.c:			info->size = 0x00400000;
./board/snmc/qs850/flash.c:			info->flash_id += FLASH_AMDL163B;
./board/snmc/qs850/flash.c:			info->sector_count = 39;
./board/snmc/qs850/flash.c:			info->size = 0x00400000;
./board/snmc/qs850/flash.c:			info->flash_id += FLASH_AMDL323T;
./board/snmc/qs850/flash.c:			info->sector_count = 71;
./board/snmc/qs850/flash.c:			info->size = 0x00800000;
./board/snmc/qs850/flash.c:			info->flash_id += FLASH_AMDL323B;
./board/snmc/qs850/flash.c:			info->sector_count = 71;
./board/snmc/qs850/flash.c:			info->size = 0x00800000;
./board/snmc/qs850/flash.c:			info->flash_id += FLASH_AMDL322T;
./board/snmc/qs850/flash.c:			info->sector_count = 71;
./board/snmc/qs850/flash.c:			info->size = 0x00800000;
./board/snmc/qs850/flash.c:			info->flash_id = FLASH_UNKNOWN;
./board/snmc/qs850/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/snmc/qs850/flash.c:		addr = (volatile FLASH_WORD_SIZE *)(info->start[i]);
./board/snmc/qs850/flash.c:		info->protect[i] = addr[2] & 1;
./board/snmc/qs850/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/snmc/qs850/flash.c:		addr = (volatile FLASH_WORD_SIZE *)info->start[0];
./board/snmc/qs850/flash.c:	return (info->size);
./board/snmc/qs850/flash.c:	volatile FLASH_WORD_SIZE *addr=(volatile FLASH_WORD_SIZE*)(info->start[0]);
./board/snmc/qs850/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/snmc/qs850/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/snmc/qs850/flash.c:		(info->flash_id > FLASH_AMD_COMP) ) {
./board/snmc/qs850/flash.c:		if (info->protect[sect]) {
./board/snmc/qs850/flash.c:		if (info->protect[sect] == 0) { /* not protected */
./board/snmc/qs850/flash.c:			addr = (volatile FLASH_WORD_SIZE *)(info->start[sect]);
./board/snmc/qs850/flash.c:	addr = (volatile FLASH_WORD_SIZE*)(info->start[l_sect]);
./board/snmc/qs850/flash.c:	addr = (volatile FLASH_WORD_SIZE *)info->start[0];
./board/snmc/qs850/flash.c:	vu_long *addr = (vu_long*)(info->start[0]);
./board/snmc/qs860t/flash.c:	if ((info->flash_id & FLASH_TYPEMASK) == INTEL_ID_28F320J3A ||
./board/snmc/qs860t/flash.c:		(info->flash_id & FLASH_TYPEMASK) == INTEL_ID_28F640J3A ||
./board/snmc/qs860t/flash.c:		(info->flash_id & FLASH_TYPEMASK) == INTEL_ID_28F128J3A) {
./board/snmc/qs860t/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/snmc/qs860t/flash.c:			info->start[i] = base + (i * info->size/info->sector_count);
./board/snmc/qs860t/flash.c:	else if (info->flash_id & FLASH_BTYPE) {
./board/snmc/qs860t/flash.c:		if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/snmc/qs860t/flash.c:			info->start[0] = base + 0x00000000;
./board/snmc/qs860t/flash.c:			info->start[1] = base + 0x00004000;
./board/snmc/qs860t/flash.c:			info->start[2] = base + 0x00008000;
./board/snmc/qs860t/flash.c:			info->start[3] = base + 0x0000C000;
./board/snmc/qs860t/flash.c:			info->start[4] = base + 0x00010000;
./board/snmc/qs860t/flash.c:			info->start[5] = base + 0x00014000;
./board/snmc/qs860t/flash.c:			info->start[6] = base + 0x00018000;
./board/snmc/qs860t/flash.c:			info->start[7] = base + 0x0001C000;
./board/snmc/qs860t/flash.c:			for (i = 8; i < info->sector_count; i++) {
./board/snmc/qs860t/flash.c:				info->start[i] = base + (i * 0x00020000) - 0x000E0000;
./board/snmc/qs860t/flash.c:			info->start[0] = base + 0x00000000;
./board/snmc/qs860t/flash.c:			info->start[1] = base + 0x00008000;
./board/snmc/qs860t/flash.c:			info->start[2] = base + 0x0000C000;
./board/snmc/qs860t/flash.c:			info->start[3] = base + 0x00010000;
./board/snmc/qs860t/flash.c:			for (i = 4; i < info->sector_count; i++) {
./board/snmc/qs860t/flash.c:				info->start[i] = base + (i * 0x00020000) - 0x00060000;
./board/snmc/qs860t/flash.c:			info->start[0] = base + 0x00000000;
./board/snmc/qs860t/flash.c:			info->start[1] = base + 0x00002000;
./board/snmc/qs860t/flash.c:			info->start[2] = base + 0x00004000;
./board/snmc/qs860t/flash.c:			info->start[3] = base + 0x00006000;
./board/snmc/qs860t/flash.c:			info->start[4] = base + 0x00008000;
./board/snmc/qs860t/flash.c:			info->start[5] = base + 0x0000A000;
./board/snmc/qs860t/flash.c:			info->start[6] = base + 0x0000C000;
./board/snmc/qs860t/flash.c:			info->start[7] = base + 0x0000E000;
./board/snmc/qs860t/flash.c:			for (i = 8; i < info->sector_count; i++) {
./board/snmc/qs860t/flash.c:				info->start[i] = base + (i * 0x00010000) - 0x00070000;
./board/snmc/qs860t/flash.c:			info->start[0] = base + 0x00000000;
./board/snmc/qs860t/flash.c:			info->start[1] = base + 0x00004000;
./board/snmc/qs860t/flash.c:			info->start[2] = base + 0x00006000;
./board/snmc/qs860t/flash.c:			info->start[3] = base + 0x00008000;
./board/snmc/qs860t/flash.c:			for (i = 4; i < info->sector_count; i++) {
./board/snmc/qs860t/flash.c:				info->start[i] = base + (i * 0x00010000) - 0x00030000;
./board/snmc/qs860t/flash.c:		i = info->sector_count - 1;
./board/snmc/qs860t/flash.c:		if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/snmc/qs860t/flash.c:			info->start[i--] = base + info->size - 0x00004000;
./board/snmc/qs860t/flash.c:			info->start[i--] = base + info->size - 0x00008000;
./board/snmc/qs860t/flash.c:			info->start[i--] = base + info->size - 0x0000C000;
./board/snmc/qs860t/flash.c:			info->start[i--] = base + info->size - 0x00010000;
./board/snmc/qs860t/flash.c:			info->start[i--] = base + info->size - 0x00014000;
./board/snmc/qs860t/flash.c:			info->start[i--] = base + info->size - 0x00018000;
./board/snmc/qs860t/flash.c:			info->start[i--] = base + info->size - 0x0001C000;
./board/snmc/qs860t/flash.c:				info->start[i] = base + i * 0x00020000;
./board/snmc/qs860t/flash.c:			info->start[i--] = base + info->size - 0x00008000;
./board/snmc/qs860t/flash.c:			info->start[i--] = base + info->size - 0x0000C000;
./board/snmc/qs860t/flash.c:			info->start[i--] = base + info->size - 0x00010000;
./board/snmc/qs860t/flash.c:				info->start[i] = base + i * 0x00020000;
./board/snmc/qs860t/flash.c:			info->start[i--] = base + info->size - 0x00002000;
./board/snmc/qs860t/flash.c:			info->start[i--] = base + info->size - 0x00004000;
./board/snmc/qs860t/flash.c:			info->start[i--] = base + info->size - 0x00006000;
./board/snmc/qs860t/flash.c:			info->start[i--] = base + info->size - 0x00008000;
./board/snmc/qs860t/flash.c:			info->start[i--] = base + info->size - 0x0000A000;
./board/snmc/qs860t/flash.c:			info->start[i--] = base + info->size - 0x0000C000;
./board/snmc/qs860t/flash.c:			info->start[i--] = base + info->size - 0x0000E000;
./board/snmc/qs860t/flash.c:				info->start[i] = base + i * 0x00010000;
./board/snmc/qs860t/flash.c:			info->start[i--] = base + info->size - 0x00004000;
./board/snmc/qs860t/flash.c:			info->start[i--] = base + info->size - 0x00006000;
./board/snmc/qs860t/flash.c:			info->start[i--] = base + info->size - 0x00008000;
./board/snmc/qs860t/flash.c:				info->start[i] = base + i * 0x00010000;
./board/snmc/qs860t/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/snmc/qs860t/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/snmc/qs860t/flash.c:	if (info->flash_id & 0x0001 ) {
./board/snmc/qs860t/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/snmc/qs860t/flash.c:		info->size >> 20, info->sector_count);
./board/snmc/qs860t/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/snmc/qs860t/flash.c:			info->start[i],
./board/snmc/qs860t/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/snmc/qs860t/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/snmc/qs860t/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/snmc/qs860t/flash.c:		info->flash_id = FLASH_MAN_STM;
./board/snmc/qs860t/flash.c:		info->flash_id = FLASH_MAN_SST;
./board/snmc/qs860t/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/snmc/qs860t/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/snmc/qs860t/flash.c:		info->sector_count = 0;
./board/snmc/qs860t/flash.c:		info->size = 0;
./board/snmc/qs860t/flash.c:		info->flash_id += FLASH_AM400T;
./board/snmc/qs860t/flash.c:		info->sector_count = 11;
./board/snmc/qs860t/flash.c:		info->size = 0x00100000;
./board/snmc/qs860t/flash.c:		info->flash_id += FLASH_AM400B;
./board/snmc/qs860t/flash.c:		info->sector_count = 11;
./board/snmc/qs860t/flash.c:		info->size = 0x00100000;
./board/snmc/qs860t/flash.c:		info->flash_id += FLASH_AM800T;
./board/snmc/qs860t/flash.c:		info->sector_count = 19;
./board/snmc/qs860t/flash.c:		info->size = 0x00200000;
./board/snmc/qs860t/flash.c:		info->flash_id += FLASH_AM800B;
./board/snmc/qs860t/flash.c:		info->sector_count = 19;
./board/snmc/qs860t/flash.c:		info->size = 0x00200000;
./board/snmc/qs860t/flash.c:		info->flash_id += FLASH_AM160T;
./board/snmc/qs860t/flash.c:		info->sector_count = 35;
./board/snmc/qs860t/flash.c:		info->size = 0x00400000;
./board/snmc/qs860t/flash.c:		info->flash_id += FLASH_AM160B;
./board/snmc/qs860t/flash.c:		info->sector_count = 35;
./board/snmc/qs860t/flash.c:		info->size = 0x00400000;
./board/snmc/qs860t/flash.c:		info->flash_id += FLASH_AM320T;
./board/snmc/qs860t/flash.c:		info->sector_count = 67;
./board/snmc/qs860t/flash.c:		info->size = 0x00800000;
./board/snmc/qs860t/flash.c:		info->flash_id += FLASH_AM320B;
./board/snmc/qs860t/flash.c:		info->sector_count = 67;
./board/snmc/qs860t/flash.c:		info->size = 0x00800000;
./board/snmc/qs860t/flash.c:		info->flash_id += FLASH_AMDL322T;
./board/snmc/qs860t/flash.c:		info->sector_count = 71;
./board/snmc/qs860t/flash.c:		info->size = 0x00800000;
./board/snmc/qs860t/flash.c:		info->flash_id += FLASH_INTEL800T;
./board/snmc/qs860t/flash.c:		info->sector_count = 23;
./board/snmc/qs860t/flash.c:		info->size = 0x00200000;
./board/snmc/qs860t/flash.c:		info->flash_id += FLASH_INTEL800B;
./board/snmc/qs860t/flash.c:		info->sector_count = 23;
./board/snmc/qs860t/flash.c:		info->size = 0x00200000;
./board/snmc/qs860t/flash.c:		info->flash_id += FLASH_INTEL160T;
./board/snmc/qs860t/flash.c:		info->sector_count = 39;
./board/snmc/qs860t/flash.c:		info->size = 0x00400000;
./board/snmc/qs860t/flash.c:		info->flash_id += FLASH_INTEL160B;
./board/snmc/qs860t/flash.c:		info->sector_count = 39;
./board/snmc/qs860t/flash.c:		info->size = 0x00400000;
./board/snmc/qs860t/flash.c:		info->flash_id += FLASH_INTEL320T;
./board/snmc/qs860t/flash.c:		info->sector_count = 71;
./board/snmc/qs860t/flash.c:		info->size = 0x00800000;
./board/snmc/qs860t/flash.c:		info->flash_id += FLASH_AM320B;
./board/snmc/qs860t/flash.c:		info->sector_count = 71;
./board/snmc/qs860t/flash.c:		info->size = 0x00800000;
./board/snmc/qs860t/flash.c:		info->flash_id += FLASH_INTEL320T;
./board/snmc/qs860t/flash.c:		info->sector_count = 135;
./board/snmc/qs860t/flash.c:		info->size = 0x01000000;
./board/snmc/qs860t/flash.c:		info->flash_id += FLASH_AM320B;
./board/snmc/qs860t/flash.c:		info->sector_count = 135;
./board/snmc/qs860t/flash.c:		info->size = 0x01000000;
./board/snmc/qs860t/flash.c:		info->flash_id += FLASH_28F320J3A;
./board/snmc/qs860t/flash.c:		info->sector_count = 32;
./board/snmc/qs860t/flash.c:		info->size = 0x00400000;
./board/snmc/qs860t/flash.c:		info->flash_id += FLASH_28F640J3A;
./board/snmc/qs860t/flash.c:		info->sector_count = 64;
./board/snmc/qs860t/flash.c:		info->size = 0x00800000;
./board/snmc/qs860t/flash.c:		info->flash_id += FLASH_28F128J3A;
./board/snmc/qs860t/flash.c:		info->sector_count = 128;
./board/snmc/qs860t/flash.c:		info->size = 0x01000000;
./board/snmc/qs860t/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/snmc/qs860t/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/snmc/qs860t/flash.c:		addr = (volatile FLASH_WORD_SIZE *)(info->start[i]);
./board/snmc/qs860t/flash.c:		info->protect[i] = addr[2] & 1;
./board/snmc/qs860t/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/snmc/qs860t/flash.c:		addr = (volatile FLASH_WORD_SIZE *)info->start[0];
./board/snmc/qs860t/flash.c:		if( (info->flash_id & 0xFF00) == FLASH_MAN_INTEL){
./board/snmc/qs860t/flash.c:	return (info->size);
./board/snmc/qs860t/flash.c:		(volatile FLASH_WORD_SIZE *) (info->start[0]);
./board/snmc/qs860t/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/snmc/qs860t/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/snmc/qs860t/flash.c:	    ((info->flash_id > FLASH_AMD_COMP) &&
./board/snmc/qs860t/flash.c:	     ((info->flash_id & FLASH_VENDMASK) != FLASH_MAN_INTEL))) {
./board/snmc/qs860t/flash.c:		if (info->protect[sect]) {
./board/snmc/qs860t/flash.c:	if (info->flash_id < FLASH_AMD_COMP) {
./board/snmc/qs860t/flash.c:			if (info->protect[sect] == 0) {	/* not protected */
./board/snmc/qs860t/flash.c:				addr = (volatile FLASH_WORD_SIZE *) (info->start[sect]);
./board/snmc/qs860t/flash.c:		addr = (volatile FLASH_WORD_SIZE *) (info->start[l_sect]);
./board/snmc/qs860t/flash.c:		addr = (volatile FLASH_WORD_SIZE *) info->start[0];
./board/snmc/qs860t/flash.c:			if (info->protect[sect] == 0) {	/* not protected */
./board/snmc/qs860t/flash.c:				addr = (vu_long *) (info->start[sect]);
./board/snmc/qs860t/flash.c:				addr = (vu_short *) (info->start[sect]);
./board/snmc/qs860t/flash.c:			addr = (volatile FLASH_WORD_SIZE *) info->start[0];
./board/snmc/qs860t/flash.c:		if ((addr >= info->start[0]) &&
./board/snmc/qs860t/flash.c:		    (addr < (info->start[0] + info->size)) ) {
./board/snmc/qs860t/flash.c:		ulong b_end = info->start[0] + info->size;*/	/* bank end addr */
./board/snmc/qs860t/flash.c:/*		short s_end = info->sector_count - 1;
./board/snmc/qs860t/flash.c:		for (i=0; i<info->sector_count; ++i) {
./board/snmc/qs860t/flash.c:			ulong e_addr = (i == s_end) ? b_end : info->start[i + 1];
./board/snmc/qs860t/flash.c:			if ((end >= info->start[i]) && (addr < e_addr) &&
./board/snmc/qs860t/flash.c:			    (info->protect[i] != 0) ) {
./board/snmc/qs860t/flash.c:		len = info->start[0] + info->size - addr;
./board/snmc/qs860t/flash.c:	vu_long *addr = (vu_long*)(info->start[0]);
./board/snmc/qs860t/flash.c:	if(info->flash_id > FLASH_AMD_COMP) {
./board/snmc/qs860t/flash.c:	if(info->flash_id > FLASH_AMD_COMP) {
./board/snmc/qs860t/flash.c:	vu_short *addr = (vu_short*)(info->start[0]);
./board/snmc/qs860t/flash.c:	if(info->flash_id < FLASH_AMD_COMP) {
./board/snmc/qs860t/flash.c:	if(info->flash_id < FLASH_AMD_COMP) {
./board/hermes/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/hermes/flash.c:		info->start[0] = base + 0x00000000;
./board/hermes/flash.c:		info->start[1] = base + 0x00004000;
./board/hermes/flash.c:		info->start[2] = base + 0x00006000;
./board/hermes/flash.c:		info->start[3] = base + 0x00008000;
./board/hermes/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/hermes/flash.c:			info->start[i] = base + (i * 0x00010000) - 0x00030000;
./board/hermes/flash.c:		i = info->sector_count - 1;
./board/hermes/flash.c:		info->start[i--] = base + info->size - 0x00004000;
./board/hermes/flash.c:		info->start[i--] = base + info->size - 0x00006000;
./board/hermes/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/hermes/flash.c:			info->start[i] = base + i * 0x00010000;
./board/hermes/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/hermes/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/hermes/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/hermes/flash.c:		info->size >> 20, info->sector_count);
./board/hermes/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/hermes/flash.c:			info->start[i],
./board/hermes/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/hermes/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/hermes/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/hermes/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/hermes/flash.c:		info->sector_count = 0;
./board/hermes/flash.c:		info->size = 0;
./board/hermes/flash.c:		info->flash_id += FLASH_AM400T;
./board/hermes/flash.c:		info->sector_count = 11;
./board/hermes/flash.c:		info->size = 0x00080000;
./board/hermes/flash.c:		info->flash_id += FLASH_AM400B;
./board/hermes/flash.c:		info->sector_count = 11;
./board/hermes/flash.c:		info->size = 0x00080000;
./board/hermes/flash.c:		info->flash_id += FLASH_AM800T;
./board/hermes/flash.c:		info->sector_count = 19;
./board/hermes/flash.c:		info->size = 0x00100000;
./board/hermes/flash.c:		info->flash_id += FLASH_AM800B;
./board/hermes/flash.c:		info->sector_count = 19;
./board/hermes/flash.c:		info->size = 0x00100000;
./board/hermes/flash.c:		info->flash_id += FLASH_AM160T;
./board/hermes/flash.c:		info->sector_count = 35;
./board/hermes/flash.c:		info->size = 0x00200000;
./board/hermes/flash.c:		info->flash_id += FLASH_AM160B;
./board/hermes/flash.c:		info->sector_count = 35;
./board/hermes/flash.c:		info->size = 0x00200000;
./board/hermes/flash.c:		info->flash_id += FLASH_AM320T;
./board/hermes/flash.c:		info->sector_count = 67;
./board/hermes/flash.c:		info->size = 0x00400000;
./board/hermes/flash.c:		info->flash_id += FLASH_AM320B;
./board/hermes/flash.c:		info->sector_count = 67;
./board/hermes/flash.c:		info->size = 0x00400000;
./board/hermes/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/hermes/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/hermes/flash.c:		info->start[0] = base + 0x00000000;
./board/hermes/flash.c:		info->start[1] = base + 0x00004000;
./board/hermes/flash.c:		info->start[2] = base + 0x00006000;
./board/hermes/flash.c:		info->start[3] = base + 0x00008000;
./board/hermes/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/hermes/flash.c:			info->start[i] = base + (i * 0x00010000) - 0x00030000;
./board/hermes/flash.c:		i = info->sector_count - 1;
./board/hermes/flash.c:		info->start[i--] = base + info->size - 0x00004000;
./board/hermes/flash.c:		info->start[i--] = base + info->size - 0x00006000;
./board/hermes/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/hermes/flash.c:			info->start[i] = base + i * 0x00010000;
./board/hermes/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/hermes/flash.c:		caddr = (volatile unsigned char *)(info->start[i]);
./board/hermes/flash.c:		info->protect[i] = caddr[4] & 1;
./board/hermes/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/hermes/flash.c:		caddr = (vu_char *)info->start[0];
./board/hermes/flash.c:	return (info->size);
./board/hermes/flash.c:	vu_char *addr = (vu_char*)(info->start[0]);
./board/hermes/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/hermes/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/hermes/flash.c:	    (info->flash_id > FLASH_AMD_COMP)) {
./board/hermes/flash.c:			info->flash_id);
./board/hermes/flash.c:		if (info->protect[sect]) {
./board/hermes/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/hermes/flash.c:			addr = (vu_char*)(info->start[sect]);
./board/hermes/flash.c:	addr = (vu_char*)(info->start[l_sect]);
./board/hermes/flash.c:	addr = (vu_char *)info->start[0];
./board/hermes/flash.c:	vu_char *addr = (vu_char*)(info->start[0]);
./board/mbx8xx/flash.c:    if (info->flash_id == FLASH_UNKNOWN) {
./board/mbx8xx/flash.c:    switch (info->flash_id >> 16) {
./board/mbx8xx/flash.c:    switch (info->flash_id & FLASH_TYPEMASK) {
./board/mbx8xx/flash.c:	    info->size >> 20, info->sector_count);
./board/mbx8xx/flash.c:    for (i=0; i<info->sector_count; ++i) {
./board/mbx8xx/flash.c:		info->start[i],
./board/mbx8xx/flash.c:		info->protect[i] ? " (RO)" : "     "
./board/mbx8xx/flash.c:	info->flash_id     = vendor << 16 | devid;
./board/mbx8xx/flash.c:	info->sector_count = 8;
./board/mbx8xx/flash.c:	info->size         = info->sector_count * 0x10000;
./board/mbx8xx/flash.c:	info->flash_id     = vendor << 16 | devid;
./board/mbx8xx/flash.c:	info->sector_count = 16;
./board/mbx8xx/flash.c:	info->size         = 4 * info->sector_count * 0x10000;
./board/mbx8xx/flash.c:	info->flash_id     = vendor << 16 | devid;
./board/mbx8xx/flash.c:	info->sector_count = 32;
./board/mbx8xx/flash.c:	info->size         = 4 * info->sector_count * 0x10000;
./board/mbx8xx/flash.c:    for (i = 0; i < info->sector_count; i++) {
./board/mbx8xx/flash.c:	info->start[i] = base + i * (info->size / info->sector_count);
./board/mbx8xx/flash.c:	addr = (volatile unsigned long *)(info->start[i]);
./board/mbx8xx/flash.c:	info->protect[i] = addr[2] & 1;
./board/mbx8xx/flash.c:    if (info->flash_id != FLASH_UNKNOWN) {
./board/mbx8xx/flash.c:	addr = (vu_long *)info->start[0];
./board/mbx8xx/flash.c:    return (info->size);
./board/mbx8xx/flash.c:    vu_long *addr = (vu_long*)(info->start[0]);
./board/mbx8xx/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/mbx8xx/flash.c:	if (info->protect[sect]) {
./board/mbx8xx/flash.c:	if (info->protect[sect] == 0) {	/* not protected */
./board/mbx8xx/flash.c:	    addr = (vu_long*)(info->start[sect]);
./board/mbx8xx/flash.c:    addr = (vu_long*)(info->start[l_sect]);
./board/mbx8xx/flash.c:    addr = (volatile unsigned long *)info->start[0];
./board/mbx8xx/flash.c:    vu_long *addr = (vu_long*)(info->start[0]);
./board/ppmc7xx/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/ppmc7xx/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/ppmc7xx/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/ppmc7xx/flash.c:		info->sector_count = 0;
./board/ppmc7xx/flash.c:		info->size = 0;
./board/ppmc7xx/flash.c:		info->flash_id += FLASH_AM800T;
./board/ppmc7xx/flash.c:		info->sector_count = 19;
./board/ppmc7xx/flash.c:		info->size = 0x00400000;
./board/ppmc7xx/flash.c:		info->flash_id += FLASH_AM800B;
./board/ppmc7xx/flash.c:		info->sector_count = 19;
./board/ppmc7xx/flash.c:		info->size = 0x00400000;
./board/ppmc7xx/flash.c:		info->flash_id += FLASH_AM160T;
./board/ppmc7xx/flash.c:		info->sector_count = 35;
./board/ppmc7xx/flash.c:		info->size = 0x00800000;
./board/ppmc7xx/flash.c:		info->flash_id += FLASH_AM160B;
./board/ppmc7xx/flash.c:		info->sector_count = 35;
./board/ppmc7xx/flash.c:		info->size = 0x00800000;
./board/ppmc7xx/flash.c:		info->flash_id += FLASH_AMDL322T;
./board/ppmc7xx/flash.c:		info->sector_count = 71;
./board/ppmc7xx/flash.c:		info->size = 0x01000000;
./board/ppmc7xx/flash.c:		info->flash_id += FLASH_AMDL322B;
./board/ppmc7xx/flash.c:		info->sector_count = 71;
./board/ppmc7xx/flash.c:		info->size = 0x01000000;
./board/ppmc7xx/flash.c:		info->flash_id += FLASH_AMDL323T;
./board/ppmc7xx/flash.c:		info->sector_count = 71;
./board/ppmc7xx/flash.c:		info->size = 0x01000000;
./board/ppmc7xx/flash.c:		info->flash_id += FLASH_AMDL323B;
./board/ppmc7xx/flash.c:		info->sector_count = 71;
./board/ppmc7xx/flash.c:		info->size = 0x01000000;
./board/ppmc7xx/flash.c:		info->flash_id += FLASH_AM640U;
./board/ppmc7xx/flash.c:		info->sector_count = 128;
./board/ppmc7xx/flash.c:		info->size = 0x02000000;
./board/ppmc7xx/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/ppmc7xx/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/ppmc7xx/flash.c:			info->start[i] = baseaddr + (i * 0x00040000);
./board/ppmc7xx/flash.c:	} else if (info->flash_id & FLASH_BTYPE) {
./board/ppmc7xx/flash.c:		info->start[0] = baseaddr + 0x00000000;
./board/ppmc7xx/flash.c:		info->start[1] = baseaddr + 0x00010000;
./board/ppmc7xx/flash.c:		info->start[2] = baseaddr + 0x00018000;
./board/ppmc7xx/flash.c:		info->start[3] = baseaddr + 0x00020000;
./board/ppmc7xx/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/ppmc7xx/flash.c:			info->start[i] = baseaddr + (i * 0x00040000) - 0x000C0000;
./board/ppmc7xx/flash.c:		i = info->sector_count - 1;
./board/ppmc7xx/flash.c:		info->start[i--] = baseaddr + info->size - 0x00010000;
./board/ppmc7xx/flash.c:		info->start[i--] = baseaddr + info->size - 0x00018000;
./board/ppmc7xx/flash.c:		info->start[i--] = baseaddr + info->size - 0x00020000;
./board/ppmc7xx/flash.c:			info->start[i] = baseaddr + i * 0x00040000;
./board/ppmc7xx/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/ppmc7xx/flash.c:		if (*(volatile DWORD*)(info->start[i] + 16) & 0x0001000100010001LL) {
./board/ppmc7xx/flash.c:			info->protect[i] = 1;	/* D0 = 1 if protected */
./board/ppmc7xx/flash.c:			info->protect[i] = 0;
./board/ppmc7xx/flash.c:	return (info->size);
./board/ppmc7xx/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/ppmc7xx/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/ppmc7xx/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/ppmc7xx/flash.c:			info->size >> 20, info->sector_count);
./board/ppmc7xx/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/ppmc7xx/flash.c:			info->start[i],
./board/ppmc7xx/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/ppmc7xx/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/ppmc7xx/flash.c:		if (info->protect[sect])
./board/ppmc7xx/flash.c:	write_via_fpu ((DWORD*)(info->start[0] + (0x0555 << 3)), &cmd_erase[0] );
./board/ppmc7xx/flash.c:	write_via_fpu ((DWORD*)(info->start[0] + (0x02AA << 3)), &cmd_erase[1] );
./board/ppmc7xx/flash.c:	write_via_fpu ((DWORD*)(info->start[0] + (0x0555 << 3)), &cmd_erase[2] );
./board/ppmc7xx/flash.c:	write_via_fpu ((DWORD*)(info->start[0] + (0x0555 << 3)), &cmd_erase[3] );
./board/ppmc7xx/flash.c:	write_via_fpu ((DWORD*)(info->start[0] + (0x02AA << 3)), &cmd_erase[4] );
./board/ppmc7xx/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/ppmc7xx/flash.c:			write_via_fpu ((DWORD*)info->start[sect], &cmd_erase[5] );
./board/ppmc7xx/flash.c:	while ((*(volatile DWORD*)info->start[l_sect] & 0x0080008000800080LL )
./board/ppmc7xx/flash.c:	write_via_fpu ((DWORD*)(info->start[0] + (0x0555 << 3)), &cmd_write[0] );
./board/ppmc7xx/flash.c:	write_via_fpu ((DWORD*)(info->start[0] + (0x02AA << 3)), &cmd_write[1] );
./board/ppmc7xx/flash.c:	write_via_fpu ((DWORD*)(info->start[0] + (0x0555 << 3)), &cmd_write[2] );
./board/sandburst/common/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/sandburst/common/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/sandburst/common/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/sandburst/common/flash.c:		info->size >> 10, info->sector_count);
./board/sandburst/common/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/sandburst/common/flash.c:		if (i != (info->sector_count-1))
./board/sandburst/common/flash.c:			size = info->start[i+1] - info->start[i];
./board/sandburst/common/flash.c:			size = info->start[0] + info->size - info->start[i];
./board/sandburst/common/flash.c:		flash = (volatile unsigned long *)info->start[i];
./board/sandburst/common/flash.c:				info->start[i],
./board/sandburst/common/flash.c:				info->protect[i] ? "RO " : "   "
./board/sandburst/common/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/sandburst/common/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/sandburst/common/flash.c:		info->sector_count = 0;
./board/sandburst/common/flash.c:		info->size = 0;
./board/sandburst/common/flash.c:		info->flash_id += FLASH_AM040;
./board/sandburst/common/flash.c:		info->sector_count = 8;
./board/sandburst/common/flash.c:		info->size = 0x00080000; /* => 512 kb */
./board/sandburst/common/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/sandburst/common/flash.c:	if (info->flash_id  == FLASH_AM040) {
./board/sandburst/common/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/sandburst/common/flash.c:			info->start[i] = base + (i * 0x00010000);
./board/sandburst/common/flash.c:		if (info->flash_id & FLASH_BTYPE) {
./board/sandburst/common/flash.c:			info->start[0] = base + 0x00000000;
./board/sandburst/common/flash.c:			info->start[1] = base + 0x00004000;
./board/sandburst/common/flash.c:			info->start[2] = base + 0x00006000;
./board/sandburst/common/flash.c:			info->start[3] = base + 0x00008000;
./board/sandburst/common/flash.c:			for (i = 4; i < info->sector_count; i++) {
./board/sandburst/common/flash.c:				info->start[i] = base + (i * 0x00010000) - 0x00030000;
./board/sandburst/common/flash.c:			i = info->sector_count - 1;
./board/sandburst/common/flash.c:			info->start[i--] = base + info->size - 0x00004000;
./board/sandburst/common/flash.c:			info->start[i--] = base + info->size - 0x00006000;
./board/sandburst/common/flash.c:			info->start[i--] = base + info->size - 0x00008000;
./board/sandburst/common/flash.c:				info->start[i] = base + i * 0x00010000;
./board/sandburst/common/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/sandburst/common/flash.c:		addr2 = (volatile FLASH_WORD_SIZE *)(info->start[i]);
./board/sandburst/common/flash.c:		if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST)
./board/sandburst/common/flash.c:			info->protect[i] = 0;
./board/sandburst/common/flash.c:			info->protect[i] = addr2[2] & 1;
./board/sandburst/common/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/sandburst/common/flash.c:		addr2 = (FLASH_WORD_SIZE *)info->start[0];
./board/sandburst/common/flash.c:	return (info->size);
./board/sandburst/common/flash.c:	volatile FLASH_WORD_SIZE *addr = (FLASH_WORD_SIZE *)(info->start[sect]);
./board/sandburst/common/flash.c:	volatile FLASH_WORD_SIZE *addr = (FLASH_WORD_SIZE *)(info->start[0]);
./board/sandburst/common/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/sandburst/common/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/sandburst/common/flash.c:		if (info->protect[sect]) {
./board/sandburst/common/flash.c:		if (info->protect[sect] == 0) { /* not protected */
./board/sandburst/common/flash.c:			addr2 = (FLASH_WORD_SIZE *)(info->start[sect]);
./board/sandburst/common/flash.c:			if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) {
./board/sandburst/common/flash.c:	addr = (FLASH_WORD_SIZE *)info->start[0];
./board/sandburst/common/flash.c:	volatile FLASH_WORD_SIZE *addr2 = (FLASH_WORD_SIZE *) (info->start[0]);
./board/socrates/nand.c:	struct nand_chip *this = mtdinfo->priv;
./board/flagadm/flash.c:	printf("\n Attempting to set protection info with %d sectors\n", info->sector_count);
./board/flagadm/flash.c:	base = (vu_short*)info->start[idx];
./board/flagadm/flash.c:	info->flash_id = ((ulong)base[0x0]);
./board/flagadm/flash.c:	printf("Id is %x\n", (uint)(ulong)info->flash_id);
./board/flagadm/flash.c:	info->size = 1 << (sb[0x27]); /* Read flash size */
./board/flagadm/flash.c:	printf("Size is %x\n", (uint)(ulong)info->size);
./board/flagadm/flash.c:	info->sector_count = 0;
./board/flagadm/flash.c:			info->start[ info->sector_count + j] = offset;
./board/flagadm/flash.c:		info->sector_count += count;
./board/flagadm/flash.c:	if ((offset - (ulong)base) != info->size)
./board/flagadm/flash.c:				, (uint)info->size, (uint)(offset - (ulong)base) );
./board/flagadm/flash.c:	for(i = 0; i < info->sector_count; i++)
./board/flagadm/flash.c:		info->protect[i] = flash_get_protect_status(info, i);
./board/flagadm/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/flagadm/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/flagadm/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/flagadm/flash.c:		info->size >> 20, info->sector_count);
./board/flagadm/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/flagadm/flash.c:			i, info->start[i],
./board/flagadm/flash.c:			info->protect[i]!=0 ? " (RO)" : "     "
./board/flagadm/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/flagadm/flash.c:	if ((info->flash_id & FLASH_VENDMASK) != (INTEL_MANUFACT & FLASH_VENDMASK)) {
./board/flagadm/flash.c:			info->flash_id);
./board/flagadm/flash.c:		if (info->protect[sect]) {
./board/flagadm/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/flagadm/flash.c:			addr = (vu_short *)(info->start[sect]);
./board/flagadm/flash.c:	for(i = 0; i < info->sector_count; i++)
./board/flagadm/flash.c:		info->protect[i] = 0;
./board/flagadm/flash.c:	for(idx = 0; idx < info->sector_count; idx++)
./board/flagadm/flash.c:		if(info->start[idx] == offset)
./board/flagadm/flash.c:	if(idx==info->sector_count)
./board/flagadm/flash.c:		info->protect[idx] = 0;
./board/flagadm/flash.c:		for(i = 0; i < info->sector_count; i++)
./board/flagadm/flash.c:			if(info->protect[i])
./board/flagadm/flash.c:	for( i = 0; i < info->sector_count; i++)
./board/flagadm/flash.c:		info->protect[i] = flash_get_protect_status(info, i);
./board/flagadm/flash.c:	if ((info->flash_id & FLASH_VENDMASK) != (INTEL_MANUFACT & FLASH_VENDMASK)) {
./board/flagadm/flash.c:			info->flash_id);
./board/flagadm/flash.c:	addr = (vu_short *)(info->start[idx]);
./board/pm826/flash.c:	info->sector_count = info->size = 0;
./board/pm826/flash.c:	info->flash_id = FLASH_UNKNOWN;
./board/pm826/flash.c:		info->flash_id = FLASH_28F160C3B;
./board/pm826/flash.c:		info->sector_count = 39;
./board/pm826/flash.c:		info->size = 0x00800000;	/* 4 * 2 MB = 8 MB	*/
./board/pm826/flash.c:		info->flash_id = FLASH_28F160F3B;
./board/pm826/flash.c:		info->sector_count = 39;
./board/pm826/flash.c:		info->size = 0x00800000;	/* 4 * 2 MB = 8 MB      */
./board/pm826/flash.c:		info->flash_id = FLASH_28F640C3B;
./board/pm826/flash.c:		info->sector_count = 135;
./board/pm826/flash.c:		info->size = 0x02000000;	/* 16 * 2 MB = 32 MB	*/
./board/pm826/flash.c:	info->flash_id |= INTEL_MANUFACT << 16; /* set manufacturer offset */
./board/pm826/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/pm826/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/pm826/flash.c:			if (((info->flash_id & FLASH_TYPEMASK) == FLASH_28F160C3B) ||
./board/pm826/flash.c:			    ((info->flash_id & FLASH_TYPEMASK) == FLASH_28F640C3B)) {
./board/pm826/flash.c:			info->start[i] = (uint) tmp;
./board/pm826/flash.c:	memset (info->protect, 0, info->sector_count);
./board/pm826/flash.c:	return (info->size);
./board/pm826/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/pm826/flash.c:	switch ((info->flash_id >> 16) & 0xff) {
./board/pm826/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/pm826/flash.c:			info->size >> 20, info->sector_count);
./board/pm826/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/pm826/flash.c:			info->start[i],
./board/pm826/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/pm826/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/pm826/flash.c:		if (info->protect[sect])
./board/pm826/flash.c:				(volatile unsigned long *) info->start[sect];
./board/pm826/flash.c:		if (info->protect[sect] == 0) {
./board/lart/flash.c:    switch (info->flash_id & FLASH_VENDMASK)
./board/lart/flash.c:    switch (info->flash_id & FLASH_TYPEMASK)
./board/lart/flash.c:	   info->size >> 20, info->sector_count);
./board/lart/flash.c:    for (i = 0; i < info->sector_count; i++)
./board/lart/flash.c:	printf (" %08lX%s", info->start[i],
./board/lart/flash.c:		info->protect[i] ? " (RO)" : "     ");
./board/lart/flash.c:    if (info->flash_id == FLASH_UNKNOWN)
./board/lart/flash.c:    if ((info->flash_id & FLASH_VENDMASK) !=
./board/lart/flash.c:	if (info->protect[sect]) {
./board/lart/flash.c:	if (info->protect[sect] == 0)
./board/lart/flash.c:	    vu_long *addr = (vu_long *)(info->start[sect]);
./board/oxc/flash.c:    if (info->flash_id == FLASH_UNKNOWN) {
./board/oxc/flash.c:    switch (info->flash_id & FLASH_VENDMASK) {
./board/oxc/flash.c:    switch (info->flash_id & FLASH_TYPEMASK) {
./board/oxc/flash.c:	    info->size >> 10, info->sector_count);
./board/oxc/flash.c:    for (i=0; i<info->sector_count; ++i) {
./board/oxc/flash.c:		info->start[i],
./board/oxc/flash.c:		info->protect[i] ? " (RO)" : "     "
./board/oxc/flash.c:	info->flash_id     = vendor << 16 | devid;
./board/oxc/flash.c:	info->sector_count = 32;
./board/oxc/flash.c:	info->size         = info->sector_count * 0x10000;
./board/oxc/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/oxc/flash.c:	    info->start[i] = base + i * 0x10000;
./board/oxc/flash.c:	info->flash_id     = vendor << 16 | devid;
./board/oxc/flash.c:	info->sector_count = 19;
./board/oxc/flash.c:	info->size         = 0x100000;
./board/oxc/flash.c:	info->start[0]     = 0x0000;
./board/oxc/flash.c:	info->start[1]     = 0x4000;
./board/oxc/flash.c:	info->start[2]     = 0x6000;
./board/oxc/flash.c:	info->start[3]     = 0x8000;
./board/oxc/flash.c:	for (i = 4; i < info->sector_count; i++) {
./board/oxc/flash.c:	    info->start[i] = base + (i-3) * 0x10000;
./board/oxc/flash.c:	info->flash_id     = vendor << 16 | devid;
./board/oxc/flash.c:	info->sector_count = 19;
./board/oxc/flash.c:	info->size         = 0x100000;
./board/oxc/flash.c:	for (i = 0; i < info->sector_count-4; i++) {
./board/oxc/flash.c:	    info->start[i] = base + i * 0x10000;
./board/oxc/flash.c:	info->start[i]     = base + i * 0x10000;
./board/oxc/flash.c:	info->start[i+1]   = base + i * 0x10000 + 0x8000;
./board/oxc/flash.c:	info->start[i+2]   = base + i * 0x10000 + 0xa000;
./board/oxc/flash.c:	info->start[i+3]   = base + i * 0x10000 + 0xc000;
./board/oxc/flash.c:    for (i = 0; i < info->sector_count; i++) {
./board/oxc/flash.c:	info->protect[i] = 0;
./board/oxc/flash.c:    if (info->flash_id != FLASH_UNKNOWN) {
./board/oxc/flash.c:    return (info->size);
./board/oxc/flash.c:    vu_char *addr = (vu_char *)(info->start[0]);
./board/oxc/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/oxc/flash.c:	if (info->protect[sect]) {
./board/oxc/flash.c:	if (info->protect[sect] == 0) {	/* not protected */
./board/oxc/flash.c:	    addr = (vu_char *)(info->start[sect]);
./board/oxc/flash.c:    addr = (vu_char *)(info->start[l_sect]);
./board/oxc/flash.c:    addr = (volatile unsigned char *)info->start[0];
./board/oxc/flash.c:    vu_char *addr = (vu_char *)(info->start[0]);
./board/actux4/actux4.c:		info->portwidth = 1;
./board/actux4/actux4.c:		info->chipwidth = 1;
./board/actux4/actux4.c:		info->interface = FLASH_CFI_X8;
./board/tb0229/flash.c:	if ((info->flash_id & FLASH_TYPEMASK) == FLASH_28F320J3A ||
./board/tb0229/flash.c:	    (info->flash_id & FLASH_TYPEMASK) == FLASH_28F640J3A ||
./board/tb0229/flash.c:	    (info->flash_id & FLASH_TYPEMASK) == FLASH_28F128J3A) {
./board/tb0229/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/tb0229/flash.c:			info->start[i] =
./board/tb0229/flash.c:				base + (i * info->size / info->sector_count);
./board/tb0229/flash.c:	} else if (info->flash_id & FLASH_BTYPE) {
./board/tb0229/flash.c:		if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/tb0229/flash.c:			info->start[0] = base + 0x00000000;
./board/tb0229/flash.c:			info->start[1] = base + 0x00004000;
./board/tb0229/flash.c:			info->start[2] = base + 0x00008000;
./board/tb0229/flash.c:			info->start[3] = base + 0x0000C000;
./board/tb0229/flash.c:			info->start[4] = base + 0x00010000;
./board/tb0229/flash.c:			info->start[5] = base + 0x00014000;
./board/tb0229/flash.c:			info->start[6] = base + 0x00018000;
./board/tb0229/flash.c:			info->start[7] = base + 0x0001C000;
./board/tb0229/flash.c:			for (i = 8; i < info->sector_count; i++) {
./board/tb0229/flash.c:				info->start[i] =
./board/tb0229/flash.c:			info->start[0] = base + 0x00000000;
./board/tb0229/flash.c:			info->start[1] = base + 0x00008000;
./board/tb0229/flash.c:			info->start[2] = base + 0x0000C000;
./board/tb0229/flash.c:			info->start[3] = base + 0x00010000;
./board/tb0229/flash.c:			for (i = 4; i < info->sector_count; i++) {
./board/tb0229/flash.c:				info->start[i] =
./board/tb0229/flash.c:			info->start[0] = base + 0x00000000;
./board/tb0229/flash.c:			info->start[1] = base + 0x00002000;
./board/tb0229/flash.c:			info->start[2] = base + 0x00004000;
./board/tb0229/flash.c:			info->start[3] = base + 0x00006000;
./board/tb0229/flash.c:			info->start[4] = base + 0x00008000;
./board/tb0229/flash.c:			info->start[5] = base + 0x0000A000;
./board/tb0229/flash.c:			info->start[6] = base + 0x0000C000;
./board/tb0229/flash.c:			info->start[7] = base + 0x0000E000;
./board/tb0229/flash.c:			for (i = 8; i < info->sector_count; i++) {
./board/tb0229/flash.c:				info->start[i] =
./board/tb0229/flash.c:			info->start[0] = base + 0x00000000;
./board/tb0229/flash.c:			info->start[1] = base + 0x00004000;
./board/tb0229/flash.c:			info->start[2] = base + 0x00006000;
./board/tb0229/flash.c:			info->start[3] = base + 0x00008000;
./board/tb0229/flash.c:			for (i = 4; i < info->sector_count; i++) {
./board/tb0229/flash.c:				info->start[i] =
./board/tb0229/flash.c:		i = info->sector_count - 1;
./board/tb0229/flash.c:		if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/tb0229/flash.c:			info->start[i--] = base + info->size - 0x00004000;
./board/tb0229/flash.c:			info->start[i--] = base + info->size - 0x00008000;
./board/tb0229/flash.c:			info->start[i--] = base + info->size - 0x0000C000;
./board/tb0229/flash.c:			info->start[i--] = base + info->size - 0x00010000;
./board/tb0229/flash.c:			info->start[i--] = base + info->size - 0x00014000;
./board/tb0229/flash.c:			info->start[i--] = base + info->size - 0x00018000;
./board/tb0229/flash.c:			info->start[i--] = base + info->size - 0x0001C000;
./board/tb0229/flash.c:				info->start[i] = base + i * 0x00020000;
./board/tb0229/flash.c:			info->start[i--] = base + info->size - 0x00008000;
./board/tb0229/flash.c:			info->start[i--] = base + info->size - 0x0000C000;
./board/tb0229/flash.c:			info->start[i--] = base + info->size - 0x00010000;
./board/tb0229/flash.c:				info->start[i] = base + i * 0x00020000;
./board/tb0229/flash.c:			info->start[i--] = base + info->size - 0x00002000;
./board/tb0229/flash.c:			info->start[i--] = base + info->size - 0x00004000;
./board/tb0229/flash.c:			info->start[i--] = base + info->size - 0x00006000;
./board/tb0229/flash.c:			info->start[i--] = base + info->size - 0x00008000;
./board/tb0229/flash.c:			info->start[i--] = base + info->size - 0x0000A000;
./board/tb0229/flash.c:			info->start[i--] = base + info->size - 0x0000C000;
./board/tb0229/flash.c:			info->start[i--] = base + info->size - 0x0000E000;
./board/tb0229/flash.c:				info->start[i] = base + i * 0x00010000;
./board/tb0229/flash.c:			info->start[i--] = base + info->size - 0x00004000;
./board/tb0229/flash.c:			info->start[i--] = base + info->size - 0x00006000;
./board/tb0229/flash.c:			info->start[i--] = base + info->size - 0x00008000;
./board/tb0229/flash.c:				info->start[i] = base + i * 0x00010000;
./board/tb0229/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/tb0229/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/tb0229/flash.c:	if (info->flash_id & 0x0001) {
./board/tb0229/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/tb0229/flash.c:		info->size >> 20, info->sector_count);
./board/tb0229/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/tb0229/flash.c:			info->start[i], info->protect[i] ? " (RO)" : "     ");
./board/tb0229/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/tb0229/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/tb0229/flash.c:		info->flash_id = FLASH_MAN_STM;
./board/tb0229/flash.c:		info->flash_id = FLASH_MAN_SST;
./board/tb0229/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/tb0229/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/tb0229/flash.c:		info->sector_count = 0;
./board/tb0229/flash.c:		info->size = 0;
./board/tb0229/flash.c:		info->flash_id += FLASH_AM400T;
./board/tb0229/flash.c:		info->sector_count = 11;
./board/tb0229/flash.c:		info->size = 0x00100000;
./board/tb0229/flash.c:		info->flash_id += FLASH_AM400B;
./board/tb0229/flash.c:		info->sector_count = 11;
./board/tb0229/flash.c:		info->size = 0x00100000;
./board/tb0229/flash.c:		info->flash_id += FLASH_AM800T;
./board/tb0229/flash.c:		info->sector_count = 19;
./board/tb0229/flash.c:		info->size = 0x00200000;
./board/tb0229/flash.c:		info->flash_id += FLASH_AM800B;
./board/tb0229/flash.c:		info->sector_count = 19;
./board/tb0229/flash.c:		info->size = 0x00200000;
./board/tb0229/flash.c:		info->flash_id += FLASH_AM160T;
./board/tb0229/flash.c:		info->sector_count = 35;
./board/tb0229/flash.c:		info->size = 0x00400000;
./board/tb0229/flash.c:		info->flash_id += FLASH_AM160B;
./board/tb0229/flash.c:		info->sector_count = 35;
./board/tb0229/flash.c:		info->size = 0x00400000;
./board/tb0229/flash.c:		info->flash_id += FLASH_AM320T;
./board/tb0229/flash.c:		info->sector_count = 67;
./board/tb0229/flash.c:		info->size = 0x00800000;
./board/tb0229/flash.c:		info->flash_id += FLASH_AM320B;
./board/tb0229/flash.c:		info->sector_count = 67;
./board/tb0229/flash.c:		info->size = 0x00800000;
./board/tb0229/flash.c:		info->flash_id += FLASH_INTEL800T;
./board/tb0229/flash.c:		info->sector_count = 23;
./board/tb0229/flash.c:		info->size = 0x00200000;
./board/tb0229/flash.c:		info->flash_id += FLASH_INTEL800B;
./board/tb0229/flash.c:		info->sector_count = 23;
./board/tb0229/flash.c:		info->size = 0x00200000;
./board/tb0229/flash.c:		info->flash_id += FLASH_INTEL160T;
./board/tb0229/flash.c:		info->sector_count = 39;
./board/tb0229/flash.c:		info->size = 0x00400000;
./board/tb0229/flash.c:		info->flash_id += FLASH_INTEL160B;
./board/tb0229/flash.c:		info->sector_count = 39;
./board/tb0229/flash.c:		info->size = 0x00400000;
./board/tb0229/flash.c:		info->flash_id += FLASH_INTEL320T;
./board/tb0229/flash.c:		info->sector_count = 71;
./board/tb0229/flash.c:		info->size = 0x00800000;
./board/tb0229/flash.c:		info->flash_id += FLASH_AM320B;
./board/tb0229/flash.c:		info->sector_count = 71;
./board/tb0229/flash.c:		info->size = 0x00800000;
./board/tb0229/flash.c:		info->flash_id += FLASH_INTEL320T;
./board/tb0229/flash.c:		info->sector_count = 135;
./board/tb0229/flash.c:		info->size = 0x01000000;
./board/tb0229/flash.c:		info->flash_id += FLASH_AM320B;
./board/tb0229/flash.c:		info->sector_count = 135;
./board/tb0229/flash.c:		info->size = 0x01000000;
./board/tb0229/flash.c:		info->flash_id += FLASH_28F320J3A;
./board/tb0229/flash.c:		info->sector_count = 32;
./board/tb0229/flash.c:		info->size = 0x00400000;
./board/tb0229/flash.c:		info->flash_id += FLASH_28F640J3A;
./board/tb0229/flash.c:		info->sector_count = 64;
./board/tb0229/flash.c:		info->size = 0x00800000;
./board/tb0229/flash.c:		info->flash_id += FLASH_28F128J3A;
./board/tb0229/flash.c:		info->sector_count = 128;
./board/tb0229/flash.c:		info->size = 0x01000000;
./board/tb0229/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/tb0229/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/tb0229/flash.c:		addr = (volatile FLASH_WORD_SIZE *) (info->start[i]);
./board/tb0229/flash.c:		info->protect[i] = addr[2] & 1;
./board/tb0229/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/tb0229/flash.c:		addr = (volatile FLASH_WORD_SIZE *) info->start[0];
./board/tb0229/flash.c:		if ((info->flash_id & 0xFF00) == FLASH_MAN_INTEL) {
./board/tb0229/flash.c:	return (info->size);
./board/tb0229/flash.c:		(volatile FLASH_WORD_SIZE *) (info->start[0]);
./board/tb0229/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/tb0229/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/tb0229/flash.c:	    ((info->flash_id > FLASH_AMD_COMP) &&
./board/tb0229/flash.c:	     ((info->flash_id & FLASH_VENDMASK) != FLASH_MAN_INTEL))) {
./board/tb0229/flash.c:		if (info->protect[sect]) {
./board/tb0229/flash.c:	if (info->flash_id < FLASH_AMD_COMP) {
./board/tb0229/flash.c:			if (info->protect[sect] == 0) {	/* not protected */
./board/tb0229/flash.c:				addr = (volatile FLASH_WORD_SIZE *) (info->
./board/tb0229/flash.c:		addr = (volatile FLASH_WORD_SIZE *) (info->start[l_sect]);
./board/tb0229/flash.c:		addr = (volatile FLASH_WORD_SIZE *) info->start[0];
./board/tb0229/flash.c:			if (info->protect[sect] == 0) {	/* not protected */
./board/tb0229/flash.c:				addr = (vu_long *) (info->start[sect]);
./board/tb0229/flash.c:				addr = (vu_short *) (info->start[sect]);
./board/tb0229/flash.c:			addr = (volatile FLASH_WORD_SIZE *) info->start[0];
./board/tb0229/flash.c:		if ((addr >= info->start[0]) &&
./board/tb0229/flash.c:		    (addr < (info->start[0] + info->size)) ) {
./board/tb0229/flash.c:										ulong b_end = info->start[0] + info->size;*/ /* bank end addr */
./board/tb0229/flash.c:/*		short s_end = info->sector_count - 1;
./board/tb0229/flash.c:		for (i=0; i<info->sector_count; ++i) {
./board/tb0229/flash.c:			ulong e_addr = (i == s_end) ? b_end : info->start[i + 1];
./board/tb0229/flash.c:			if ((end >= info->start[i]) && (addr < e_addr) &&
./board/tb0229/flash.c:			    (info->protect[i] != 0) ) {
./board/tb0229/flash.c:		len = info->start[0] + info->size - addr;
./board/tb0229/flash.c:	vu_long *addr = (vu_long *) (info->start[0]);
./board/tb0229/flash.c:	if (info->flash_id < FLASH_AMD_COMP) {
./board/tb0229/flash.c:	if (info->flash_id < FLASH_AMD_COMP) {
./board/tb0229/flash.c:	vu_short *addr = (vu_short *) (info->start[0]);
./board/tb0229/flash.c:	if (info->flash_id < FLASH_AMD_COMP) {
./board/tb0229/flash.c:	if (info->flash_id < FLASH_AMD_COMP) {
./board/fads/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/fads/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/fads/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/fads/flash.c:	printf ("  Size: %ld MB in %d Sectors\n", info->size >> 20,
./board/fads/flash.c:		info->sector_count);
./board/fads/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/fads/flash.c:			info->start[i], info->protect[i] ? " (RO)" : "     ");
./board/fads/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/fads/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/fads/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/fads/flash.c:		info->sector_count = 0;
./board/fads/flash.c:		info->size = 0;
./board/fads/flash.c:		info->flash_id += FLASH_AM040;
./board/fads/flash.c:		info->sector_count = 8;
./board/fads/flash.c:		info->size = 0x00200000;
./board/fads/flash.c:		info->flash_id += FLASH_AM080;
./board/fads/flash.c:		info->sector_count = 16;
./board/fads/flash.c:		info->size = 0x00400000;
./board/fads/flash.c:		info->flash_id += FLASH_AM400T;
./board/fads/flash.c:		info->sector_count = 11;
./board/fads/flash.c:		info->size = 0x00100000;
./board/fads/flash.c:		info->flash_id += FLASH_AM400B;
./board/fads/flash.c:		info->sector_count = 11;
./board/fads/flash.c:		info->size = 0x00100000;
./board/fads/flash.c:		info->flash_id += FLASH_AM800T;
./board/fads/flash.c:		info->sector_count = 19;
./board/fads/flash.c:		info->size = 0x00200000;
./board/fads/flash.c:		info->flash_id += FLASH_AM800B;
./board/fads/flash.c:		info->sector_count = 19;
./board/fads/flash.c:		info->size = 0x00200000;
./board/fads/flash.c:		info->flash_id += FLASH_AM160T;
./board/fads/flash.c:		info->sector_count = 35;
./board/fads/flash.c:		info->size = 0x00400000;
./board/fads/flash.c:		info->flash_id += FLASH_AM160B;
./board/fads/flash.c:		info->sector_count = 35;
./board/fads/flash.c:		info->size = 0x00400000;
./board/fads/flash.c:		info->flash_id += FLASH_AM320T;
./board/fads/flash.c:		info->sector_count = 67;
./board/fads/flash.c:		info->size = 0x00800000;
./board/fads/flash.c:		info->flash_id += FLASH_AM320B;
./board/fads/flash.c:		info->sector_count = 67;
./board/fads/flash.c:		info->size = 0x00800000;
./board/fads/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/fads/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/fads/flash.c:		info->start[0] = base + 0x00000000;
./board/fads/flash.c:		info->start[1] = base + 0x00008000;
./board/fads/flash.c:		info->start[2] = base + 0x0000C000;
./board/fads/flash.c:		info->start[3] = base + 0x00010000;
./board/fads/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/fads/flash.c:			info->start[i] = base + (i * 0x00020000) - 0x00060000;
./board/fads/flash.c:		i = info->sector_count - 1;
./board/fads/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/fads/flash.c:		info->start[i--] = base + info->size - 0x0000C000;
./board/fads/flash.c:		info->start[i--] = base + info->size - 0x00010000;
./board/fads/flash.c:			info->start[i] = base + i * 0x00020000;
./board/fads/flash.c:	for (i = 0; i < info->sector_count; i++)
./board/fads/flash.c:		info->start[i] = (ulong)addr + (i * 0x00040000);
./board/fads/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/fads/flash.c:		addr = (volatile unsigned long *) (info->start[i]);
./board/fads/flash.c:		info->protect[i] = addr[2] & 1;
./board/fads/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/fads/flash.c:		addr = (volatile unsigned long *) info->start[0];
./board/fads/flash.c:	return (info->size);
./board/fads/flash.c:	vu_long *addr = (vu_long *) (info->start[0]);
./board/fads/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/fads/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/fads/flash.c:	    (info->flash_id > FLASH_AMD_COMP)) {
./board/fads/flash.c:		if (info->protect[sect]) {
./board/fads/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/fads/flash.c:			addr = (vu_long *) (info->start[sect]);
./board/fads/flash.c:	addr = (vu_long *) (info->start[l_sect]);
./board/fads/flash.c:	addr = (volatile unsigned long *) info->start[0];
./board/fads/flash.c:	vu_long *addr = (vu_long *) (info->start[0]);
./board/o2dnt/flash.c:	FPWV *base = (FPWV *)(info->start[0]);
./board/o2dnt/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL)
./board/o2dnt/flash.c:		if (info->size &&
./board/o2dnt/flash.c:				info->start[0] <= base &&
./board/o2dnt/flash.c:				base <= info->start[0] + info->size - 1)
./board/o2dnt/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/o2dnt/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/o2dnt/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/o2dnt/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/o2dnt/flash.c:			info->size >> 20,
./board/o2dnt/flash.c:			info->sector_count);
./board/o2dnt/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/o2dnt/flash.c:		printf (" %08lX%s", info->start[i],
./board/o2dnt/flash.c:				info->protect[i] ? " (RO)" : "     ");
./board/o2dnt/flash.c:			info->flash_id = FLASH_MAN_INTEL;
./board/o2dnt/flash.c:			info->flash_id = FLASH_UNKNOWN;
./board/o2dnt/flash.c:			info->sector_count = 0;
./board/o2dnt/flash.c:			info->size = 0;
./board/o2dnt/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/o2dnt/flash.c:				info->flash_id += FLASH_28F128J3A;
./board/o2dnt/flash.c:				info->sector_count = 128;
./board/o2dnt/flash.c:				info->size = 0x01000000;
./board/o2dnt/flash.c:				for( i = 0; i < info->sector_count; i++ )
./board/o2dnt/flash.c:					info->start[i] = (ulong)addr + (i * 0x20000);
./board/o2dnt/flash.c:				info->flash_id = FLASH_UNKNOWN;
./board/o2dnt/flash.c:				info->sector_count = 0;
./board/o2dnt/flash.c:				info->size = 0;
./board/o2dnt/flash.c:	return (info->size);
./board/o2dnt/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/o2dnt/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/o2dnt/flash.c:					info->flash_id);
./board/o2dnt/flash.c:		if (info->protect[sect])
./board/o2dnt/flash.c:		if (info->protect[sect] != 0)	/* protected, skip it */
./board/o2dnt/flash.c:		addr = (FPWV *)(info->start[sect]);
./board/o2dnt/flash.c:		switch (info->flash_id & FLASH_VENDMASK) {
./board/o2dnt/flash.c:	FPWV *addr = (FPWV *) (info->start[sector]);
./board/o2dnt/flash.c:		info->protect[sector] = prot;
./board/o2dnt/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/o2dnt/flash.c:			if (info->protect[i]) {
./board/o2dnt/flash.c:				addr = (FPWV *) (info->start[i]);
./board/o2dnt/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/o2dnt/flash.c:		for (i = 0; i < info->sector_count; ++i) {
./board/o2dnt/flash.c:			info->protect[i] = intel_sector_protected(info, i);
./board/o2dnt/flash.c:	addr = (FPWV *) info->start[sector];
./board/o2dnt/flash.c:	lock_conf_addr = (FPWV *) info->start[sector] + 4;
./board/nx823/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/nx823/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/nx823/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/nx823/flash.c:			info->start[i] = base + (i * 0x00020000);
./board/nx823/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/nx823/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/nx823/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/nx823/flash.c:		info->size >> 20, info->sector_count);
./board/nx823/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/nx823/flash.c:			info->start[i],
./board/nx823/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/nx823/flash.c:      info->flash_id = FLASH_MAN_INTEL;
./board/nx823/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/nx823/flash.c:		info->sector_count = 0;
./board/nx823/flash.c:		info->size = 0;
./board/nx823/flash.c:      info->flash_id += FLASH_28F320J3A;
./board/nx823/flash.c:      info->sector_count = 32;
./board/nx823/flash.c:      info->size = 0x00400000;
./board/nx823/flash.c:      info->flash_id += FLASH_28F640J3A;
./board/nx823/flash.c:      info->sector_count = 64;
./board/nx823/flash.c:      info->size = 0x00800000;
./board/nx823/flash.c:      info->flash_id += FLASH_28F128J3A;
./board/nx823/flash.c:      info->sector_count = 128;
./board/nx823/flash.c:      info->size = 0x01000000;
./board/nx823/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/nx823/flash.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/nx823/flash.c:			info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/nx823/flash.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/nx823/flash.c:	return (info->size);
./board/nx823/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/nx823/flash.c:	type = (info->flash_id & FLASH_VENDMASK);
./board/nx823/flash.c:			info->flash_id);
./board/nx823/flash.c:		if (info->protect[sect]) {
./board/nx823/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/nx823/flash.c:			FPWV *addr = (FPWV *)(info->start[sect]);
./board/nx823/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/omap1610inn/flash.c:	FPWV *addr = (FPWV *) (info->start[j]);
./board/omap1610inn/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/omap1610inn/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/omap1610inn/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/omap1610inn/flash.c:				info->start[i] = base + (i * 0x8000);
./board/omap1610inn/flash.c:				info->protect[i] = 0;
./board/omap1610inn/flash.c:				info->start[i] = base +
./board/omap1610inn/flash.c:				info->protect[i] = 0;
./board/omap1610inn/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/omap1610inn/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/omap1610inn/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/omap1610inn/flash.c:			info->size >> 20, info->sector_count);
./board/omap1610inn/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/omap1610inn/flash.c:			info->start[i], info->protect[i] ? " (RO)" : "	   ");
./board/omap1610inn/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/omap1610inn/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/omap1610inn/flash.c:		info->sector_count = 0;
./board/omap1610inn/flash.c:		info->size = 0;
./board/omap1610inn/flash.c:		info->flash_id += FLASH_28F256L18T;
./board/omap1610inn/flash.c:		info->sector_count = 259;
./board/omap1610inn/flash.c:		info->size = 0x02000000;
./board/omap1610inn/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/omap1610inn/flash.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/omap1610inn/flash.c:				info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/omap1610inn/flash.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/omap1610inn/flash.c:	return (info->size);
./board/omap1610inn/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/omap1610inn/flash.c:	type = (info->flash_id & FLASH_VENDMASK);
./board/omap1610inn/flash.c:				info->flash_id);
./board/omap1610inn/flash.c:		if (info->protect[sect]) {
./board/omap1610inn/flash.c:		if (info->protect[sect] == 0) { /* not protected */
./board/omap1610inn/flash.c:			FPWV *addr = (FPWV *) (info->start[sect]);
./board/omap1610inn/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/xaeniax/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/xaeniax/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/xaeniax/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/xaeniax/flash.c:			info->start[i] = base + (i * PHYS_FLASH_SECT_SIZE);
./board/xaeniax/flash.c:			info->protect[i] = 0;
./board/xaeniax/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/xaeniax/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/xaeniax/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/xaeniax/flash.c:			info->size >> 20, info->sector_count);
./board/xaeniax/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/xaeniax/flash.c:			info->start[i],
./board/xaeniax/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/xaeniax/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/xaeniax/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/xaeniax/flash.c:		info->sector_count = 0;
./board/xaeniax/flash.c:		info->size = 0;
./board/xaeniax/flash.c:		info->flash_id += FLASH_28F128J3A;
./board/xaeniax/flash.c:		info->sector_count = 128;
./board/xaeniax/flash.c:		info->size = 0x02000000;
./board/xaeniax/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/xaeniax/flash.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/xaeniax/flash.c:			info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/xaeniax/flash.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/xaeniax/flash.c:	return (info->size);
./board/xaeniax/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/xaeniax/flash.c:	type = (info->flash_id & FLASH_VENDMASK);
./board/xaeniax/flash.c:			info->flash_id);
./board/xaeniax/flash.c:		if (info->protect[sect]) {
./board/xaeniax/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/xaeniax/flash.c:			FPWV *addr = (FPWV *) (info->start[sect]);
./board/xaeniax/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/trab/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/trab/flash.c:		for (j = 0; j < info->sector_count; j++) {
./board/trab/flash.c:			info->protect[j] = 0;
./board/trab/flash.c:			info->start[j] = flashbase;
./board/trab/flash.c:			switch (info->flash_id & FLASH_TYPEMASK) {
./board/trab/flash.c:					info->flash_id & FLASH_TYPEMASK);
./board/trab/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/trab/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/trab/flash.c:			info->size >> 20, info->sector_count);
./board/trab/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/trab/flash.c:			info->start[i],
./board/trab/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/trab/flash.c:	if (info->flash_id == FLASH_UNKNOWN)
./board/trab/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/trab/flash.c:		if (info->protect[sect]) {
./board/trab/flash.c:			sect, info->start[sect]);
./board/trab/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/trab/flash.c:			vu_long *addr = (vu_long *) (info->start[sect]);
./board/trab/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/trab/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/trab/flash.c:		info->flash_id = FLASH_MAN_MX;
./board/trab/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/trab/flash.c:		info->sector_count = 0;
./board/trab/flash.c:		info->size = 0;
./board/trab/flash.c:		info->flash_id += FLASH_AM320B;
./board/trab/flash.c:		info->sector_count = 71;
./board/trab/flash.c:		info->size = 0x00800000;
./board/trab/flash.c:		info->flash_id += FLASH_AM640U;
./board/trab/flash.c:		info->sector_count = 128;
./board/trab/flash.c:		info->size = 0x01000000;
./board/trab/flash.c:		info->flash_id += FLASH_MXLV320B;
./board/trab/flash.c:		info->sector_count = 71;
./board/trab/flash.c:		info->size = 0x00800000;
./board/trab/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/trab/flash.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/trab/flash.c:			info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/trab/flash.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/trab/flash.c:	return (info->size);
./board/nc650/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/nc650/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/nc650/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/nc650/flash.c:			info->start[i] = base + (i * 0x00020000);
./board/nc650/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/nc650/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/nc650/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/nc650/flash.c:			info->size >> 20, info->sector_count);
./board/nc650/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/nc650/flash.c:			info->start[i],
./board/nc650/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/nc650/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/nc650/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/nc650/flash.c:		info->sector_count = 0;
./board/nc650/flash.c:		info->size = 0;
./board/nc650/flash.c:		info->flash_id += FLASH_28F320J3A;
./board/nc650/flash.c:		info->sector_count = 32;
./board/nc650/flash.c:		info->size = 0x00400000;
./board/nc650/flash.c:		info->flash_id += FLASH_28F640J3A;
./board/nc650/flash.c:		info->sector_count = 64;
./board/nc650/flash.c:		info->size = 0x00800000;
./board/nc650/flash.c:		info->flash_id += FLASH_28F128J3A;
./board/nc650/flash.c:		info->sector_count = 128;
./board/nc650/flash.c:		info->size = 0x01000000;
./board/nc650/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/nc650/flash.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/nc650/flash.c:				info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/nc650/flash.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/nc650/flash.c:	return (info->size);
./board/nc650/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/nc650/flash.c:	type = (info->flash_id & FLASH_VENDMASK);
./board/nc650/flash.c:			info->flash_id);
./board/nc650/flash.c:		if (info->protect[sect]) {
./board/nc650/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/nc650/flash.c:			FPWV *addr = (FPWV *) (info->start[sect]);
./board/nc650/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/ep7312/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/ep7312/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/ep7312/flash.c:			info->size >> 20, info->sector_count);
./board/ep7312/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/ep7312/flash.c:		printf (" %08lX%s", info->start[i],
./board/ep7312/flash.c:				info->protect[i] ? " (RO)" : "     ");
./board/ep7312/flash.c:	if (info->flash_id == FLASH_UNKNOWN)
./board/ep7312/flash.c:	if ((info->flash_id & FLASH_VENDMASK) !=
./board/ep7312/flash.c:		if (info->protect[sect]) {
./board/ep7312/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/ep7312/flash.c:			vu_short *addr = (vu_short *) (info->start[sect]);
./board/jse/flash.c:	unsigned long sector_size = info->size / info->sector_count;
./board/jse/flash.c:	for (idx = 0; idx < info->sector_count; idx += 1) {
./board/jse/flash.c:		info->start[idx] = base + (idx * sector_size);
./board/jse/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/jse/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/jse/flash.c:	switch (info->flash_id) {
./board/jse/flash.c:		info->size >> 10, info->sector_count);
./board/jse/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/jse/flash.c:		if (i != (info->sector_count - 1))
./board/jse/flash.c:			size = info->start[i + 1] - info->start[i];
./board/jse/flash.c:			size = info->start[0] + info->size - info->start[i];
./board/jse/flash.c:		flash = (volatile unsigned long *) info->start[i];
./board/jse/flash.c:			info->start[i],
./board/jse/flash.c:			erased ? " E" : "  ", info->protect[i] ? "RO " : "   "
./board/jse/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/jse/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/jse/flash.c:		info->flash_id = FLASH_MAN_SST;
./board/jse/flash.c:		info->flash_id = FLASH_MAN_STM;
./board/jse/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/jse/flash.c:		info->sector_count = 0;
./board/jse/flash.c:		info->size = 0;
./board/jse/flash.c:		info->flash_id += FLASH_AM040;
./board/jse/flash.c:		info->sector_count = 8;
./board/jse/flash.c:		info->size = 0x0080000;	/* => 512 ko */
./board/jse/flash.c:		info->flash_id += FLASH_AM040;
./board/jse/flash.c:		info->sector_count = 8;
./board/jse/flash.c:		info->size = 0x0080000;	/* => 512 ko */
./board/jse/flash.c:		info->flash_id += FLASH_AM040;
./board/jse/flash.c:		info->sector_count = 8;
./board/jse/flash.c:		info->size = 0x0080000; /* => 512 ko */
./board/jse/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/jse/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/jse/flash.c:		addr2 = (volatile FLASH_WORD_SIZE *) (info->start[i]);
./board/jse/flash.c:		if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST)
./board/jse/flash.c:			info->protect[i] = 0;
./board/jse/flash.c:			info->protect[i] = addr2[2] & 1;
./board/jse/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/jse/flash.c:		addr2 = (FLASH_WORD_SIZE *) info->start[0];
./board/jse/flash.c:	return (info->size);
./board/jse/flash.c:		(FLASH_WORD_SIZE *) (info->start[sect]);
./board/jse/flash.c:	volatile FLASH_WORD_SIZE *addr = (FLASH_WORD_SIZE *) (info->start[0]);
./board/jse/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/jse/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/jse/flash.c:		if (info->protect[sect]) {
./board/jse/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/jse/flash.c:			addr2 = (FLASH_WORD_SIZE *) (info->start[sect]);
./board/jse/flash.c:			if ((info->flash_id & FLASH_VENDMASK) ==
./board/jse/flash.c:	addr = (FLASH_WORD_SIZE *) info->start[0];
./board/jse/flash.c:		(FLASH_WORD_SIZE *) (info->start[0]);
./board/musenki/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/musenki/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/musenki/flash.c:	    for (i = 0; i < info->sector_count; i++) {
./board/musenki/flash.c:		info->start[i] = base;
./board/musenki/flash.c:	    printf ("Don't know sector ofsets for flash type 0x%lx\n", info->flash_id);
./board/musenki/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/musenki/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/musenki/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/musenki/flash.c:	if (info->size >= (1 << 20)) {
./board/musenki/flash.c:		info->size >> i,
./board/musenki/flash.c:		info->sector_count);
./board/musenki/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/musenki/flash.c:			info->start[i],
./board/musenki/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/musenki/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/musenki/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/musenki/flash.c:		info->flash_id = FLASH_MAN_SST;
./board/musenki/flash.c:		info->flash_id = FLASH_MAN_STM;
./board/musenki/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/musenki/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/musenki/flash.c:		info->sector_count = 0;
./board/musenki/flash.c:		info->size = 0;
./board/musenki/flash.c:		info->flash_id += FLASH_28F320J3A;
./board/musenki/flash.c:		info->sector_count = 32;
./board/musenki/flash.c:		info->size = 0x00400000;
./board/musenki/flash.c:		info->flash_id += FLASH_28F640J3A;
./board/musenki/flash.c:		info->sector_count = 64;
./board/musenki/flash.c:		info->size = 0x00800000;
./board/musenki/flash.c:		info->flash_id += FLASH_28F128J3A;
./board/musenki/flash.c:		info->sector_count = 128;
./board/musenki/flash.c:		info->size = 0x01000000;
./board/musenki/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/musenki/flash.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/musenki/flash.c:			info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/musenki/flash.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/musenki/flash.c:	return (info->size);
./board/musenki/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/musenki/flash.c:	if ((info->flash_id & FLASH_VENDMASK) != FLASH_MAN_INTEL) {
./board/musenki/flash.c:		if (info->protect[sect]) {
./board/musenki/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/musenki/flash.c:			vu_char *addr = (vu_char *)(info->start[sect]);
./board/musenki/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/zylonite/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/zylonite/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/zylonite/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/zylonite/flash.c:			info->start[i] = base + (i * PHYS_FLASH_SECT_SIZE);
./board/zylonite/flash.c:			info->protect[i] = 0;
./board/zylonite/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/zylonite/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/zylonite/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/zylonite/flash.c:			info->size >> 20, info->sector_count);
./board/zylonite/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/zylonite/flash.c:			info->start[i],
./board/zylonite/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/zylonite/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/zylonite/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/zylonite/flash.c:		info->sector_count = 0;
./board/zylonite/flash.c:		info->size = 0;
./board/zylonite/flash.c:		info->flash_id += FLASH_28F128J3A;
./board/zylonite/flash.c:		info->sector_count = 128;
./board/zylonite/flash.c:		info->size = 0x02000000;
./board/zylonite/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/zylonite/flash.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/zylonite/flash.c:			info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/zylonite/flash.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/zylonite/flash.c:	return (info->size);
./board/zylonite/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/zylonite/flash.c:	type = (info->flash_id & FLASH_VENDMASK);
./board/zylonite/flash.c:			info->flash_id);
./board/zylonite/flash.c:		if (info->protect[sect]) {
./board/zylonite/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/zylonite/flash.c:			FPWV *addr = (FPWV *) (info->start[sect]);
./board/zylonite/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/MAI/AmigaOneG3SE/flash_new.c:			info->flash_id = FLASH_MAN_AMD;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->flash_id = FLASH_MAN_FUJ;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->flash_id = FLASH_MAN_STM;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->flash_id = FLASH_UNKNOWN;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->sector_count = 0;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->size = 0;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->flash_id += FLASH_AM040;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->sector_count = 8;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->size = 0x00080000;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->flash_id += FLASH_AM040;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->sector_count = 8;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->size = 0x00080000;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->flash_id += FLASH_AM400T;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->sector_count = 11;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->size = 0x00100000;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->flash_id += FLASH_AM400B;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->sector_count = 11;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->size = 0x00100000;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->flash_id += FLASH_AM800T;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->sector_count = 19;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->size = 0x00200000;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->flash_id += FLASH_AM800B;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->sector_count = 19;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->size = 0x00200000;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->flash_id += FLASH_AM160T;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->sector_count = 35;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->size = 0x00400000;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->flash_id += FLASH_AM160B;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->sector_count = 35;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->size = 0x00400000;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->flash_id += FLASH_AM320T;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->sector_count = 67;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->size = 0x00800000;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->flash_id += FLASH_AM320B;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->sector_count = 67;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->size = 0x00800000;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->flash_id += FLASH_AM033C;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->sector_count = 64;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->size = 0x01000000;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->flash_id += FLASH_AM040;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->sector_count = 8;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->size = 0x00080000;
./board/MAI/AmigaOneG3SE/flash_new.c:			info->flash_id = FLASH_UNKNOWN;
./board/MAI/AmigaOneG3SE/flash_new.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/MAI/AmigaOneG3SE/flash_new.c:			info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/MAI/AmigaOneG3SE/flash_new.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/MAI/AmigaOneG3SE/flash_new.c:	for (i = 0; i < info->sector_count; i++) {
./board/MAI/AmigaOneG3SE/flash_new.c:		value = in8(info->start[i] + 2);
./board/MAI/AmigaOneG3SE/flash_new.c:		info->protect[i] = (value & 1) != 0;
./board/MAI/AmigaOneG3SE/flash_new.c:	return (info->size);
./board/MAI/AmigaOneG3SE/flash_new.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/MAI/AmigaOneG3SE/flash_new.c:			for (i = 0; i < info->sector_count; i++) {
./board/MAI/AmigaOneG3SE/flash_new.c:				info->start[i] = base + i * info->size /
./board/MAI/AmigaOneG3SE/flash_new.c:							    info->sector_count;
./board/MAI/AmigaOneG3SE/flash_new.c:	volatile ulong addr = info->start[0];
./board/MAI/AmigaOneG3SE/flash_new.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/MAI/AmigaOneG3SE/flash_new.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/MAI/AmigaOneG3SE/flash_new.c:			info->flash_id);
./board/MAI/AmigaOneG3SE/flash_new.c:		if (info->protect[sect]) {
./board/MAI/AmigaOneG3SE/flash_new.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/MAI/AmigaOneG3SE/flash_new.c:			addr = info->start[sect];
./board/MAI/AmigaOneG3SE/flash_new.c:	addr = info->start[l_sect];
./board/MAI/AmigaOneG3SE/flash_new.c:			flash_reset (info->start[0]);
./board/MAI/AmigaOneG3SE/flash_new.c:	flash_reset (info->start[0]);
./board/MAI/AmigaOneG3SE/flash_new.c:	volatile ulong addr = info->start[0];
./board/MAI/AmigaOneG3SE/flash_new.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/MAI/AmigaOneG3SE/flash_new.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/MAI/AmigaOneG3SE/flash_new.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/MAI/AmigaOneG3SE/flash_new.c:	if (info->size % 0x100000 == 0) {
./board/MAI/AmigaOneG3SE/flash_new.c:			info->size / 0x100000, info->sector_count);
./board/MAI/AmigaOneG3SE/flash_new.c:	} else if (info->size % 0x400 == 0) {
./board/MAI/AmigaOneG3SE/flash_new.c:			info->size / 0x400, info->sector_count);
./board/MAI/AmigaOneG3SE/flash_new.c:			info->size, info->sector_count);
./board/MAI/AmigaOneG3SE/flash_new.c:	for (i=0; i<info->sector_count; ++i) {
./board/MAI/AmigaOneG3SE/flash_new.c:			info->start[i],
./board/MAI/AmigaOneG3SE/flash_new.c:			info->protect[i] ? " (RO)" : "     "
./board/esd/cpci750/sdram_init.c:	if (!info->numOfModuleBanks) {
./board/esd/cpci750/sdram_init.c:	if (info->registeredAddrAndControlInputs == true)
./board/esd/cpci750/sdram_init.c:	switch (info->memoryType) {
./board/esd/cpci750/sdram_init.c:		switch (info->maxClSupported_DDR) {
./board/esd/cpci750/sdram_init.c:				info->maxClSupported_DDR);
./board/esd/cpci750/sdram_init.c:	DP (printf ("drb_size (n*64Mbit): %d\n", info->drb_size));
./board/esd/cpci750/sdram_init.c:	switch (info->drb_size) {
./board/esd/cpci750/sdram_init.c:	    ("setting up slot %d config with: %08lx \n", info->slot, tmp));
./board/esd/cpci750/sdram_init.c:	if (info->registeredAddrAndControlInputs
./board/esd/cpci750/sdram_init.c:	    || info->registeredDQMBinputs) {
./board/esd/cpci750/sdram_init.c:		     info->registeredAddrAndControlInputs,
./board/esd/cpci750/sdram_init.c:		     info->registeredDQMBinputs));
./board/esd/cpci750/sdram_init.c:/*	for (i = info->slot * 2; i < ((info->slot * 2) + info->banks); i++) */
./board/esd/cpci750/sdram_init.c:		i = info->slot;
./board/esd/cpci750/mv_eth.c:	command_status = p_pkt_info->cmd_sts | ETH_ZERO_PADDING | ETH_GEN_CRC;
./board/esd/cpci750/mv_eth.c:	if (p_pkt_info->byte_cnt <= 8) {
./board/esd/cpci750/mv_eth.c:		eth_b_copy (p_pkt_info->buf_ptr, p_tx_desc_curr->buf_ptr,
./board/esd/cpci750/mv_eth.c:			    p_pkt_info->byte_cnt);
./board/esd/cpci750/mv_eth.c:		p_tx_desc_curr->buf_ptr = p_pkt_info->buf_ptr;
./board/esd/cpci750/mv_eth.c:	p_tx_desc_curr->byte_cnt = p_pkt_info->byte_cnt;
./board/esd/cpci750/mv_eth.c:	p_tx_desc_curr->return_info = p_pkt_info->return_info;
./board/esd/cpci750/mv_eth.c:	if (p_pkt_info->cmd_sts & (ETH_TX_LAST_DESC)) {
./board/esd/cpci750/mv_eth.c:	p_pkt_info->cmd_sts = command_status;
./board/esd/cpci750/mv_eth.c:	p_pkt_info->return_info = p_tx_desc_used->return_info;
./board/esd/cpci750/mv_eth.c:	p_pkt_info->byte_cnt = (p_rx_curr_desc->byte_cnt) - RX_BUF_OFFSET;
./board/esd/cpci750/mv_eth.c:	p_pkt_info->cmd_sts = command_status;
./board/esd/cpci750/mv_eth.c:	p_pkt_info->buf_ptr = (p_rx_curr_desc->buf_ptr) + RX_BUF_OFFSET;
./board/esd/cpci750/mv_eth.c:	p_pkt_info->return_info = p_rx_curr_desc->return_info;
./board/esd/cpci750/mv_eth.c:	p_pkt_info->l4i_chk = p_rx_curr_desc->buf_size;	/* IP fragment indicator */
./board/esd/cpci750/mv_eth.c:	p_used_rx_desc->buf_ptr = p_pkt_info->buf_ptr;
./board/esd/cpci750/mv_eth.c:	p_used_rx_desc->return_info = p_pkt_info->return_info;
./board/esd/cpci750/mv_eth.c:	p_used_rx_desc->byte_cnt = p_pkt_info->byte_cnt;
./board/esd/common/lcd.c:	bpp = LOAD_SHORT(bm_info->biBitCount);
./board/esd/common/lcd.c:	width = LOAD_LONG(bm_info->biWidth);
./board/esd/common/lcd.c:	height = LOAD_LONG(bm_info->biHeight);
./board/esd/common/flash.c:	if (((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) ||
./board/esd/common/flash.c:	    ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM640U)) {
./board/esd/common/flash.c:	    for (i = 0; i < info->sector_count; i++)
./board/esd/common/flash.c:		info->start[i] = base + (i * 0x00010000);
./board/esd/common/flash.c:	} else if (((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL322B) ||
./board/esd/common/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL323B) ||
./board/esd/common/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM320B) ||
./board/esd/common/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL324B)) {
./board/esd/common/flash.c:			info->start[i] = base;
./board/esd/common/flash.c:		while (i < info->sector_count) {	/* 64k regular sectors	*/
./board/esd/common/flash.c:			info->start[i] = base;
./board/esd/common/flash.c:	} else if (((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL322T) ||
./board/esd/common/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL323T) ||
./board/esd/common/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM320T) ||
./board/esd/common/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL324T)) {
./board/esd/common/flash.c:		base += info->size;
./board/esd/common/flash.c:		i = info->sector_count;
./board/esd/common/flash.c:			info->start[i] = base;
./board/esd/common/flash.c:			info->start[i] = base;
./board/esd/common/flash.c:	    if (info->flash_id & FLASH_BTYPE) {
./board/esd/common/flash.c:		info->start[0] = base + 0x00000000;
./board/esd/common/flash.c:		info->start[1] = base + 0x00004000;
./board/esd/common/flash.c:		info->start[2] = base + 0x00006000;
./board/esd/common/flash.c:		info->start[3] = base + 0x00008000;
./board/esd/common/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/esd/common/flash.c:			info->start[i] = base + (i * 0x00010000) - 0x00030000;
./board/esd/common/flash.c:		i = info->sector_count - 1;
./board/esd/common/flash.c:		info->start[i--] = base + info->size - 0x00004000;
./board/esd/common/flash.c:		info->start[i--] = base + info->size - 0x00006000;
./board/esd/common/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/esd/common/flash.c:			info->start[i] = base + i * 0x00010000;
./board/esd/common/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/esd/common/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/esd/common/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/esd/common/flash.c:		info->size >> 20, info->sector_count);
./board/esd/common/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/esd/common/flash.c:		if (i != (info->sector_count-1))
./board/esd/common/flash.c:		  size = info->start[i+1] - info->start[i];
./board/esd/common/flash.c:		  size = info->start[0] + info->size - info->start[i];
./board/esd/common/flash.c:		flash = (volatile unsigned long *)info->start[i];
./board/esd/common/flash.c:			info->start[i],
./board/esd/common/flash.c:			info->protect[i] ? "RO " : "   ");
./board/esd/common/flash.c:			info->start[i],
./board/esd/common/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/esd/common/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/esd/common/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/esd/common/flash.c:		info->flash_id = FLASH_MAN_SST;
./board/esd/common/flash.c:		info->flash_id = FLASH_MAN_EXCEL;
./board/esd/common/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/esd/common/flash.c:		info->sector_count = 0;
./board/esd/common/flash.c:		info->size = 0;
./board/esd/common/flash.c:		info->flash_id += FLASH_AM400T;
./board/esd/common/flash.c:		info->sector_count = 11;
./board/esd/common/flash.c:		info->size = 0x00080000;
./board/esd/common/flash.c:		info->flash_id += FLASH_AM400B;
./board/esd/common/flash.c:		info->sector_count = 11;
./board/esd/common/flash.c:		info->size = 0x00080000;
./board/esd/common/flash.c:		info->flash_id += FLASH_AM800T;
./board/esd/common/flash.c:		info->sector_count = 19;
./board/esd/common/flash.c:		info->size = 0x00100000;
./board/esd/common/flash.c:		info->flash_id += FLASH_AM800B;
./board/esd/common/flash.c:		info->sector_count = 19;
./board/esd/common/flash.c:		info->size = 0x00100000;
./board/esd/common/flash.c:		info->flash_id += FLASH_AM160T;
./board/esd/common/flash.c:		info->sector_count = 35;
./board/esd/common/flash.c:		info->size = 0x00200000;
./board/esd/common/flash.c:		info->flash_id += FLASH_AM160B;
./board/esd/common/flash.c:		info->sector_count = 35;
./board/esd/common/flash.c:		info->size = 0x00200000;
./board/esd/common/flash.c:		info->flash_id += FLASH_AM320T;
./board/esd/common/flash.c:		info->sector_count = 71;
./board/esd/common/flash.c:		info->size = 0x00400000;  break;	/* => 4 MB	*/
./board/esd/common/flash.c:		info->flash_id += FLASH_AM320B;
./board/esd/common/flash.c:		info->sector_count = 71;
./board/esd/common/flash.c:		info->size = 0x00400000;  break;	/* => 4 MB	*/
./board/esd/common/flash.c:		info->flash_id += FLASH_AMDL322T;
./board/esd/common/flash.c:		info->sector_count = 71;
./board/esd/common/flash.c:		info->size = 0x00400000;  break;	/* => 4 MB	*/
./board/esd/common/flash.c:		info->flash_id += FLASH_AMDL322B;
./board/esd/common/flash.c:		info->sector_count = 71;
./board/esd/common/flash.c:		info->size = 0x00400000;  break;	/* => 4 MB	*/
./board/esd/common/flash.c:		info->flash_id += FLASH_AMDL323T;
./board/esd/common/flash.c:		info->sector_count = 71;
./board/esd/common/flash.c:		info->size = 0x00400000;  break;	/* => 4 MB	*/
./board/esd/common/flash.c:		info->flash_id += FLASH_AMDL323B;
./board/esd/common/flash.c:		info->sector_count = 71;
./board/esd/common/flash.c:		info->size = 0x00400000;  break;	/* => 4 MB	*/
./board/esd/common/flash.c:		info->flash_id += FLASH_AM640U;
./board/esd/common/flash.c:		info->sector_count = 128;
./board/esd/common/flash.c:		info->size = 0x00800000;  break;	/* => 8 MB	*/
./board/esd/common/flash.c:		info->flash_id += FLASH_SST800A;
./board/esd/common/flash.c:		info->sector_count = 16;
./board/esd/common/flash.c:		info->size = 0x00100000;
./board/esd/common/flash.c:		info->flash_id += FLASH_SST160A;
./board/esd/common/flash.c:		info->sector_count = 32;
./board/esd/common/flash.c:		info->size = 0x00200000;
./board/esd/common/flash.c:		info->flash_id += FLASH_SST320;
./board/esd/common/flash.c:		info->sector_count = 64;
./board/esd/common/flash.c:		info->size = 0x00400000;
./board/esd/common/flash.c:		info->flash_id += FLASH_SST640;
./board/esd/common/flash.c:		info->sector_count = 128;
./board/esd/common/flash.c:		info->size = 0x00800000;
./board/esd/common/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/esd/common/flash.c:	if (((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) ||
./board/esd/common/flash.c:	    ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM640U)) {
./board/esd/common/flash.c:	    for (i = 0; i < info->sector_count; i++)
./board/esd/common/flash.c:		info->start[i] = base + (i * 0x00010000);
./board/esd/common/flash.c:	} else if (((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL322B) ||
./board/esd/common/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL323B) ||
./board/esd/common/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM320B) ||
./board/esd/common/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL324B)) {
./board/esd/common/flash.c:			info->start[i] = base;
./board/esd/common/flash.c:		while (i < info->sector_count) {	/* 64k regular sectors	*/
./board/esd/common/flash.c:			info->start[i] = base;
./board/esd/common/flash.c:	} else if (((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL322T) ||
./board/esd/common/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL323T) ||
./board/esd/common/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM320T) ||
./board/esd/common/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL324T)) {
./board/esd/common/flash.c:		base += info->size;
./board/esd/common/flash.c:		i = info->sector_count;
./board/esd/common/flash.c:			info->start[i] = base;
./board/esd/common/flash.c:			info->start[i] = base;
./board/esd/common/flash.c:	    if (info->flash_id & FLASH_BTYPE) {
./board/esd/common/flash.c:		info->start[0] = base + 0x00000000;
./board/esd/common/flash.c:		info->start[1] = base + 0x00004000;
./board/esd/common/flash.c:		info->start[2] = base + 0x00006000;
./board/esd/common/flash.c:		info->start[3] = base + 0x00008000;
./board/esd/common/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/esd/common/flash.c:			info->start[i] = base + (i * 0x00010000) - 0x00030000;
./board/esd/common/flash.c:		i = info->sector_count - 1;
./board/esd/common/flash.c:		info->start[i--] = base + info->size - 0x00004000;
./board/esd/common/flash.c:		info->start[i--] = base + info->size - 0x00006000;
./board/esd/common/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/esd/common/flash.c:			info->start[i] = base + i * 0x00010000;
./board/esd/common/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/esd/common/flash.c:		addr2 = (volatile CONFIG_SYS_FLASH_WORD_SIZE *)(info->start[i]);
./board/esd/common/flash.c:		if ((info->flash_id & FLASH_VENDMASK) != FLASH_MAN_AMD)
./board/esd/common/flash.c:		  info->protect[i] = 0;
./board/esd/common/flash.c:		  info->protect[i] = addr2[CONFIG_SYS_FLASH_READ2] & 1;
./board/esd/common/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/esd/common/flash.c:		addr2 = (CONFIG_SYS_FLASH_WORD_SIZE *)info->start[0];
./board/esd/common/flash.c:	return (info->size);
./board/esd/common/flash.c:	volatile CONFIG_SYS_FLASH_WORD_SIZE *addr = (CONFIG_SYS_FLASH_WORD_SIZE *)(info->start[0]);
./board/esd/common/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/esd/common/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/esd/common/flash.c:		if (info->protect[sect]) {
./board/esd/common/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/esd/common/flash.c:		    addr2 = (CONFIG_SYS_FLASH_WORD_SIZE *)(info->start[sect]);
./board/esd/common/flash.c:		    if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) {
./board/esd/common/flash.c:	addr = (CONFIG_SYS_FLASH_WORD_SIZE *)(info->start[l_sect]);
./board/esd/common/flash.c:	addr = (CONFIG_SYS_FLASH_WORD_SIZE *)info->start[0];
./board/esd/common/flash.c:	volatile CONFIG_SYS_FLASH_WORD_SIZE *addr2 = (CONFIG_SYS_FLASH_WORD_SIZE *)(info->start[0]);
./board/esd/pf5200/flash.c:	FPWV *base = (FPWV *) (info->start[0]);
./board/esd/pf5200/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/esd/pf5200/flash.c:	} else if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_AMD) {
./board/esd/pf5200/flash.c:		if ((info->size) && (info->start[0] <= base)
./board/esd/pf5200/flash.c:		    && (base <= info->start[0] + info->size - 1)) {
./board/esd/pf5200/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/esd/pf5200/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/esd/pf5200/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/esd/pf5200/flash.c:	printf("  Size: %ld MB in %d Sectors\n", info->size >> 20,
./board/esd/pf5200/flash.c:	       info->sector_count);
./board/esd/pf5200/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/esd/pf5200/flash.c:		ulong *flash = (unsigned long *)info->start[i];
./board/esd/pf5200/flash.c:		     (info->sector_count - 1)) ? (info->start[i + 1] -
./board/esd/pf5200/flash.c:						  info->start[i]) >> 2 : (info->
./board/esd/pf5200/flash.c:									  info->
./board/esd/pf5200/flash.c:									  info->
./board/esd/pf5200/flash.c:		for (flash = (unsigned long *)info->start[i], erased = 1;
./board/esd/pf5200/flash.c:		     (flash != (unsigned long *)info->start[i] + size)
./board/esd/pf5200/flash.c:		printf(" %08lX %s %s", info->start[i], erased ? "E" : " ",
./board/esd/pf5200/flash.c:		       info->protect[i] ? "(RO)" : "    ");
./board/esd/pf5200/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/esd/pf5200/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/esd/pf5200/flash.c:		info->sector_count = 0;
./board/esd/pf5200/flash.c:		info->size = 0;
./board/esd/pf5200/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/esd/pf5200/flash.c:				info->flash_id += FLASH_AMLV256U;
./board/esd/pf5200/flash.c:				info->sector_count = 512;
./board/esd/pf5200/flash.c:				info->size = 0x02000000;
./board/esd/pf5200/flash.c:				for (i = 0; i < info->sector_count; i++) {
./board/esd/pf5200/flash.c:					info->start[i] =
./board/esd/pf5200/flash.c:			info->flash_id = FLASH_UNKNOWN;
./board/esd/pf5200/flash.c:			info->sector_count = 0;
./board/esd/pf5200/flash.c:			info->size = 0x800000;
./board/esd/pf5200/flash.c:	return (info->size);
./board/esd/pf5200/flash.c:	int intel = (info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL;
./board/esd/pf5200/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/esd/pf5200/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/esd/pf5200/flash.c:		       info->flash_id);
./board/esd/pf5200/flash.c:		if (info->protect[sect]) {
./board/esd/pf5200/flash.c:		if (info->protect[sect] != 0) {	/* protected, skip it */
./board/esd/pf5200/flash.c:		addr = (FPWV *) (info->start[sect]);
./board/esd/pf5200/flash.c:			base = (FPWV *) (info->start[0]);
./board/esd/pf5200/flash.c:		switch (info->flash_id & FLASH_VENDMASK) {
./board/esd/pf5200/flash.c:	base = (FPWV *) (info->start[0]);
./board/esd/cpci5200/strataflash.c:	return ((uchar *) (info->start[sect] + (offset * info->portwidth)));
./board/esd/cpci5200/strataflash.c:	return (cp[info->portwidth - 1]);
./board/esd/cpci5200/strataflash.c:	return ((addr[(2 * info->portwidth) - 1] << 8) |
./board/esd/cpci5200/strataflash.c:		addr[info->portwidth - 1]);
./board/esd/cpci5200/strataflash.c:	return ((addr[(2 * info->portwidth) - 1] << 24) |
./board/esd/cpci5200/strataflash.c:		(addr[(info->portwidth) - 1] << 16) |
./board/esd/cpci5200/strataflash.c:		(addr[(4 * info->portwidth) - 1] << 8) |
./board/esd/cpci5200/strataflash.c:		addr[(3 * info->portwidth) - 1]);
./board/esd/cpci5200/strataflash.c:	if (info->flash_id != FLASH_MAN_CFI) {
./board/esd/cpci5200/strataflash.c:		if (info->protect[sect]) {
./board/esd/cpci5200/strataflash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/esd/cpci5200/strataflash.c:			    (info, sect, info->erase_blk_tout, "erase")) {
./board/esd/cpci5200/strataflash.c:	if (info->flash_id != FLASH_MAN_CFI) {
./board/esd/cpci5200/strataflash.c:	       (info->portwidth << 3), (info->chipwidth << 3));
./board/esd/cpci5200/strataflash.c:	       info->size >> 20, info->sector_count);
./board/esd/cpci5200/strataflash.c:	     info->erase_blk_tout, info->write_tout, info->buffer_write_tout,
./board/esd/cpci5200/strataflash.c:	     info->buffer_size);
./board/esd/cpci5200/strataflash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/esd/cpci5200/strataflash.c:		       info->start[i], info->protect[i] ? " (RO)" : " ");
./board/esd/cpci5200/strataflash.c:	wp = (addr & ~(info->portwidth - 1));
./board/esd/cpci5200/strataflash.c:		for (; (i < info->portwidth) && (cnt > 0); i++) {
./board/esd/cpci5200/strataflash.c:		for (; (cnt == 0) && (i < info->portwidth); ++i, ++cp)
./board/esd/cpci5200/strataflash.c:	while (cnt >= info->portwidth) {
./board/esd/cpci5200/strataflash.c:		i = info->buffer_size > cnt ? cnt : info->buffer_size;
./board/esd/cpci5200/strataflash.c:	while (cnt >= info->portwidth) {
./board/esd/cpci5200/strataflash.c:		for (i = 0; i < info->portwidth; i++) {
./board/esd/cpci5200/strataflash.c:		wp += info->portwidth;
./board/esd/cpci5200/strataflash.c:		cnt -= info->portwidth;
./board/esd/cpci5200/strataflash.c:	for (i = 0, cp = wp; (i < info->portwidth) && (cnt > 0); ++i, ++cp) {
./board/esd/cpci5200/strataflash.c:	for (; i < info->portwidth; ++i, ++cp) {
./board/esd/cpci5200/strataflash.c:	     flash_full_status_check(info, sector, info->erase_blk_tout,
./board/esd/cpci5200/strataflash.c:		info->protect[sector] = prot;
./board/esd/cpci5200/strataflash.c:			for (i = 0; i < info->sector_count; i++) {
./board/esd/cpci5200/strataflash.c:				if (info->protect[i])
./board/esd/cpci5200/strataflash.c:		if (get_timer(start) > info->erase_blk_tout) {
./board/esd/cpci5200/strataflash.c:			       info->start[sector]);
./board/esd/cpci5200/strataflash.c:		       info->start[sector]);
./board/esd/cpci5200/strataflash.c:	switch (info->portwidth) {
./board/esd/cpci5200/strataflash.c:	for (i = 0; i < info->portwidth; i++)
./board/esd/cpci5200/strataflash.c:		*cp++ = ((i + 1) % info->chipwidth) ? '\0' : cmd;
./board/esd/cpci5200/strataflash.c:	switch (info->portwidth) {
./board/esd/cpci5200/strataflash.c:	switch (info->portwidth) {
./board/esd/cpci5200/strataflash.c:	switch (info->portwidth) {
./board/esd/cpci5200/strataflash.c:	for (info->portwidth = FLASH_CFI_8BIT;
./board/esd/cpci5200/strataflash.c:	     info->portwidth <= FLASH_CFI_32BIT; info->portwidth <<= 1) {
./board/esd/cpci5200/strataflash.c:		for (info->chipwidth = FLASH_CFI_BY8;
./board/esd/cpci5200/strataflash.c:		     info->chipwidth <= info->portwidth;
./board/esd/cpci5200/strataflash.c:		     info->chipwidth <<= 1) {
./board/esd/cpci5200/strataflash.c:	info->start[0] = base;
./board/esd/cpci5200/strataflash.c:		size_ratio = info->portwidth / info->chipwidth;
./board/esd/cpci5200/strataflash.c:				info->start[sect_cnt] = sector;
./board/esd/cpci5200/strataflash.c:				info->protect[sect_cnt] =
./board/esd/cpci5200/strataflash.c:		info->sector_count = sect_cnt;
./board/esd/cpci5200/strataflash.c:		info->size =
./board/esd/cpci5200/strataflash.c:		info->buffer_size =
./board/esd/cpci5200/strataflash.c:		info->erase_blk_tout =
./board/esd/cpci5200/strataflash.c:		info->buffer_write_tout =
./board/esd/cpci5200/strataflash.c:		info->write_tout =
./board/esd/cpci5200/strataflash.c:		info->flash_id = FLASH_MAN_CFI;
./board/esd/cpci5200/strataflash.c:	printf("portwidth=%d chipwidth=%d\n", info->portwidth, info->chipwidth);	/* test-only */
./board/esd/cpci5200/strataflash.c:	printf("size=%08x sectors=%08x \n", info->size, info->sector_count);
./board/esd/cpci5200/strataflash.c:	return (info->size);
./board/esd/cpci5200/strataflash.c:	switch (info->portwidth) {
./board/esd/cpci5200/strataflash.c:	switch (info->portwidth) {
./board/esd/cpci5200/strataflash.c:	return flash_full_status_check(info, 0, info->write_tout, "write");
./board/esd/cpci5200/strataflash.c:	for (sector = info->sector_count - 1; sector >= 0; sector--) {
./board/esd/cpci5200/strataflash.c:		if (addr >= info->start[sector])
./board/esd/cpci5200/strataflash.c:	if ((retcode = flash_status_check(info, sector, info->buffer_write_tout,
./board/esd/cpci5200/strataflash.c:		switch (info->portwidth) {
./board/esd/cpci5200/strataflash.c:			switch (info->portwidth) {
./board/esd/cpci5200/strataflash.c:					    info->buffer_write_tout,
./board/omap730p2/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/omap730p2/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/omap730p2/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/omap730p2/flash.c:				info->start[i] = base + (i * 0x8000);
./board/omap730p2/flash.c:				info->protect[i] = 0;
./board/omap730p2/flash.c:				info->start[i] = base +
./board/omap730p2/flash.c:				info->protect[i] = 0;
./board/omap730p2/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/omap730p2/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/omap730p2/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/omap730p2/flash.c:			info->size >> 20, info->sector_count);
./board/omap730p2/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/omap730p2/flash.c:			info->start[i], info->protect[i] ? " (RO)" : "     ");
./board/omap730p2/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/omap730p2/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/omap730p2/flash.c:		info->sector_count = 0;
./board/omap730p2/flash.c:		info->size = 0;
./board/omap730p2/flash.c:		info->flash_id += FLASH_28F256L18T;
./board/omap730p2/flash.c:		info->sector_count = 259;
./board/omap730p2/flash.c:		info->size = 0x02000000;
./board/omap730p2/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/omap730p2/flash.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/omap730p2/flash.c:				info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/omap730p2/flash.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/omap730p2/flash.c:	return (info->size);
./board/omap730p2/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/omap730p2/flash.c:	type = (info->flash_id & FLASH_VENDMASK);
./board/omap730p2/flash.c:				info->flash_id);
./board/omap730p2/flash.c:		if (info->protect[sect]) {
./board/omap730p2/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/omap730p2/flash.c:			FPWV *addr = (FPWV *) (info->start[sect]);
./board/omap730p2/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/sandpoint/flash.c:    pflinfo->flash_id = FLASH_UNKNOWN;
./board/sandpoint/flash.c:    pflinfo->size = 0;
./board/sandpoint/flash.c:    pflinfo->sector_count = 0;
./board/sandpoint/flash.c:    pflinfo->flash_id = flash_id(flash[0x0], flash[0x1]);
./board/sandpoint/flash.c:    pflinfo->flash_id = flash_id(flash[0x0], flash[0x2 + 14 * i]);
./board/sandpoint/flash.c:    switch(pflinfo->flash_id & FLASH_TYPEMASK)
./board/sandpoint/flash.c:	pflinfo->size = 0x00080000;
./board/sandpoint/flash.c:	pflinfo->sector_count = 8;
./board/sandpoint/flash.c:	  pflinfo->start[j] = base_address + 0x00010000 * j;
./board/sandpoint/flash.c:	  pflinfo->protect[j] = flash[(j << 16) | 0x2];
./board/sandpoint/flash.c:	pflinfo->size = 0x00100000;
./board/sandpoint/flash.c:	pflinfo->sector_count = 19;
./board/sandpoint/flash.c:	pflinfo->start[0] = base_address;
./board/sandpoint/flash.c:	pflinfo->start[1] = base_address + 0x4000;
./board/sandpoint/flash.c:	pflinfo->start[2] = base_address + 0x6000;
./board/sandpoint/flash.c:	pflinfo->start[3] = base_address + 0x8000;
./board/sandpoint/flash.c:	  pflinfo->start[j+3] = base_address + 0x00010000 * j;
./board/sandpoint/flash.c:	for (j = 0; j < pflinfo->sector_count; j++) {
./board/sandpoint/flash.c:	  addr2 = (volatile FLASH_WORD_SIZE *)(pflinfo->start[j]);
./board/sandpoint/flash.c:	    if (pflinfo->flash_id & FLASH_MAN_SST)
./board/sandpoint/flash.c:	      pflinfo->protect[j] = 0;
./board/sandpoint/flash.c:	      pflinfo->protect[j] = addr2[2] & 1;
./board/sandpoint/flash.c:	if (info->flash_id & FLASH_MAN_SST)
./board/sandpoint/flash.c:	    for (i = 0; i < info->sector_count; i++)
./board/sandpoint/flash.c:	      info->start[i] = base + (i * 0x00010000);
./board/sandpoint/flash.c:    if (info->flash_id & FLASH_BTYPE) {
./board/sandpoint/flash.c:	info->start[0] = base + 0x00000000;
./board/sandpoint/flash.c:	info->start[1] = base + 0x00004000;
./board/sandpoint/flash.c:	info->start[2] = base + 0x00006000;
./board/sandpoint/flash.c:	info->start[3] = base + 0x00008000;
./board/sandpoint/flash.c:	for (i = 4; i < info->sector_count; i++) {
./board/sandpoint/flash.c:	    info->start[i] = base + (i * 0x00010000) - 0x00030000;
./board/sandpoint/flash.c:	i = info->sector_count - 1;
./board/sandpoint/flash.c:	info->start[i--] = base + info->size - 0x00004000;
./board/sandpoint/flash.c:	info->start[i--] = base + info->size - 0x00006000;
./board/sandpoint/flash.c:	info->start[i--] = base + info->size - 0x00008000;
./board/sandpoint/flash.c:	    info->start[i] = base + i * 0x00010000;
./board/sandpoint/flash.c:  if(info->flash_id != FLASH_UNKNOWN)
./board/sandpoint/flash.c:    switch(info->flash_id & FLASH_VENDMASK)
./board/sandpoint/flash.c:    switch(info->flash_id & FLASH_TYPEMASK)
./board/sandpoint/flash.c:    info->size >> 10,
./board/sandpoint/flash.c:    info->sector_count
./board/sandpoint/flash.c:  for (i = 0; i < info->sector_count; i++)
./board/sandpoint/flash.c:    unsigned long * flash = (unsigned long *) info->start[i];
./board/sandpoint/flash.c:      (i != (info->sector_count - 1)) ?
./board/sandpoint/flash.c:      (info->start[i + 1] - info->start[i]) >> 2 :
./board/sandpoint/flash.c:      (info->start[0] + info->size - info->start[i]) >> 2;
./board/sandpoint/flash.c:      flash = (unsigned long *) info->start[i], erased = 1;
./board/sandpoint/flash.c:      (flash != (unsigned long *) info->start[i] + size) && erased;
./board/sandpoint/flash.c:      info->start[i],
./board/sandpoint/flash.c:      info->protect[i] ? "RO" : "  "
./board/sandpoint/flash.c:	info->flash_id = FLASH_MAN_AMD;
./board/sandpoint/flash.c:	info->flash_id = FLASH_MAN_FUJ;
./board/sandpoint/flash.c:	info->flash_id = FLASH_MAN_SST;
./board/sandpoint/flash.c:	info->flash_id = FLASH_UNKNOWN;
./board/sandpoint/flash.c:	info->sector_count = 0;
./board/sandpoint/flash.c:	info->size = 0;
./board/sandpoint/flash.c:	info->flash_id += FLASH_AM400T;
./board/sandpoint/flash.c:	info->sector_count = 11;
./board/sandpoint/flash.c:	info->size = 0x00080000;
./board/sandpoint/flash.c:	info->flash_id += FLASH_AM400B;
./board/sandpoint/flash.c:	info->sector_count = 11;
./board/sandpoint/flash.c:	info->size = 0x00080000;
./board/sandpoint/flash.c:	info->flash_id += FLASH_AM800T;
./board/sandpoint/flash.c:	info->sector_count = 19;
./board/sandpoint/flash.c:	info->size = 0x00100000;
./board/sandpoint/flash.c:	info->flash_id += FLASH_AM800B;
./board/sandpoint/flash.c:	info->sector_count = 19;
./board/sandpoint/flash.c:	info->size = 0x00100000;
./board/sandpoint/flash.c:	info->flash_id += FLASH_AM160T;
./board/sandpoint/flash.c:	info->sector_count = 35;
./board/sandpoint/flash.c:	info->size = 0x00200000;
./board/sandpoint/flash.c:	info->flash_id += FLASH_AM160B;
./board/sandpoint/flash.c:	info->sector_count = 35;
./board/sandpoint/flash.c:	info->size = 0x00200000;
./board/sandpoint/flash.c:	info->flash_id += FLASH_SST800A;
./board/sandpoint/flash.c:	info->sector_count = 16;
./board/sandpoint/flash.c:	info->size = 0x00100000;
./board/sandpoint/flash.c:	info->flash_id += FLASH_SST160A;
./board/sandpoint/flash.c:	info->sector_count = 32;
./board/sandpoint/flash.c:	info->size = 0x00200000;
./board/sandpoint/flash.c:	info->flash_id += FLASH_AM040;
./board/sandpoint/flash.c:	info->sector_count = 8;
./board/sandpoint/flash.c:	info->size = 0x00080000;
./board/sandpoint/flash.c:	info->flash_id = FLASH_UNKNOWN;
./board/sandpoint/flash.c:    printf("flash id %lx; sector count %x, size %lx\n", info->flash_id,info->sector_count,info->size);
./board/sandpoint/flash.c:	if (info->flash_id & FLASH_MAN_SST)
./board/sandpoint/flash.c:	    for (i = 0; i < info->sector_count; i++)
./board/sandpoint/flash.c:	      info->start[i] = base + (i * 0x00010000);
./board/sandpoint/flash.c:    if (info->flash_id & FLASH_BTYPE) {
./board/sandpoint/flash.c:	info->start[0] = base + 0x00000000;
./board/sandpoint/flash.c:	info->start[1] = base + 0x00004000;
./board/sandpoint/flash.c:	info->start[2] = base + 0x00006000;
./board/sandpoint/flash.c:	info->start[3] = base + 0x00008000;
./board/sandpoint/flash.c:	for (i = 4; i < info->sector_count; i++) {
./board/sandpoint/flash.c:	    info->start[i] = base + (i * 0x00010000) - 0x00030000;
./board/sandpoint/flash.c:	i = info->sector_count - 1;
./board/sandpoint/flash.c:	info->start[i--] = base + info->size - 0x00004000;
./board/sandpoint/flash.c:	info->start[i--] = base + info->size - 0x00006000;
./board/sandpoint/flash.c:	info->start[i--] = base + info->size - 0x00008000;
./board/sandpoint/flash.c:	    info->start[i] = base + i * 0x00010000;
./board/sandpoint/flash.c:    for (i = 0; i < info->sector_count; i++) {
./board/sandpoint/flash.c:	addr2 = (volatile FLASH_WORD_SIZE *)(info->start[i]);
./board/sandpoint/flash.c:		if (info->flash_id & FLASH_MAN_SST)
./board/sandpoint/flash.c:		  info->protect[i] = 0;
./board/sandpoint/flash.c:		  info->protect[i] = addr2[2] & 1;
./board/sandpoint/flash.c:    if (info->flash_id != FLASH_UNKNOWN) {
./board/sandpoint/flash.c:       addr2 = (FLASH_WORD_SIZE *)info->start[0];
./board/sandpoint/flash.c:    return (info->size);
./board/sandpoint/flash.c:    volatile FLASH_WORD_SIZE *addr = (FLASH_WORD_SIZE *)(info->start[0]);
./board/sandpoint/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/sandpoint/flash.c:    if ((info->flash_id == FLASH_UNKNOWN) ||
./board/sandpoint/flash.c:	(info->flash_id > (FLASH_MAN_STM | FLASH_AMD_COMP))) {
./board/sandpoint/flash.c:	if (info->protect[sect]) {
./board/sandpoint/flash.c:    if ((info->start[0] >= ROM_CS1_START) && (info->start[0] < ROM_CS0_START))
./board/sandpoint/flash.c:	if (info->protect[sect] == 0) { /* not protected */
./board/sandpoint/flash.c:	    addr = (FLASH_WORD_SIZE *)(info->start[0] + (
./board/sandpoint/flash.c:				(info->start[sect] - info->start[0]) << sh8b));
./board/sandpoint/flash.c:			if (info->flash_id & FLASH_MAN_SST)
./board/sandpoint/flash.c:    addr = (FLASH_WORD_SIZE *)(info->start[0] + (
./board/sandpoint/flash.c:			(info->start[l_sect] - info->start[0]) << sh8b));
./board/sandpoint/flash.c:    addr = (FLASH_WORD_SIZE *)info->start[0];
./board/sandpoint/flash.c:	volatile FLASH_WORD_SIZE *addr2 = (FLASH_WORD_SIZE *)info->start[0];
./board/sandpoint/flash.c:    if ((info->start[0] >= ROM_CS1_START) && (info->start[0] < ROM_CS0_START))
./board/sandpoint/flash.c:    dest2 = (FLASH_WORD_SIZE *)(((dest - info->start[0]) << sh8b) +
./board/sandpoint/flash.c:				info->start[0]);
./board/hidden_dragon/flash.c:		pflinfo->flash_id = FLASH_UNKNOWN;
./board/hidden_dragon/flash.c:		pflinfo->size = 0;
./board/hidden_dragon/flash.c:		pflinfo->sector_count = 0;
./board/hidden_dragon/flash.c:		pflinfo->flash_id =
./board/hidden_dragon/flash.c:		switch (pflinfo->flash_id & FLASH_TYPEMASK) {
./board/hidden_dragon/flash.c:			pflinfo->size = 0x00080000;
./board/hidden_dragon/flash.c:			pflinfo->sector_count = 8;
./board/hidden_dragon/flash.c:				pflinfo->start[j] =
./board/hidden_dragon/flash.c:				pflinfo->protect[j] = flash[(j << 16) | 0x2];
./board/hidden_dragon/flash.c:			pflinfo->size = 0x00100000;
./board/hidden_dragon/flash.c:			pflinfo->sector_count = 19;
./board/hidden_dragon/flash.c:			pflinfo->start[0] = base_address;
./board/hidden_dragon/flash.c:			pflinfo->start[1] = base_address + 0x4000;
./board/hidden_dragon/flash.c:			pflinfo->start[2] = base_address + 0x6000;
./board/hidden_dragon/flash.c:			pflinfo->start[3] = base_address + 0x8000;
./board/hidden_dragon/flash.c:				pflinfo->start[j + 3] =
./board/hidden_dragon/flash.c:				pflinfo->size = 0x00200000;
./board/hidden_dragon/flash.c:				pflinfo->sector_count = 35;
./board/hidden_dragon/flash.c:				pflinfo->start[0] = sector_addr;
./board/hidden_dragon/flash.c:				pflinfo->start[1] = sector_addr;
./board/hidden_dragon/flash.c:				pflinfo->start[2] = sector_addr;
./board/hidden_dragon/flash.c:				pflinfo->start[3] = sector_addr;
./board/hidden_dragon/flash.c:					pflinfo->start[j] = sector_addr;
./board/hidden_dragon/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/hidden_dragon/flash.c:		switch (info->flash_id & FLASH_VENDMASK) {
./board/hidden_dragon/flash.c:		switch (info->flash_id & FLASH_TYPEMASK) {
./board/hidden_dragon/flash.c:		mfct, type, info->size >> 10, info->sector_count);
./board/hidden_dragon/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/hidden_dragon/flash.c:		unsigned long *flash = (unsigned long *) info->start[i];
./board/hidden_dragon/flash.c:		size = (i != (info->sector_count - 1)) ?
./board/hidden_dragon/flash.c:			(info->start[i + 1] - info->start[i]) >> 2 :
./board/hidden_dragon/flash.c:			(info->start[0] + info->size - info->start[i]) >> 2;
./board/hidden_dragon/flash.c:		for (flash = (unsigned long *) info->start[i], erased = 1;
./board/hidden_dragon/flash.c:		     (flash != (unsigned long *) info->start[i] + size)
./board/hidden_dragon/flash.c:			info->start[i],
./board/hidden_dragon/flash.c:			erased ? "E" : " ", info->protect[i] ? "RO" : "  ");
./board/hidden_dragon/flash.c:	volatile FLASH_WORD_SIZE *addr = (FLASH_WORD_SIZE *) (info->start[0]);
./board/hidden_dragon/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/hidden_dragon/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/hidden_dragon/flash.c:	    (info->flash_id > (FLASH_MAN_STM | FLASH_AMD_COMP))) {
./board/hidden_dragon/flash.c:		if (info->protect[sect]) {
./board/hidden_dragon/flash.c:	if ((info->start[0] >= ROM_CS1_START)
./board/hidden_dragon/flash.c:	    && (info->start[0] < ROM_CS0_START))
./board/hidden_dragon/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/hidden_dragon/flash.c:			addr = (FLASH_WORD_SIZE *) (info->start[0] +
./board/hidden_dragon/flash.c:						    ((info->start[sect] -
./board/hidden_dragon/flash.c:						      info->start[0]) << sh8b));
./board/hidden_dragon/flash.c:			if (info->flash_id & FLASH_MAN_SST) {
./board/hidden_dragon/flash.c:	addr = (FLASH_WORD_SIZE *) (info->start[0] + ((info->start[l_sect] -
./board/hidden_dragon/flash.c:						       info->
./board/hidden_dragon/flash.c:	addr = (FLASH_WORD_SIZE *) info->start[0];
./board/hidden_dragon/flash.c:	volatile FLASH_WORD_SIZE *addr2 = (FLASH_WORD_SIZE *) info->start[0];
./board/hidden_dragon/flash.c:	if ((info->start[0] >= ROM_CS1_START)
./board/hidden_dragon/flash.c:	    && (info->start[0] < ROM_CS0_START))
./board/hidden_dragon/flash.c:	dest2 = (FLASH_WORD_SIZE *) (((dest - info->start[0]) << sh8b) +
./board/hidden_dragon/flash.c:				     info->start[0]);
./board/mx1fs2/flash.c:	FPWV *base = (FPWV *) (info->start[0]);
./board/mx1fs2/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL)
./board/mx1fs2/flash.c:	else if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_AMD)
./board/mx1fs2/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL
./board/mx1fs2/flash.c:	    && (info->flash_id & FLASH_BTYPE)) {
./board/mx1fs2/flash.c:			info->start[i] = base + (i * bootsect_size);
./board/mx1fs2/flash.c:		for (i = 8; i < info->sector_count; i++) {
./board/mx1fs2/flash.c:			info->start[i] = base + ((i - 7) * sect_size);
./board/mx1fs2/flash.c:	} else if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_AMD
./board/mx1fs2/flash.c:		   && (info->flash_id & FLASH_TYPEMASK) == FLASH_AM640U) {
./board/mx1fs2/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/mx1fs2/flash.c:			info->start[i] = base + (i * sect_size);
./board/mx1fs2/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/mx1fs2/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/mx1fs2/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/mx1fs2/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/mx1fs2/flash.c:	       info->size >> 20, info->sector_count);
./board/mx1fs2/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/mx1fs2/flash.c:		printf(" %08lX%s", info->start[i],
./board/mx1fs2/flash.c:		       info->protect[i] ? " (RO)" : "     ");
./board/mx1fs2/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/mx1fs2/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/mx1fs2/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/mx1fs2/flash.c:		info->sector_count = 0;
./board/mx1fs2/flash.c:		info->size = 0;
./board/mx1fs2/flash.c:	if (info->flash_id != FLASH_UNKNOWN)
./board/mx1fs2/flash.c:			info->flash_id += FLASH_AM640U;
./board/mx1fs2/flash.c:			info->sector_count = 128;
./board/mx1fs2/flash.c:			info->size = 0x00800000 * (sizeof (FPW) / 2);
./board/mx1fs2/flash.c:			info->flash_id += FLASH_28F800C3B;
./board/mx1fs2/flash.c:			info->sector_count = 23;
./board/mx1fs2/flash.c:			info->size = 0x00100000 * (sizeof (FPW) / 2);
./board/mx1fs2/flash.c:			info->flash_id += FLASH_INTEL800B;
./board/mx1fs2/flash.c:			info->sector_count = 23;
./board/mx1fs2/flash.c:			info->size = 0x00100000 * (sizeof (FPW) / 2);
./board/mx1fs2/flash.c:			info->flash_id += FLASH_28F160C3B;
./board/mx1fs2/flash.c:			info->sector_count = 39;
./board/mx1fs2/flash.c:			info->size = 0x00200000 * (sizeof (FPW) / 2);
./board/mx1fs2/flash.c:			info->flash_id += FLASH_INTEL160B;
./board/mx1fs2/flash.c:			info->sector_count = 39;
./board/mx1fs2/flash.c:			info->size = 0x00200000 * (sizeof (FPW) / 2);
./board/mx1fs2/flash.c:			info->flash_id += FLASH_28F320C3B;
./board/mx1fs2/flash.c:			info->sector_count = 71;
./board/mx1fs2/flash.c:			info->size = 0x00400000 * (sizeof (FPW) / 2);
./board/mx1fs2/flash.c:			info->flash_id += FLASH_INTEL320B;
./board/mx1fs2/flash.c:			info->sector_count = 71;
./board/mx1fs2/flash.c:			info->size = 0x00400000 * (sizeof (FPW) / 2);
./board/mx1fs2/flash.c:			info->flash_id += FLASH_28F640C3B;
./board/mx1fs2/flash.c:			info->sector_count = 135;
./board/mx1fs2/flash.c:			info->size = 0x00800000 * (sizeof (FPW) / 2);
./board/mx1fs2/flash.c:			info->flash_id += FLASH_INTEL640B;
./board/mx1fs2/flash.c:			info->sector_count = 135;
./board/mx1fs2/flash.c:			info->size = 0x00800000 * (sizeof (FPW) / 2);
./board/mx1fs2/flash.c:			info->flash_id = FLASH_UNKNOWN;
./board/mx1fs2/flash.c:			info->sector_count = 0;
./board/mx1fs2/flash.c:			info->size = 0;
./board/mx1fs2/flash.c:	return (info->size);
./board/mx1fs2/flash.c:	FPWV *addr = (FPWV *) (info->start[0]);
./board/mx1fs2/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/mx1fs2/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/mx1fs2/flash.c:			sect = (FPWV *) (info->start[i]);
./board/mx1fs2/flash.c:			info->protect[i] =
./board/mx1fs2/flash.c:	int intel = (info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL;
./board/mx1fs2/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/mx1fs2/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/mx1fs2/flash.c:		       info->flash_id);
./board/mx1fs2/flash.c:		if (info->protect[sect]) {
./board/mx1fs2/flash.c:		if (info->protect[sect] != 0)	/* protected, skip it */
./board/mx1fs2/flash.c:		addr = (FPWV *) (info->start[sect]);
./board/mx1fs2/flash.c:			base = (FPWV *) (info->start[0]);
./board/mx1fs2/flash.c:		switch (info->flash_id & FLASH_VENDMASK) {
./board/mx1fs2/flash.c:	base = (FPWV *) (info->start[0]);
./board/mx1fs2/flash.c:	addr = (FPWV *) (info->start[sector]);
./board/mx1fs2/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/mx1fs2/flash.c:			info->protect[sector] = 0;
./board/mx1fs2/flash.c:			info->protect[sector] = 1;
./board/mx1fs2/flash.c:			info->protect[sector] = 1;
./board/mx1fs2/flash.c:		if (info->protect[sector] != prot)
./board/mx1fs2/flash.c:		info->protect[sector] = prot;
./board/exbitgen/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/exbitgen/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/exbitgen/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/exbitgen/flash.c:		info->size >> 10, info->sector_count);
./board/exbitgen/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/exbitgen/flash.c:			info->start[i],
./board/exbitgen/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/exbitgen/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/exbitgen/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/exbitgen/flash.c:		info->flash_id = FLASH_MAN_SST;
./board/exbitgen/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/exbitgen/flash.c:		info->sector_count = 0;
./board/exbitgen/flash.c:		info->size = 0;
./board/exbitgen/flash.c:		info->flash_id += FLASH_AM040;
./board/exbitgen/flash.c:		info->sector_count = 8;
./board/exbitgen/flash.c:		info->size = 0x0080000; /* => 512 ko */
./board/exbitgen/flash.c:		info->flash_id += FLASH_AM400T;
./board/exbitgen/flash.c:		info->sector_count = 11;
./board/exbitgen/flash.c:		info->size = 0x00080000;
./board/exbitgen/flash.c:		info->flash_id += FLASH_AM400B;
./board/exbitgen/flash.c:		info->sector_count = 11;
./board/exbitgen/flash.c:		info->size = 0x00080000;
./board/exbitgen/flash.c:		info->flash_id += FLASH_AM800T;
./board/exbitgen/flash.c:		info->sector_count = 19;
./board/exbitgen/flash.c:		info->size = 0x00100000;
./board/exbitgen/flash.c:		info->flash_id += FLASH_AM800B;
./board/exbitgen/flash.c:		info->sector_count = 19;
./board/exbitgen/flash.c:		info->size = 0x00100000;
./board/exbitgen/flash.c:		info->flash_id += FLASH_AM160T;
./board/exbitgen/flash.c:		info->sector_count = 35;
./board/exbitgen/flash.c:		info->size = 0x00200000;
./board/exbitgen/flash.c:		info->flash_id += FLASH_AM160B;
./board/exbitgen/flash.c:		info->sector_count = 35;
./board/exbitgen/flash.c:		info->size = 0x00200000;
./board/exbitgen/flash.c:		info->flash_id += FLASH_AMDLV033C;
./board/exbitgen/flash.c:		info->sector_count = 64;
./board/exbitgen/flash.c:		info->size = 0x00400000;
./board/exbitgen/flash.c:		info->flash_id += FLASH_AMDLV065D;
./board/exbitgen/flash.c:		info->sector_count = 128;
./board/exbitgen/flash.c:		info->size = 0x00800000;
./board/exbitgen/flash.c:		info->flash_id += FLASH_AM320T;
./board/exbitgen/flash.c:		info->sector_count = 67;
./board/exbitgen/flash.c:		info->size = 0x00400000;
./board/exbitgen/flash.c:		info->flash_id += FLASH_AM320B;
./board/exbitgen/flash.c:		info->sector_count = 67;
./board/exbitgen/flash.c:		info->size = 0x00400000;
./board/exbitgen/flash.c:		info->flash_id += FLASH_SST800A;
./board/exbitgen/flash.c:		info->sector_count = 16;
./board/exbitgen/flash.c:		info->size = 0x00100000;
./board/exbitgen/flash.c:		info->flash_id += FLASH_SST160A;
./board/exbitgen/flash.c:		info->sector_count = 32;
./board/exbitgen/flash.c:		info->size = 0x00200000;
./board/exbitgen/flash.c:		info->flash_id += FLASH_SST040;
./board/exbitgen/flash.c:		info->sector_count = 128;
./board/exbitgen/flash.c:		info->size = 0x00080000;
./board/exbitgen/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/exbitgen/flash.c:	if (((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) ||
./board/exbitgen/flash.c:		(info->flash_id  == FLASH_AM040) ||
./board/exbitgen/flash.c:		(info->flash_id == FLASH_AMDLV033C) ||
./board/exbitgen/flash.c:		(info->flash_id == FLASH_AMDLV065D)) {
./board/exbitgen/flash.c:		ulong sectsize = info->size / info->sector_count;
./board/exbitgen/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/exbitgen/flash.c:			info->start[i] = base + (i * sectsize);
./board/exbitgen/flash.c:	    if (info->flash_id & FLASH_BTYPE) {
./board/exbitgen/flash.c:		info->start[0] = base + 0x00000000;
./board/exbitgen/flash.c:		info->start[1] = base + 0x00004000;
./board/exbitgen/flash.c:		info->start[2] = base + 0x00006000;
./board/exbitgen/flash.c:		info->start[3] = base + 0x00008000;
./board/exbitgen/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/exbitgen/flash.c:			info->start[i] = base + (i * 0x00010000) - 0x00030000;
./board/exbitgen/flash.c:		i = info->sector_count - 1;
./board/exbitgen/flash.c:		info->start[i--] = base + info->size - 0x00004000;
./board/exbitgen/flash.c:		info->start[i--] = base + info->size - 0x00006000;
./board/exbitgen/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/exbitgen/flash.c:			info->start[i] = base + i * 0x00010000;
./board/exbitgen/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/exbitgen/flash.c:		addr2 = (volatile FLASH_WORD_SIZE *)(info->start[i]);
./board/exbitgen/flash.c:		if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST)
./board/exbitgen/flash.c:			info->protect[i] = 0;
./board/exbitgen/flash.c:			info->protect[i] = addr2[2] & 1;
./board/exbitgen/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/exbitgen/flash.c:		addr2 = (FLASH_WORD_SIZE *)info->start[0];
./board/exbitgen/flash.c:	return (info->size);
./board/exbitgen/flash.c:	volatile FLASH_WORD_SIZE *addr = (FLASH_WORD_SIZE *)(info->start[0]);
./board/exbitgen/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/exbitgen/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/exbitgen/flash.c:		if (info->protect[sect]) {
./board/exbitgen/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/exbitgen/flash.c:			addr2 = (FLASH_WORD_SIZE *)(info->start[sect]);
./board/exbitgen/flash.c:	volatile FLASH_WORD_SIZE *addr2 = (FLASH_WORD_SIZE *)(info->start[0]);
./board/tqc/tqm5200/cam5200_flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/tqc/tqm5200/cam5200_flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/tqc/tqm5200/cam5200_flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/tqc/tqm5200/cam5200_flash.c:			info->size >> 10, info->sector_count);
./board/tqc/tqm5200/cam5200_flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/tqc/tqm5200/cam5200_flash.c:		if (i != (info->sector_count - 1))
./board/tqc/tqm5200/cam5200_flash.c:			size = info->start[i + 1] - info->start[i];
./board/tqc/tqm5200/cam5200_flash.c:			size = info->start[0] + info->size - info->start[i];
./board/tqc/tqm5200/cam5200_flash.c:		flash = (volatile unsigned long *)info->start[i];
./board/tqc/tqm5200/cam5200_flash.c:		printf(" %08lX%s%s", info->start[i],
./board/tqc/tqm5200/cam5200_flash.c:				info->protect[i] ? "RO " : "   ");
./board/tqc/tqm5200/cam5200_flash.c:			info->flash_id = FLASH_MAN_AMD;
./board/tqc/tqm5200/cam5200_flash.c:			info->flash_id = FLASH_UNKNOWN;
./board/tqc/tqm5200/cam5200_flash.c:			info->sector_count = 0;
./board/tqc/tqm5200/cam5200_flash.c:			info->size = 0;
./board/tqc/tqm5200/cam5200_flash.c:						info->flash_id = FLASH_UNKNOWN;
./board/tqc/tqm5200/cam5200_flash.c:						info->flash_id += FLASH_S29GL128N;
./board/tqc/tqm5200/cam5200_flash.c:						info->sector_count = 128;
./board/tqc/tqm5200/cam5200_flash.c:						info->size = 0x02000000;
./board/tqc/tqm5200/cam5200_flash.c:					info->flash_id = FLASH_UNKNOWN;
./board/tqc/tqm5200/cam5200_flash.c:			info->flash_id = FLASH_UNKNOWN;
./board/tqc/tqm5200/cam5200_flash.c:	for (i = 0; i < info->sector_count; i++)
./board/tqc/tqm5200/cam5200_flash.c:		info->start[i] = base + (i * 0x00040000);
./board/tqc/tqm5200/cam5200_flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/tqc/tqm5200/cam5200_flash.c:		addr2 = (volatile CONFIG_SYS_FLASH_WORD_SIZE *)(info->start[i]);
./board/tqc/tqm5200/cam5200_flash.c:		info->protect[i] = addr2[2] & 1;
./board/tqc/tqm5200/cam5200_flash.c:	return (info->size);
./board/tqc/tqm5200/cam5200_flash.c:		(CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[sect]);
./board/tqc/tqm5200/cam5200_flash.c:	if ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM320B) {
./board/tqc/tqm5200/cam5200_flash.c:	volatile CONFIG_SYS_FLASH_WORD_SIZE *addr = (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[0]);
./board/tqc/tqm5200/cam5200_flash.c:		if (info->flash_id == FLASH_UNKNOWN)
./board/tqc/tqm5200/cam5200_flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/tqc/tqm5200/cam5200_flash.c:		if (info->protect[sect])
./board/tqc/tqm5200/cam5200_flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/tqc/tqm5200/cam5200_flash.c:			addr2 = (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[sect]);
./board/tqc/tqm5200/cam5200_flash.c:	addr = (CONFIG_SYS_FLASH_WORD_SIZE *) info->start[0];
./board/tqc/tqm5200/cam5200_flash.c:	if ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM320B) {
./board/tqc/tqm5200/cam5200_flash.c:	volatile CONFIG_SYS_FLASH_WORD_SIZE *addr2 = (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[0]);
./board/tqc/tqm5200/cam5200_flash.c:			info->flash_id = FLASH_MAN_AMD;
./board/tqc/tqm5200/cam5200_flash.c:			info->flash_id = FLASH_MAN_FUJ;
./board/tqc/tqm5200/cam5200_flash.c:			info->flash_id = FLASH_UNKNOWN;
./board/tqc/tqm5200/cam5200_flash.c:			info->sector_count = 0;
./board/tqc/tqm5200/cam5200_flash.c:			info->size = 0;
./board/tqc/tqm5200/cam5200_flash.c:			info->flash_id += FLASH_AM320B;
./board/tqc/tqm5200/cam5200_flash.c:			info->sector_count = 71;
./board/tqc/tqm5200/cam5200_flash.c:			info->size = 0x00400000;
./board/tqc/tqm5200/cam5200_flash.c:			info->flash_id += FLASH_AM320T;
./board/tqc/tqm5200/cam5200_flash.c:			info->sector_count = 71;
./board/tqc/tqm5200/cam5200_flash.c:			info->size = 0x00400000;
./board/tqc/tqm5200/cam5200_flash.c:			info->flash_id = FLASH_UNKNOWN;
./board/tqc/tqm5200/cam5200_flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/tqc/tqm5200/cam5200_flash.c:		info->start[0] = base + 0x00000000;
./board/tqc/tqm5200/cam5200_flash.c:		info->start[1] = base + 0x00002000;
./board/tqc/tqm5200/cam5200_flash.c:		info->start[2] = base + 0x00004000;
./board/tqc/tqm5200/cam5200_flash.c:		info->start[3] = base + 0x00006000;
./board/tqc/tqm5200/cam5200_flash.c:		info->start[4] = base + 0x00008000;
./board/tqc/tqm5200/cam5200_flash.c:		info->start[5] = base + 0x0000a000;
./board/tqc/tqm5200/cam5200_flash.c:		info->start[6] = base + 0x0000c000;
./board/tqc/tqm5200/cam5200_flash.c:		info->start[7] = base + 0x0000e000;
./board/tqc/tqm5200/cam5200_flash.c:		for (i = 8; i < info->sector_count; i++)
./board/tqc/tqm5200/cam5200_flash.c:			info->start[i] = base + (i * 0x00010000) - 0x00070000;
./board/tqc/tqm5200/cam5200_flash.c:		i = info->sector_count - 1;
./board/tqc/tqm5200/cam5200_flash.c:		info->start[i--] = base + info->size - 0x00002000;
./board/tqc/tqm5200/cam5200_flash.c:		info->start[i--] = base + info->size - 0x00004000;
./board/tqc/tqm5200/cam5200_flash.c:		info->start[i--] = base + info->size - 0x00006000;
./board/tqc/tqm5200/cam5200_flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/tqc/tqm5200/cam5200_flash.c:		info->start[i--] = base + info->size - 0x0000a000;
./board/tqc/tqm5200/cam5200_flash.c:		info->start[i--] = base + info->size - 0x0000c000;
./board/tqc/tqm5200/cam5200_flash.c:		info->start[i--] = base + info->size - 0x0000e000;
./board/tqc/tqm5200/cam5200_flash.c:			info->start[i] = base + i * 0x00010000;
./board/tqc/tqm5200/cam5200_flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/tqc/tqm5200/cam5200_flash.c:		addr2 = (volatile CONFIG_SYS_FLASH_WORD_SIZE *)(info->start[i]);
./board/tqc/tqm5200/cam5200_flash.c:		info->protect[i] = addr2[2] & 1;
./board/tqc/tqm5200/cam5200_flash.c:	return (info->size);
./board/tqc/tqm5200/cam5200_flash.c:		(CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[sect]);
./board/tqc/tqm5200/cam5200_flash.c:	volatile CONFIG_SYS_FLASH_WORD_SIZE *addr = (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[0]);
./board/tqc/tqm5200/cam5200_flash.c:		if (info->flash_id == FLASH_UNKNOWN)
./board/tqc/tqm5200/cam5200_flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/tqc/tqm5200/cam5200_flash.c:		if (info->protect[sect])
./board/tqc/tqm5200/cam5200_flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/tqc/tqm5200/cam5200_flash.c:			addr2 = (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[sect]);
./board/tqc/tqm5200/cam5200_flash.c:	addr = (CONFIG_SYS_FLASH_WORD_SIZE *) info->start[0];
./board/tqc/tqm5200/cam5200_flash.c:	volatile CONFIG_SYS_FLASH_WORD_SIZE *addr2 = (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[0]);
./board/tqc/tqm8272/nand.c:	struct nand_chip *this = mtdinfo->priv;
./board/tqc/tqm8272/nand.c:	struct nand_chip *this = mtdinfo->priv;
./board/tqc/tqm8272/nand.c:	struct nand_chip *this = mtdinfo->priv;
./board/tqc/tqm8272/nand.c:	struct nand_chip *this = mtdinfo->priv;
./board/tqc/tqm8272/nand.c:	struct nand_chip *this = mtdinfo->priv;
./board/w7o/flash.c:    if ((info->flash_id & FLASH_TYPEMASK)  == FLASH_AM040) {
./board/w7o/flash.c:	for (i = 0; i < info->sector_count; i++)
./board/w7o/flash.c:	    info->start[i] = base + (i * 0x00010000);
./board/w7o/flash.c:    if (info->flash_id == FLASH_UNKNOWN) {
./board/w7o/flash.c:    switch (info->flash_id & FLASH_VENDMASK) {
./board/w7o/flash.c:    switch (info->flash_id & FLASH_TYPEMASK) {
./board/w7o/flash.c:	    if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_AMD)
./board/w7o/flash.c:	    else if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_STM)
./board/w7o/flash.c:    if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_STM) {
./board/w7o/flash.c:		info->size >> 10, info->sector_count);
./board/w7o/flash.c:		info->size >> 10, info->sector_count);
./board/w7o/flash.c:    for (i=0; i<info->sector_count; ++i) {
./board/w7o/flash.c:	if (i != (info->sector_count-1))
./board/w7o/flash.c:	    size = info->start[i+1] - info->start[i];
./board/w7o/flash.c:	    size = info->start[0] + info->size - info->start[i];
./board/w7o/flash.c:	flash = (volatile unsigned long *)info->start[i];
./board/w7o/flash.c:	    info->start[i],
./board/w7o/flash.c:	    info->protect[i] ? "RO " : "   "
./board/w7o/flash.c:    info->flash_id = FLASH_UNKNOWN;
./board/w7o/flash.c:    info->sector_count =0;
./board/w7o/flash.c:    info->size = 0;
./board/w7o/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/w7o/flash.c:		info->flash_id = FLASH_MAN_STM;
./board/w7o/flash.c:		info->flash_id += FLASH_AM040;
./board/w7o/flash.c:		info->sector_count = 8;
./board/w7o/flash.c:		info->size = 0x00080000;
./board/w7o/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/w7o/flash.c:		info->flash_id += FLASH_28F320J3A;
./board/w7o/flash.c:		info->sector_count = 32;
./board/w7o/flash.c:		info->size = 0x00400000 * 2;
./board/w7o/flash.c:		info->flash_id += FLASH_28F640J3A;
./board/w7o/flash.c:		info->sector_count = 64;
./board/w7o/flash.c:		info->size = 0x00800000 * 2;
./board/w7o/flash.c:		info->flash_id += FLASH_28F128J3A;
./board/w7o/flash.c:		info->sector_count = 128;
./board/w7o/flash.c:		info->size = 0x01000000 * 2;
./board/w7o/flash.c:    if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/w7o/flash.c:		info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/w7o/flash.c:	info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/w7o/flash.c:    switch (info->flash_id & FLASH_TYPEMASK) {
./board/w7o/flash.c:	    for (i = 0; i < info->sector_count; i++)
./board/w7o/flash.c:		info->start[i] = base + (i * 0x00010000);
./board/w7o/flash.c:	    for (i = 0; i < info->sector_count; i++)
./board/w7o/flash.c:		info->start[i] = base + (i * 0x00020000 * 2); /* 2 Banks */
./board/w7o/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/w7o/flash.c:	    addr2 = (volatile unsigned char *)(info->start[i]);
./board/w7o/flash.c:	    info->protect[i] = *(addr2 + 2) & 1;
./board/w7o/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/w7o/flash.c:	    addr2 = (volatile unsigned long *)(info->start[i]);
./board/w7o/flash.c:	    info->protect[i] = *(addr2 + 2) & 0x1;
./board/w7o/flash.c:    return (info->size);
./board/w7o/flash.c:    volatile uchar *addr = (uchar *)(info->start[0]);
./board/w7o/flash.c:	if (info->flash_id == FLASH_UNKNOWN)
./board/w7o/flash.c:    if (info->flash_id == FLASH_UNKNOWN) {
./board/w7o/flash.c:	if (info->protect[sect])
./board/w7o/flash.c:	if (info->protect[sect] == 0) {      /* not protected */
./board/w7o/flash.c:	    sector_addr = (uchar *)(info->start[sect]);
./board/w7o/flash.c:		if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_STM)
./board/w7o/flash.c:    addr = (uchar *)info->start[0];
./board/w7o/flash.c:	if (info->flash_id == FLASH_UNKNOWN)
./board/w7o/flash.c:    if ((info->flash_id & FLASH_VENDMASK) != FLASH_MAN_INTEL) {
./board/w7o/flash.c:	if (info->protect[sect])
./board/w7o/flash.c:	if (info->protect[sect] == 0) {      /* not protected */
./board/w7o/flash.c:	    vu_long *addr = (vu_long *)(info->start[sect]);
./board/w7o/flash.c:    if ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM040)
./board/w7o/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/w7o/flash.c:    if ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM040)
./board/w7o/flash.c:    volatile uchar *addr2 = (uchar *)(info->start[0]);
./board/w7o/flash.c:    switch(info->flash_id & FLASH_TYPEMASK) {
./board/w7o/flash.c:    for (i = 0; i < info->sector_count; i++) {
./board/w7o/flash.c:	if (info->start[i] == sector) {
./board/w7o/flash.c:	    info->protect[i] = 1;
./board/w7o/flash.c:    switch(info->flash_id & FLASH_TYPEMASK) {
./board/w7o/flash.c:    for (i = 0; i < info->sector_count; i++) {
./board/w7o/flash.c:	if (info->start[i] != sector) {
./board/w7o/flash.c:	    if (info->protect[i]) {
./board/w7o/flash.c:		if (_flash_protect(info, info->start[i]))
./board/w7o/flash.c:	    info->protect[i] = 0;
./board/w7o/flash.c:	rcode = _flash_protect(info, info->start[sector]);
./board/w7o/flash.c:	rcode = _flash_unprotect(info, info->start[sector]);
./board/sbc405/strataflash.c:	return ((uchar *)(info->start[sect] + (offset * info->portwidth)));
./board/sbc405/strataflash.c:	return (cp[info->portwidth - 1]);
./board/sbc405/strataflash.c:    return ((addr[(2*info->portwidth) - 1] << 8) | addr[info->portwidth - 1]);
./board/sbc405/strataflash.c:    return ( (addr[(2*info->portwidth) - 1] << 24 ) | (addr[(info->portwidth) -1] << 16) |
./board/sbc405/strataflash.c:	    (addr[(4*info->portwidth) - 1] << 8) | addr[(3*info->portwidth) - 1]);
./board/sbc405/strataflash.c:	if( info->flash_id != FLASH_MAN_CFI) {
./board/sbc405/strataflash.c:		if (info->protect[sect]) {
./board/sbc405/strataflash.c:		if (info->protect[sect] == 0) { /* not protected */
./board/sbc405/strataflash.c:			if(flash_full_status_check(info, sect, info->erase_blk_tout, "erase")) {
./board/sbc405/strataflash.c:	if (info->flash_id != FLASH_MAN_CFI) {
./board/sbc405/strataflash.c:	       (info->portwidth	 << 3 ), (info->chipwidth  << 3 ));
./board/sbc405/strataflash.c:		info->size >> 20, info->sector_count);
./board/sbc405/strataflash.c:	       info->erase_blk_tout, info->write_tout, info->buffer_write_tout, info->buffer_size);
./board/sbc405/strataflash.c:	for (i=0; i<info->sector_count; ++i) {
./board/sbc405/strataflash.c:		if (i != (info->sector_count-1))
./board/sbc405/strataflash.c:		  size = info->start[i+1] - info->start[i];
./board/sbc405/strataflash.c:		  size = info->start[0] + info->size - info->start[i];
./board/sbc405/strataflash.c:		flash = (volatile unsigned long *)info->start[i];
./board/sbc405/strataflash.c:			info->start[i],
./board/sbc405/strataflash.c:			info->protect[i] ? "RO " : "   ");
./board/sbc405/strataflash.c:			info->start[i],
./board/sbc405/strataflash.c:			info->protect[i] ? " (RO)" : "     ");
./board/sbc405/strataflash.c:	wp = (addr & ~(info->portwidth - 1));
./board/sbc405/strataflash.c:		for(; (i< info->portwidth) && (cnt > 0) ; i++) {
./board/sbc405/strataflash.c:		for(; (cnt == 0) && (i < info->portwidth); ++i, ++cp)
./board/sbc405/strataflash.c:	while(cnt >= info->portwidth) {
./board/sbc405/strataflash.c:		i = info->buffer_size > cnt? cnt: info->buffer_size;
./board/sbc405/strataflash.c:	while(cnt >= info->portwidth) {
./board/sbc405/strataflash.c:		for(i = 0; i < info->portwidth; i++) {
./board/sbc405/strataflash.c:		wp += info->portwidth;
./board/sbc405/strataflash.c:		cnt -= info->portwidth;
./board/sbc405/strataflash.c:	for (i=0, cp=wp; (i<info->portwidth) && (cnt>0); ++i, ++cp) {
./board/sbc405/strataflash.c:	for (; i<info->portwidth; ++i, ++cp) {
./board/sbc405/strataflash.c:	if((retcode = flash_full_status_check(info, sector, info->erase_blk_tout,
./board/sbc405/strataflash.c:		info->protect[sector] = prot;
./board/sbc405/strataflash.c:			for(i = 0 ; i<info->sector_count; i++) {
./board/sbc405/strataflash.c:				if(info->protect[i])
./board/sbc405/strataflash.c:		if (get_timer(start) > info->erase_blk_tout) {
./board/sbc405/strataflash.c:			printf("Flash %s timeout at address %lx\n", prompt, info->start[sector]);
./board/sbc405/strataflash.c:		printf("Flash %s error at address %lx\n", prompt,info->start[sector]);
./board/sbc405/strataflash.c:	switch(info->portwidth) {
./board/sbc405/strataflash.c:	for(i=0; i< info->portwidth; i++)
./board/sbc405/strataflash.c:		*cp++ = ((i+1) % info->chipwidth) ? '\0':cmd;
./board/sbc405/strataflash.c:	switch(info->portwidth) {
./board/sbc405/strataflash.c:	switch(info->portwidth) {
./board/sbc405/strataflash.c:	switch(info->portwidth) {
./board/sbc405/strataflash.c:	for(info->portwidth=FLASH_CFI_8BIT; info->portwidth <= FLASH_CFI_32BIT;
./board/sbc405/strataflash.c:	    info->portwidth <<= 1) {
./board/sbc405/strataflash.c:		for(info->chipwidth =FLASH_CFI_BY8;
./board/sbc405/strataflash.c:		    info->chipwidth <= info->portwidth;
./board/sbc405/strataflash.c:		    info->chipwidth <<= 1) {
./board/sbc405/strataflash.c:	info->start[0] = base;
./board/sbc405/strataflash.c:		printf("portwidth=%d chipwidth=%d\n", info->portwidth, info->chipwidth); /* test-only */
./board/sbc405/strataflash.c:		size_ratio = info->portwidth / info->chipwidth;
./board/sbc405/strataflash.c:				info->start[sect_cnt] = sector;
./board/sbc405/strataflash.c:				info->protect[sect_cnt] = flash_isset(info, sect_cnt, FLASH_OFFSET_PROTECT, FLASH_STATUS_PROTECT);
./board/sbc405/strataflash.c:		info->sector_count = sect_cnt;
./board/sbc405/strataflash.c:		info->size = (1 << flash_read_uchar(info, FLASH_OFFSET_SIZE)) * size_ratio;
./board/sbc405/strataflash.c:		info->buffer_size = (1 << flash_read_ushort(info, 0, FLASH_OFFSET_BUFFER_SIZE));
./board/sbc405/strataflash.c:		info->erase_blk_tout = (tmp * (1 << flash_read_uchar(info, FLASH_OFFSET_EMAX_TOUT)));
./board/sbc405/strataflash.c:		info->buffer_write_tout = (tmp * (1 << flash_read_uchar(info, FLASH_OFFSET_WBMAX_TOUT)));
./board/sbc405/strataflash.c:		info->write_tout = (tmp * (1 << flash_read_uchar(info, FLASH_OFFSET_WMAX_TOUT)))/ 1000;
./board/sbc405/strataflash.c:		info->flash_id = FLASH_MAN_CFI;
./board/sbc405/strataflash.c:	return(info->size);
./board/sbc405/strataflash.c:	switch(info->portwidth) {
./board/sbc405/strataflash.c:	switch(info->portwidth) {
./board/sbc405/strataflash.c:	return flash_full_status_check(info, 0, info->write_tout, "write");
./board/sbc405/strataflash.c:	for(sector = info->sector_count - 1; sector >= 0; sector--) {
./board/sbc405/strataflash.c:		if(addr >= info->start[sector])
./board/sbc405/strataflash.c:	if((retcode = flash_status_check(info, sector, info->buffer_write_tout,
./board/sbc405/strataflash.c:		switch(info->portwidth) {
./board/sbc405/strataflash.c:			switch(info->portwidth) {
./board/sbc405/strataflash.c:		retcode = flash_full_status_check(info, sector, info->buffer_write_tout,
./board/RPXClassic/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/RPXClassic/flash.c:		info->start[0] = base + 0x00000000;
./board/RPXClassic/flash.c:		info->start[1] = base + 0x00008000;
./board/RPXClassic/flash.c:		info->start[2] = base + 0x00010000;
./board/RPXClassic/flash.c:		info->start[3] = base + 0x00018000;
./board/RPXClassic/flash.c:		info->start[4] = base + 0x00020000;
./board/RPXClassic/flash.c:		info->start[5] = base + 0x00028000;
./board/RPXClassic/flash.c:		info->start[6] = base + 0x00030000;
./board/RPXClassic/flash.c:		info->start[7] = base + 0x00038000;
./board/RPXClassic/flash.c:		for (i = 8; i < info->sector_count; i++) {
./board/RPXClassic/flash.c:			info->start[i] = base + ((i-7) * 0x00040000) ;
./board/RPXClassic/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/RPXClassic/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/RPXClassic/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/RPXClassic/flash.c:		info->size >> 20, info->sector_count);
./board/RPXClassic/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/RPXClassic/flash.c:			info->start[i],
./board/RPXClassic/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/RPXClassic/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/RPXClassic/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/RPXClassic/flash.c:		info->sector_count = 0;
./board/RPXClassic/flash.c:		info->size = 0;
./board/RPXClassic/flash.c:	    info->flash_id += FLASH_AMDL323B;
./board/RPXClassic/flash.c:	    info->sector_count = 71;
./board/RPXClassic/flash.c:	    info->size = 0x01000000;            /* 16 Mb                     */
./board/RPXClassic/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/RPXClassic/flash.c:	info->start[0] = base + 0x00000000;
./board/RPXClassic/flash.c:	info->start[1] = base + 0x00008000;
./board/RPXClassic/flash.c:	info->start[2] = base + 0x00010000;
./board/RPXClassic/flash.c:	info->start[3] = base + 0x00018000;
./board/RPXClassic/flash.c:	info->start[4] = base + 0x00020000;
./board/RPXClassic/flash.c:	info->start[5] = base + 0x00028000;
./board/RPXClassic/flash.c:	info->start[6] = base + 0x00030000;
./board/RPXClassic/flash.c:	info->start[7] = base + 0x00038000;
./board/RPXClassic/flash.c:	for (i = 8; i < info->sector_count; i++) {
./board/RPXClassic/flash.c:	    info->start[i] = base + ((i-7) * 0x00040000) ;
./board/RPXClassic/flash.c:	    addr = (volatile unsigned long *)(info->start[i]);
./board/RPXClassic/flash.c:	    info->protect[i] = addr[4] & 1 ;
./board/RPXClassic/flash.c:	for (i = 23; i < info->sector_count; i++) {
./board/RPXClassic/flash.c:	    addr = (volatile unsigned long *)(info->start[i]);
./board/RPXClassic/flash.c:	    info->protect[i] = addr[4] & 1 ;
./board/RPXClassic/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/RPXClassic/flash.c:		addr = (volatile unsigned long *)info->start[0];
./board/RPXClassic/flash.c:		addr = (volatile unsigned long *)info->start[23];
./board/RPXClassic/flash.c:	return (info->size);
./board/RPXClassic/flash.c:	vu_long *addr = (vu_long*)(info->start[0]);
./board/RPXClassic/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/RPXClassic/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/RPXClassic/flash.c:	    (info->flash_id > FLASH_AMD_COMP)) {
./board/RPXClassic/flash.c:			info->flash_id);
./board/RPXClassic/flash.c:		if (info->protect[sect]) {
./board/RPXClassic/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/RPXClassic/flash.c:			addr = (vu_long *)(info->start[sect]) ;
./board/RPXClassic/flash.c:	addr = (vu_long *)(info->start[l_sect]);
./board/RPXClassic/flash.c:	addr = (vu_long *)info->start[0];
./board/RPXClassic/flash.c:	vu_long *addr = (vu_long *)(info->start[0]);
./board/cogent/flash.c:	addrw = (c302f_addr_t)info->start[sect];
./board/cogent/flash.c:	saddrw = (c302f_addr_t)info->start[sect];
./board/cogent/flash.c:	saddrw = (c302f_addr_t)info->start[sect];
./board/cogent/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/cogent/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/cogent/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/cogent/flash.c:		info->size >> 20, info->sector_count);
./board/cogent/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/cogent/flash.c:			info->start[i],
./board/cogent/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/cogent/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/cogent/flash.c:	switch (info->flash_id) {
./board/cogent/flash.c:			info->flash_id);
./board/cogent/flash.c:		if (info->protect[sect]) {
./board/cogent/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/cogent/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/cogent/flash.c:	switch (info->flash_id) {
./board/cogent/flash.c:			info->flash_id);
./board/sbc8240/flash.c:	if (((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) ||
./board/sbc8240/flash.c:	    (info->flash_id == FLASH_AM040)) {
./board/sbc8240/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/sbc8240/flash.c:			info->start[i] = base + (i * 0x00010000);
./board/sbc8240/flash.c:		if (info->flash_id & FLASH_BTYPE) {
./board/sbc8240/flash.c:			info->start[0] = base + 0x00000000;
./board/sbc8240/flash.c:			info->start[1] = base + 0x00004000;
./board/sbc8240/flash.c:			info->start[2] = base + 0x00006000;
./board/sbc8240/flash.c:			info->start[3] = base + 0x00008000;
./board/sbc8240/flash.c:			for (i = 4; i < info->sector_count; i++) {
./board/sbc8240/flash.c:				info->start[i] =
./board/sbc8240/flash.c:			i = info->sector_count - 1;
./board/sbc8240/flash.c:			info->start[i--] = base + info->size - 0x00004000;
./board/sbc8240/flash.c:			info->start[i--] = base + info->size - 0x00006000;
./board/sbc8240/flash.c:			info->start[i--] = base + info->size - 0x00008000;
./board/sbc8240/flash.c:				info->start[i] = base + i * 0x00010000;
./board/sbc8240/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/sbc8240/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/sbc8240/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/sbc8240/flash.c:		info->size >> 10, info->sector_count);
./board/sbc8240/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/sbc8240/flash.c:		if (i != (info->sector_count - 1))
./board/sbc8240/flash.c:			size = info->start[i + 1] - info->start[i];
./board/sbc8240/flash.c:			size = info->start[0] + info->size - info->start[i];
./board/sbc8240/flash.c:		flash = (volatile unsigned long *) info->start[i];
./board/sbc8240/flash.c:			info->start[i],
./board/sbc8240/flash.c:			erased ? " E" : "  ", info->protect[i] ? "RO " : "   "
./board/sbc8240/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/sbc8240/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/sbc8240/flash.c:		info->flash_id = FLASH_MAN_SST;
./board/sbc8240/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/sbc8240/flash.c:		info->sector_count = 0;
./board/sbc8240/flash.c:		info->size = 0;
./board/sbc8240/flash.c:		info->flash_id += FLASH_AM040;
./board/sbc8240/flash.c:		info->sector_count = 8;
./board/sbc8240/flash.c:		info->size = 0x0080000;	/* => 512 ko */
./board/sbc8240/flash.c:		info->flash_id += FLASH_AM040;
./board/sbc8240/flash.c:		info->sector_count = 8;
./board/sbc8240/flash.c:		info->size = 0x0080000;	/* => 512 ko */
./board/sbc8240/flash.c:		info->flash_id += FLASH_AM400T;
./board/sbc8240/flash.c:		info->sector_count = 11;
./board/sbc8240/flash.c:		info->size = 0x00080000;
./board/sbc8240/flash.c:		info->flash_id += FLASH_AM400B;
./board/sbc8240/flash.c:		info->sector_count = 11;
./board/sbc8240/flash.c:		info->size = 0x00080000;
./board/sbc8240/flash.c:		info->flash_id += FLASH_AM800T;
./board/sbc8240/flash.c:		info->sector_count = 19;
./board/sbc8240/flash.c:		info->size = 0x00100000;
./board/sbc8240/flash.c:		info->flash_id += FLASH_AM800B;
./board/sbc8240/flash.c:		info->sector_count = 19;
./board/sbc8240/flash.c:		info->size = 0x00100000;
./board/sbc8240/flash.c:		info->flash_id += FLASH_AM160T;
./board/sbc8240/flash.c:		info->sector_count = 35;
./board/sbc8240/flash.c:		info->size = 0x00200000;
./board/sbc8240/flash.c:		info->flash_id += FLASH_AM160B;
./board/sbc8240/flash.c:		info->sector_count = 35;
./board/sbc8240/flash.c:		info->size = 0x00200000;
./board/sbc8240/flash.c:		info->flash_id += FLASH_AM320T;
./board/sbc8240/flash.c:		info->sector_count = 67;
./board/sbc8240/flash.c:		info->size = 0x00400000;
./board/sbc8240/flash.c:		info->flash_id += FLASH_AM320B;
./board/sbc8240/flash.c:		info->sector_count = 67;
./board/sbc8240/flash.c:		info->size = 0x00400000;
./board/sbc8240/flash.c:		info->flash_id += FLASH_SST800A;
./board/sbc8240/flash.c:		info->sector_count = 16;
./board/sbc8240/flash.c:		info->size = 0x00100000;
./board/sbc8240/flash.c:		info->flash_id += FLASH_SST160A;
./board/sbc8240/flash.c:		info->sector_count = 32;
./board/sbc8240/flash.c:		info->size = 0x00200000;
./board/sbc8240/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/sbc8240/flash.c:	if (((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) ||
./board/sbc8240/flash.c:	    (info->flash_id == FLASH_AM040)) {
./board/sbc8240/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/sbc8240/flash.c:			info->start[i] = base + (i * 0x00010000);
./board/sbc8240/flash.c:		if (info->flash_id & FLASH_BTYPE) {
./board/sbc8240/flash.c:			info->start[0] = base + 0x00000000;
./board/sbc8240/flash.c:			info->start[1] = base + 0x00004000;
./board/sbc8240/flash.c:			info->start[2] = base + 0x00006000;
./board/sbc8240/flash.c:			info->start[3] = base + 0x00008000;
./board/sbc8240/flash.c:			for (i = 4; i < info->sector_count; i++) {
./board/sbc8240/flash.c:				info->start[i] =
./board/sbc8240/flash.c:			i = info->sector_count - 1;
./board/sbc8240/flash.c:			info->start[i--] = base + info->size - 0x00004000;
./board/sbc8240/flash.c:			info->start[i--] = base + info->size - 0x00006000;
./board/sbc8240/flash.c:			info->start[i--] = base + info->size - 0x00008000;
./board/sbc8240/flash.c:				info->start[i] = base + i * 0x00010000;
./board/sbc8240/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/sbc8240/flash.c:		addr2 = (volatile FLASH_WORD_SIZE *) (info->start[i]);
./board/sbc8240/flash.c:		if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST)
./board/sbc8240/flash.c:			info->protect[i] = 0;
./board/sbc8240/flash.c:			info->protect[i] = addr2[2] & 1;
./board/sbc8240/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/sbc8240/flash.c:		addr2 = (FLASH_WORD_SIZE *) info->start[0];
./board/sbc8240/flash.c:	return (info->size);
./board/sbc8240/flash.c:		(FLASH_WORD_SIZE *) (info->start[sect]);
./board/sbc8240/flash.c:	volatile FLASH_WORD_SIZE *addr = (FLASH_WORD_SIZE *) (info->start[0]);
./board/sbc8240/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/sbc8240/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/sbc8240/flash.c:		if (info->protect[sect]) {
./board/sbc8240/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/sbc8240/flash.c:			addr2 = (FLASH_WORD_SIZE *) (info->start[sect]);
./board/sbc8240/flash.c:			if ((info->flash_id & FLASH_VENDMASK) ==
./board/sbc8240/flash.c:	addr = (FLASH_WORD_SIZE *) info->start[0];
./board/sbc8240/flash.c:		(FLASH_WORD_SIZE *) (info->start[0]);
./board/gen860t/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/gen860t/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/gen860t/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/gen860t/flash.c:				info->start[i] = base;
./board/gen860t/flash.c:			        " type 0x%lx\n", info->flash_id);
./board/gen860t/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/gen860t/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/gen860t/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/gen860t/flash.c:	if (info->size >= (1024 * 1024)) {
./board/gen860t/flash.c:			info->size >> i,
./board/gen860t/flash.c:			info->sector_count);
./board/gen860t/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/gen860t/flash.c:			info->start[i],
./board/gen860t/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/gen860t/flash.c:			info->flash_id = FLASH_MAN_INTEL;
./board/gen860t/flash.c:			info->flash_id = FLASH_UNKNOWN;
./board/gen860t/flash.c:			info->sector_count = 0;
./board/gen860t/flash.c:			info->size = 0;
./board/gen860t/flash.c:			info->flash_id += FLASH_28F128J3A;
./board/gen860t/flash.c:			info->sector_count = 128;
./board/gen860t/flash.c:			info->size = 16 * 1024 * 1024;
./board/gen860t/flash.c:			info->flash_id = FLASH_UNKNOWN;
./board/gen860t/flash.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/gen860t/flash.c:				info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/gen860t/flash.c:				info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/gen860t/flash.c:	return (info->size);
./board/gen860t/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/gen860t/flash.c:	if ((info->flash_id & FLASH_VENDMASK) != FLASH_MAN_INTEL) {
./board/gen860t/flash.c:		if (info->protect[sect]) {
./board/gen860t/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/gen860t/flash.c:			vu_char *addr = (uchar *)(info->start[sect]);
./board/netphone/flash.c:	if ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM040) {
./board/netphone/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/netphone/flash.c:			info->start[i] = base + (i * 0x00010000);
./board/netphone/flash.c:	} else if (info->flash_id & FLASH_BTYPE) {
./board/netphone/flash.c:		info->start[0] = base + 0x00000000;
./board/netphone/flash.c:		info->start[1] = base + 0x00004000;
./board/netphone/flash.c:		info->start[2] = base + 0x00006000;
./board/netphone/flash.c:		info->start[3] = base + 0x00008000;
./board/netphone/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/netphone/flash.c:			info->start[i] = base + (i * 0x00010000) - 0x00030000;
./board/netphone/flash.c:		i = info->sector_count - 1;
./board/netphone/flash.c:		info->start[i--] = base + info->size - 0x00004000;
./board/netphone/flash.c:		info->start[i--] = base + info->size - 0x00006000;
./board/netphone/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/netphone/flash.c:			info->start[i] = base + i * 0x00010000;
./board/netphone/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/netphone/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/netphone/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/netphone/flash.c:	printf("  Size: %ld MB in %d Sectors\n", info->size >> 20, info->sector_count);
./board/netphone/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/netphone/flash.c:		printf(" %08lX%s", info->start[i], info->protect[i] ? " (RO)" : "     ");
./board/netphone/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/netphone/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/netphone/flash.c:		info->flash_id = FLASH_MAN_MX;
./board/netphone/flash.c:		info->flash_id = FLASH_MAN_STM;
./board/netphone/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/netphone/flash.c:		info->sector_count = 0;
./board/netphone/flash.c:		info->size = 0;
./board/netphone/flash.c:		info->flash_id += FLASH_AM400T;
./board/netphone/flash.c:		info->sector_count = 11;
./board/netphone/flash.c:		info->size = 0x00080000;
./board/netphone/flash.c:		info->flash_id += FLASH_AM400B;
./board/netphone/flash.c:		info->sector_count = 11;
./board/netphone/flash.c:		info->size = 0x00080000;
./board/netphone/flash.c:		info->flash_id += FLASH_AM800T;
./board/netphone/flash.c:		info->sector_count = 19;
./board/netphone/flash.c:		info->size = 0x00100000;
./board/netphone/flash.c:		info->flash_id += FLASH_AM800B;
./board/netphone/flash.c:		info->sector_count = 19;
./board/netphone/flash.c:		info->size = 0x00100000;
./board/netphone/flash.c:		info->flash_id += FLASH_AM160T;
./board/netphone/flash.c:		info->sector_count = 35;
./board/netphone/flash.c:		info->size = 0x00200000;
./board/netphone/flash.c:		info->flash_id += FLASH_AM160B;
./board/netphone/flash.c:		info->sector_count = 35;
./board/netphone/flash.c:		info->size = 0x00200000;
./board/netphone/flash.c:		info->flash_id += FLASH_AM040;
./board/netphone/flash.c:		info->sector_count = 8;
./board/netphone/flash.c:		info->size = 0x00080000;
./board/netphone/flash.c:		info->flash_id += FLASH_AM040;
./board/netphone/flash.c:		info->sector_count = 8;
./board/netphone/flash.c:		info->size = 0x00080000;
./board/netphone/flash.c:		info->flash_id += FLASH_AM320T;
./board/netphone/flash.c:		info->sector_count = 67;
./board/netphone/flash.c:		info->size = 0x00400000;
./board/netphone/flash.c:		info->flash_id += FLASH_AM320B;
./board/netphone/flash.c:		info->sector_count = 67;
./board/netphone/flash.c:		info->size = 0x00400000;
./board/netphone/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/netphone/flash.c:	if ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM040) {
./board/netphone/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/netphone/flash.c:			info->start[i] = base + (i * 0x00010000);
./board/netphone/flash.c:	} else if (info->flash_id & FLASH_BTYPE) {
./board/netphone/flash.c:		info->start[0] = base + 0x00000000;
./board/netphone/flash.c:		info->start[1] = base + 0x00004000;
./board/netphone/flash.c:		info->start[2] = base + 0x00006000;
./board/netphone/flash.c:		info->start[3] = base + 0x00008000;
./board/netphone/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/netphone/flash.c:			info->start[i] = base + (i * 0x00010000) - 0x00030000;
./board/netphone/flash.c:		i = info->sector_count - 1;
./board/netphone/flash.c:		info->start[i--] = base + info->size - 0x00004000;
./board/netphone/flash.c:		info->start[i--] = base + info->size - 0x00006000;
./board/netphone/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/netphone/flash.c:			info->start[i] = base + i * 0x00010000;
./board/netphone/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/netphone/flash.c:		caddr = (volatile unsigned char *)(info->start[i]);
./board/netphone/flash.c:		info->protect[i] = caddr[2] & 1;
./board/netphone/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/netphone/flash.c:		caddr = (vu_char *) info->start[0];
./board/netphone/flash.c:	return (info->size);
./board/netphone/flash.c:	vu_char *addr = (vu_char *) (info->start[0]);
./board/netphone/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/netphone/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/netphone/flash.c:	    (info->flash_id > FLASH_AMD_COMP)) {
./board/netphone/flash.c:		printf("Can't erase unknown flash type %08lx - aborted\n", info->flash_id);
./board/netphone/flash.c:		if (info->protect[sect]) {
./board/netphone/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/netphone/flash.c:			addr = (vu_char *) (info->start[sect]);
./board/netphone/flash.c:	addr = (vu_char *) (info->start[l_sect]);
./board/netphone/flash.c:	addr = (vu_char *) info->start[0];
./board/netphone/flash.c:	vu_char *addr = (vu_char *) (info->start[0]);
./board/impa7/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/impa7/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/impa7/flash.c:		info->size >> 20, info->sector_count);
./board/impa7/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/impa7/flash.c:		printf (" %08lX%s", info->start[i],
./board/impa7/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/impa7/flash.c:	if (info->flash_id == FLASH_UNKNOWN)
./board/impa7/flash.c:	if ((info->flash_id & FLASH_VENDMASK) !=
./board/impa7/flash.c:		if (info->protect[sect]) {
./board/impa7/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/impa7/flash.c:			vu_long *addr = (vu_long *) (info->start[sect]);
./board/sc520_cdp/flash_old.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/sc520_cdp/flash_old.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/sc520_cdp/flash_old.c:	       info->size >> 20, info->sector_count);
./board/sc520_cdp/flash_old.c:	for (i = 0; i < info->sector_count; i++) {
./board/sc520_cdp/flash_old.c:		printf (" %08lX%s", info->start[i],
./board/sc520_cdp/flash_old.c:			info->protect[i] ? " (RO)" : "     ");
./board/sc520_cdp/flash_old.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/sc520_cdp/flash_old.c:	if ((info->flash_id & FLASH_VENDMASK) !=
./board/sc520_cdp/flash_old.c:		if (info->protect[sect]) {
./board/sc520_cdp/flash_old.c:		if (info->protect[sect] == 0) {
./board/sc520_cdp/flash_old.c:			ulong addr = info->start[sect];
./board/sc520_cdp/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/sc520_cdp/flash.c:		switch (info->flash_id & FLASH_TYPEMASK) {
./board/sc520_cdp/flash.c:	       info->size >> 20, info->sector_count);
./board/sc520_cdp/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/sc520_cdp/flash.c:		printf (" %08lX%s", info->start[i],
./board/sc520_cdp/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/sc520_cdp/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/sc520_cdp/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == (AMD_MANUFACT & FLASH_VENDMASK)) {
./board/sc520_cdp/flash.c:		if (info->protect[sect]) {
./board/sc520_cdp/flash.c:		if (info->protect[sect] == 0) { /* not protected */
./board/sc520_cdp/flash.c:			res = _erase_flash_ptr(info->start[0], info->start[sect]-info->start[0]);
./board/sc520_cdp/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == (AMD_MANUFACT & FLASH_VENDMASK)) {
./board/sc520_cdp/flash.c:		rc = _write_word_ptr(info->start[0], wp, data);
./board/sc520_cdp/flash.c:		rc = _write_word_ptr(info->start[0], wp, data);
./board/sc520_cdp/flash.c:	rc = _write_word_ptr(info->start[0], wp, data);
./board/ns9750dev/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/ns9750dev/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/ns9750dev/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/ns9750dev/flash.c:				info->start[i] = base + (i * 0x8000);
./board/ns9750dev/flash.c:				info->protect[i] = 0;
./board/ns9750dev/flash.c:				info->start[i] = base +
./board/ns9750dev/flash.c:				info->protect[i] = 0;
./board/ns9750dev/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/ns9750dev/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/ns9750dev/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/ns9750dev/flash.c:			info->size >> 20, info->sector_count);
./board/ns9750dev/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/ns9750dev/flash.c:			info->start[i], info->protect[i] ? " (RO)" : "     ");
./board/ns9750dev/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/ns9750dev/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/ns9750dev/flash.c:		info->sector_count = 0;
./board/ns9750dev/flash.c:		info->size = 0;
./board/ns9750dev/flash.c:		info->flash_id += FLASH_28F256L18T;
./board/ns9750dev/flash.c:		info->sector_count = 259;
./board/ns9750dev/flash.c:		info->size = 0x02000000;
./board/ns9750dev/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/ns9750dev/flash.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/ns9750dev/flash.c:				info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/ns9750dev/flash.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/ns9750dev/flash.c:	return (info->size);
./board/ns9750dev/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/ns9750dev/flash.c:	type = (info->flash_id & FLASH_VENDMASK);
./board/ns9750dev/flash.c:				info->flash_id);
./board/ns9750dev/flash.c:		if (info->protect[sect]) {
./board/ns9750dev/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/ns9750dev/flash.c:			FPWV *addr = (FPWV *) (info->start[sect]);
./board/ns9750dev/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/ixdp425/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/ixdp425/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/ixdp425/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/ixdp425/flash.c:			info->start[i] = base + (i * PHYS_FLASH_SECT_SIZE);
./board/ixdp425/flash.c:			info->protect[i] = 0;
./board/ixdp425/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/ixdp425/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/ixdp425/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/ixdp425/flash.c:		info->size >> 20, info->sector_count);
./board/ixdp425/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/ixdp425/flash.c:			info->start[i], info->protect[i] ? " (RO)" : "     ");
./board/ixdp425/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/ixdp425/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/ixdp425/flash.c:		info->sector_count = 0;
./board/ixdp425/flash.c:		info->size = 0;
./board/ixdp425/flash.c:		info->flash_id += FLASH_28F128J3A;
./board/ixdp425/flash.c:		info->sector_count = 128;
./board/ixdp425/flash.c:		info->size = 0x02000000;
./board/ixdp425/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/ixdp425/flash.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/ixdp425/flash.c:			info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/ixdp425/flash.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/ixdp425/flash.c:	return (info->size);
./board/ixdp425/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/ixdp425/flash.c:	type = (info->flash_id & FLASH_VENDMASK);
./board/ixdp425/flash.c:			info->flash_id);
./board/ixdp425/flash.c:		if (info->protect[sect]) {
./board/ixdp425/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/ixdp425/flash.c:			FPWV *addr = (FPWV *) (info->start[sect]);
./board/ixdp425/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/lwmon/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/lwmon/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/lwmon/flash.c:	    for (i = 0; i < info->sector_count; i++) {
./board/lwmon/flash.c:		info->start[i] = base;
./board/lwmon/flash.c:		info->flash_id);
./board/lwmon/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/lwmon/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/lwmon/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/lwmon/flash.c:	if (info->size >= (1 << 20)) {
./board/lwmon/flash.c:		info->size >> i,
./board/lwmon/flash.c:		info->sector_count);
./board/lwmon/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/lwmon/flash.c:			info->start[i],
./board/lwmon/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/lwmon/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/lwmon/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/lwmon/flash.c:		info->flash_id = FLASH_MAN_SST;
./board/lwmon/flash.c:		info->flash_id = FLASH_MAN_STM;
./board/lwmon/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/lwmon/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/lwmon/flash.c:		info->sector_count = 0;
./board/lwmon/flash.c:		info->size = 0;
./board/lwmon/flash.c:		info->flash_id += FLASH_28F320J3A;
./board/lwmon/flash.c:		info->sector_count = 32;
./board/lwmon/flash.c:		info->size = 0x00400000 * 2;
./board/lwmon/flash.c:		info->flash_id += FLASH_28F640J3A;
./board/lwmon/flash.c:		info->sector_count = 64;
./board/lwmon/flash.c:		info->size = 0x00800000 * 2;
./board/lwmon/flash.c:		info->flash_id += FLASH_28F128J3A;
./board/lwmon/flash.c:		info->sector_count = 128;
./board/lwmon/flash.c:		info->size = 0x01000000 * 2;
./board/lwmon/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/lwmon/flash.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/lwmon/flash.c:			info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/lwmon/flash.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/lwmon/flash.c:	return (info->size);
./board/lwmon/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/lwmon/flash.c:	if ((info->flash_id & FLASH_VENDMASK) != FLASH_MAN_INTEL) {
./board/lwmon/flash.c:		if (info->protect[sect]) {
./board/lwmon/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/lwmon/flash.c:			vu_long *addr = (vu_long *)(info->start[sect]);
./board/lwmon/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/lwmon/flash.c:	for(sector = info->sector_count - 1; sector >= 0; sector--) {
./board/lwmon/flash.c:		if(dest >= info->start[sector])
./board/c2mon/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/c2mon/flash.c:		info->start[0] = base + 0x00000000;
./board/c2mon/flash.c:		info->start[1] = base + 0x00008000;
./board/c2mon/flash.c:		info->start[2] = base + 0x0000C000;
./board/c2mon/flash.c:		info->start[3] = base + 0x00010000;
./board/c2mon/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/c2mon/flash.c:			info->start[i] = base + (i * 0x00020000) - 0x00060000;
./board/c2mon/flash.c:		i = info->sector_count - 1;
./board/c2mon/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/c2mon/flash.c:		info->start[i--] = base + info->size - 0x0000C000;
./board/c2mon/flash.c:		info->start[i--] = base + info->size - 0x00010000;
./board/c2mon/flash.c:			info->start[i] = base + i * 0x00020000;
./board/c2mon/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/c2mon/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/c2mon/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/c2mon/flash.c:		info->size >> 20, info->sector_count);
./board/c2mon/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/c2mon/flash.c:			info->start[i],
./board/c2mon/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/c2mon/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/c2mon/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/c2mon/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/c2mon/flash.c:		info->sector_count = 0;
./board/c2mon/flash.c:		info->size = 0;
./board/c2mon/flash.c:		info->flash_id += FLASH_AM400T;
./board/c2mon/flash.c:		info->sector_count = 11;
./board/c2mon/flash.c:		info->size = 0x00100000;
./board/c2mon/flash.c:		info->flash_id += FLASH_AM400B;
./board/c2mon/flash.c:		info->sector_count = 11;
./board/c2mon/flash.c:		info->size = 0x00100000;
./board/c2mon/flash.c:		info->flash_id += FLASH_AM800T;
./board/c2mon/flash.c:		info->sector_count = 19;
./board/c2mon/flash.c:		info->size = 0x00200000;
./board/c2mon/flash.c:		info->flash_id += FLASH_AM800B;
./board/c2mon/flash.c:		info->sector_count = 19;
./board/c2mon/flash.c:		info->size = 0x00200000;
./board/c2mon/flash.c:		info->flash_id += FLASH_AM160T;
./board/c2mon/flash.c:		info->sector_count = 35;
./board/c2mon/flash.c:		info->size = 0x00400000;
./board/c2mon/flash.c:		info->flash_id += FLASH_AM160B;
./board/c2mon/flash.c:		info->sector_count = 35;
./board/c2mon/flash.c:		info->size = 0x00400000;
./board/c2mon/flash.c:		info->flash_id += FLASH_AM320T;
./board/c2mon/flash.c:		info->sector_count = 67;
./board/c2mon/flash.c:		info->size = 0x00800000;
./board/c2mon/flash.c:		info->flash_id += FLASH_AM320B;
./board/c2mon/flash.c:		info->sector_count = 67;
./board/c2mon/flash.c:		info->size = 0x00800000;
./board/c2mon/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/c2mon/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/c2mon/flash.c:		info->start[0] = base + 0x00000000;
./board/c2mon/flash.c:		info->start[1] = base + 0x00008000;
./board/c2mon/flash.c:		info->start[2] = base + 0x0000C000;
./board/c2mon/flash.c:		info->start[3] = base + 0x00010000;
./board/c2mon/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/c2mon/flash.c:			info->start[i] = base + (i * 0x00020000) - 0x00060000;
./board/c2mon/flash.c:		i = info->sector_count - 1;
./board/c2mon/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/c2mon/flash.c:		info->start[i--] = base + info->size - 0x0000C000;
./board/c2mon/flash.c:		info->start[i--] = base + info->size - 0x00010000;
./board/c2mon/flash.c:			info->start[i] = base + i * 0x00020000;
./board/c2mon/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/c2mon/flash.c:		addr = (volatile unsigned long *)(info->start[i]);
./board/c2mon/flash.c:		info->protect[i] = addr[2] & 1;
./board/c2mon/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/c2mon/flash.c:		addr = (volatile unsigned long *)info->start[0];
./board/c2mon/flash.c:	return (info->size);
./board/c2mon/flash.c:	vu_long *addr = (vu_long*)(info->start[0]);
./board/c2mon/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/c2mon/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/c2mon/flash.c:	    (info->flash_id > FLASH_AMD_COMP)) {
./board/c2mon/flash.c:			info->flash_id);
./board/c2mon/flash.c:		if (info->protect[sect]) {
./board/c2mon/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/c2mon/flash.c:			addr = (vu_long*)(info->start[sect]);
./board/c2mon/flash.c:	addr = (vu_long*)(info->start[l_sect]);
./board/c2mon/flash.c:	addr = (volatile unsigned long *)info->start[0];
./board/c2mon/flash.c:	vu_long *addr = (vu_long*)(info->start[0]);
./board/cu824/flash.c:	switch ((i = info->flash_id & FLASH_VENDMASK)) {
./board/cu824/flash.c:	switch ((i = info->flash_id & FLASH_TYPEMASK)) {
./board/cu824/flash.c:			info->size >> 20, info->sector_count);
./board/cu824/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/cu824/flash.c:		printf (" %08lX%s", info->start[i],
./board/cu824/flash.c:				info->protect[i] ? " (RO)" : "     ");
./board/cu824/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/cu824/flash.c:	if ((info->flash_id & FLASH_VENDMASK) !=
./board/cu824/flash.c:		if (info->protect[sect]) {
./board/cu824/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/cu824/flash.c:			vu_long *addr = (vu_long *)(info->start[sect]);
./board/cu824/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/cpu86/flash.c:	info->sector_count = info->size = 0;
./board/cpu86/flash.c:	info->flash_id = FLASH_UNKNOWN;
./board/cpu86/flash.c:		info->flash_id = FLASH_28F160C3B;
./board/cpu86/flash.c:		info->sector_count = 39;
./board/cpu86/flash.c:		info->size = 0x00800000;	/* 4 * 2 MB = 8 MB	*/
./board/cpu86/flash.c:		info->flash_id = FLASH_28F160F3B;
./board/cpu86/flash.c:		info->sector_count = 39;
./board/cpu86/flash.c:		info->size = 0x00800000;	/* 4 * 2 MB = 8 MB      */
./board/cpu86/flash.c:	info->flash_id |= INTEL_MANUFACT << 16; /* set manufacturer offset */
./board/cpu86/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/cpu86/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/cpu86/flash.c:			if ((info->flash_id & FLASH_TYPEMASK) == FLASH_28F160C3B) {
./board/cpu86/flash.c:			info->start[i] = (uint) tmp;
./board/cpu86/flash.c:	memset (info->protect, 0, info->sector_count);
./board/cpu86/flash.c:	return (info->size);
./board/cpu86/flash.c:		info->flash_id     = vendor << 16 | devid;
./board/cpu86/flash.c:		info->sector_count = 8;
./board/cpu86/flash.c:		info->size         = info->sector_count * 0x10000;
./board/cpu86/flash.c:		info->flash_id     = vendor << 16 | devid;
./board/cpu86/flash.c:		info->sector_count = 16;
./board/cpu86/flash.c:		info->size         = 4 * info->sector_count * 0x10000;
./board/cpu86/flash.c:		info->flash_id     = vendor << 16 | devid;
./board/cpu86/flash.c:		info->sector_count = 32;
./board/cpu86/flash.c:		info->size         = 4 * info->sector_count * 0x10000;
./board/cpu86/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/cpu86/flash.c:		info->start[i] = base + i * (info->size / info->sector_count);
./board/cpu86/flash.c:		addr = (volatile unsigned char *)(info->start[i]);
./board/cpu86/flash.c:		info->protect[i] = addr[2] & 1;
./board/cpu86/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/cpu86/flash.c:		addr = (vu_char *)info->start[0];
./board/cpu86/flash.c:	return (info->size);
./board/cpu86/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/cpu86/flash.c:	switch ((info->flash_id >> 16) & 0xff) {
./board/cpu86/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/cpu86/flash.c:	if (info->size < 0x100000)
./board/cpu86/flash.c:				info->size >> 10, info->sector_count);
./board/cpu86/flash.c:				info->size >> 20, info->sector_count);
./board/cpu86/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/cpu86/flash.c:			info->start[i],
./board/cpu86/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/cpu86/flash.c:	vu_char *addr = (vu_char *)(info->start[0]);
./board/cpu86/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/cpu86/flash.c:		if (info->protect[sect])
./board/cpu86/flash.c:	if (info->flash_id >> 16 == 0x1) {
./board/cpu86/flash.c:			if (info->protect[sect] == 0) { /* not protected */
./board/cpu86/flash.c:				addr = (vu_char *)(info->start[sect]);
./board/cpu86/flash.c:		addr = (vu_char *)(info->start[l_sect]);
./board/cpu86/flash.c:		addr = (volatile unsigned char *)info->start[0];
./board/cpu86/flash.c:				(volatile unsigned long *) info->start[sect];
./board/cpu86/flash.c:			if (info->protect[sect] == 0) {
./board/cpu86/flash.c:	if (info->flash_id >> 16 == 0x1) {
./board/cpu86/flash.c:	vu_char *addr = (vu_char *)(info->start[0]);
./board/sc520_spunk/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/sc520_spunk/flash.c:		switch (info->flash_id & FLASH_TYPEMASK) {
./board/sc520_spunk/flash.c:		switch (info->flash_id & FLASH_TYPEMASK) {
./board/sc520_spunk/flash.c:	       info->size >> 20, info->sector_count);
./board/sc520_spunk/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/sc520_spunk/flash.c:		printf (" %08lX%s", info->start[i],
./board/sc520_spunk/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/sc520_spunk/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/sc520_spunk/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == (AMD_MANUFACT & FLASH_VENDMASK)) {
./board/sc520_spunk/flash.c:	} else if ((info->flash_id & FLASH_VENDMASK) == (INTEL_MANUFACT & FLASH_VENDMASK)) {
./board/sc520_spunk/flash.c:		if (info->protect[sect]) {
./board/sc520_spunk/flash.c:		if (info->protect[sect] == 0) { /* not protected */
./board/sc520_spunk/flash.c:			res = _erase_flash_ptr(info->start[0], info->start[sect]-info->start[0]);
./board/sc520_spunk/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == (AMD_MANUFACT & FLASH_VENDMASK)) {
./board/sc520_spunk/flash.c:	} else if ((info->flash_id & FLASH_VENDMASK) == (INTEL_MANUFACT & FLASH_VENDMASK)) {
./board/sc520_spunk/flash.c:		rc = _write_word_ptr(info->start[0], wp, data);
./board/sc520_spunk/flash.c:		rc = _write_word_ptr(info->start[0], wp, data);
./board/sc520_spunk/flash.c:	rc = _write_word_ptr(info->start[0], wp, data);
./board/sacsng/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/sacsng/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/sacsng/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/sacsng/flash.c:		info->size >> 20, info->sector_count);
./board/sacsng/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/sacsng/flash.c:			info->start[i],
./board/sacsng/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/sacsng/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/sacsng/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/sacsng/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/sacsng/flash.c:		info->sector_count = 0;
./board/sacsng/flash.c:		info->size = 0;
./board/sacsng/flash.c:		info->flash_id += FLASH_AM400T;
./board/sacsng/flash.c:		info->sector_count = 11;
./board/sacsng/flash.c:		info->size = 0x00080000;	/* => 0.5 MB		*/
./board/sacsng/flash.c:		info->flash_id += FLASH_AM400B;
./board/sacsng/flash.c:		info->sector_count = 11;
./board/sacsng/flash.c:		info->size = 0x00080000;	/* => 0.5 MB		*/
./board/sacsng/flash.c:		info->flash_id += FLASH_AM800T;
./board/sacsng/flash.c:		info->sector_count = 19;
./board/sacsng/flash.c:		info->size = 0x00100000;	/* => 1 MB		*/
./board/sacsng/flash.c:		info->flash_id += FLASH_AM800B;
./board/sacsng/flash.c:		info->sector_count = 19;
./board/sacsng/flash.c:		info->size = 0x00100000;	/* => 1 MB		*/
./board/sacsng/flash.c:		info->flash_id += FLASH_AM160T;
./board/sacsng/flash.c:		info->sector_count = 35;
./board/sacsng/flash.c:		info->size = 0x00200000;	/* => 2 MB		*/
./board/sacsng/flash.c:		info->flash_id += FLASH_AM160B;
./board/sacsng/flash.c:		info->sector_count = 35;
./board/sacsng/flash.c:		info->size = 0x00200000;	/* => 2 MB		*/
./board/sacsng/flash.c:		info->flash_id += FLASH_AM320T;
./board/sacsng/flash.c:		info->sector_count = 67;
./board/sacsng/flash.c:		info->size = 0x00400000;	/* => 4 MB		*/
./board/sacsng/flash.c:		info->flash_id += FLASH_AM320B;
./board/sacsng/flash.c:		info->sector_count = 67;
./board/sacsng/flash.c:		info->size = 0x00400000;	/* => 4 MB		*/
./board/sacsng/flash.c:		info->size = CONFIG_SYS_FLASH_SIZE;
./board/sacsng/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/sacsng/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/sacsng/flash.c:		info->start[0] = base + 0x00000000;
./board/sacsng/flash.c:		info->start[1] = base + 0x00004000;
./board/sacsng/flash.c:		info->start[2] = base + 0x00006000;
./board/sacsng/flash.c:		info->start[3] = base + 0x00008000;
./board/sacsng/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/sacsng/flash.c:			info->start[i] = base + ((i - 3) * 0x00010000);
./board/sacsng/flash.c:		i = info->sector_count - 1;
./board/sacsng/flash.c:		info->start[i--] = base + info->size - 0x00004000;
./board/sacsng/flash.c:		info->start[i--] = base + info->size - 0x00006000;
./board/sacsng/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/sacsng/flash.c:			info->start[i] = base + (i * 0x00010000);
./board/sacsng/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/sacsng/flash.c:		addr = (volatile unsigned short *)(info->start[i]);
./board/sacsng/flash.c:		info->protect[i] = addr[2] & 1;
./board/sacsng/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/sacsng/flash.c:		addr = (volatile unsigned short *)info->start[0];
./board/sacsng/flash.c:	return (info->size);
./board/sacsng/flash.c:	vu_short *addr = (vu_short*)(info->start[0]);
./board/sacsng/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/sacsng/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/sacsng/flash.c:	    (info->flash_id > FLASH_AMD_COMP)) {
./board/sacsng/flash.c:			info->flash_id);
./board/sacsng/flash.c:		if (info->protect[sect]) {
./board/sacsng/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/sacsng/flash.c:			addr = (vu_short*)(info->start[sect]);
./board/sacsng/flash.c:	addr = (vu_short*)(info->start[l_sect]);
./board/sacsng/flash.c:	addr = (vu_short*)info->start[0];
./board/sacsng/flash.c:	vu_short *addr = (vu_short*)(info->start[0]);
./board/pleb2/flash.c:	FPWV *base = (FPWV *) (info->start[0]);
./board/pleb2/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL)
./board/pleb2/flash.c:	else if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_AMD)
./board/pleb2/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL
./board/pleb2/flash.c:	    && (info->flash_id & FLASH_BTYPE)) {
./board/pleb2/flash.c:			info->start[i] = base + (i * bootsect_size);
./board/pleb2/flash.c:		for (i = 8; i < info->sector_count; i++) {
./board/pleb2/flash.c:			info->start[i] = base + ((i - 7) * sect_size);
./board/pleb2/flash.c:	} else if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_AMD
./board/pleb2/flash.c:		   && (info->flash_id & FLASH_TYPEMASK) == FLASH_AM640U) {
./board/pleb2/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/pleb2/flash.c:			info->start[i] = base + (i * sect_size);
./board/pleb2/flash.c:	} else if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_AMD
./board/pleb2/flash.c:		   && (info->flash_id & FLASH_TYPEMASK) == FLASH_AM800T) {
./board/pleb2/flash.c:		for (i = 0; i < info->sector_count - 3; i++)
./board/pleb2/flash.c:			info->start[i] = base + (i * sect_size);
./board/pleb2/flash.c:		i = info->sector_count - 1;
./board/pleb2/flash.c:		info->start[i--] =
./board/pleb2/flash.c:			base + (info->size - 0x00004000) * (sizeof (FPW) / 2);
./board/pleb2/flash.c:		info->start[i--] =
./board/pleb2/flash.c:			base + (info->size - 0x00006000) * (sizeof (FPW) / 2);
./board/pleb2/flash.c:		info->start[i--] =
./board/pleb2/flash.c:			base + (info->size - 0x00008000) * (sizeof (FPW) / 2);
./board/pleb2/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/pleb2/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/pleb2/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/pleb2/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/pleb2/flash.c:		info->size >> 20, info->sector_count);
./board/pleb2/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/pleb2/flash.c:		printf (" %08lX%s", info->start[i],
./board/pleb2/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/pleb2/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/pleb2/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/pleb2/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/pleb2/flash.c:		info->sector_count = 0;
./board/pleb2/flash.c:		info->size = 0;
./board/pleb2/flash.c:	if (info->flash_id != FLASH_UNKNOWN)
./board/pleb2/flash.c:			info->flash_id += FLASH_AM800T;
./board/pleb2/flash.c:			info->sector_count = 19;
./board/pleb2/flash.c:			info->size = 0x00100000 * (sizeof (FPW) / 2);
./board/pleb2/flash.c:			info->flash_id += FLASH_AM640U;
./board/pleb2/flash.c:			info->sector_count = 128;
./board/pleb2/flash.c:			info->size = 0x00800000 * (sizeof (FPW) / 2);
./board/pleb2/flash.c:			info->flash_id += FLASH_28F800C3B;
./board/pleb2/flash.c:			info->sector_count = 23;
./board/pleb2/flash.c:			info->size = 0x00100000 * (sizeof (FPW) / 2);
./board/pleb2/flash.c:			info->flash_id += FLASH_INTEL800B;
./board/pleb2/flash.c:			info->sector_count = 23;
./board/pleb2/flash.c:			info->size = 0x00100000 * (sizeof (FPW) / 2);
./board/pleb2/flash.c:			info->flash_id += FLASH_28F160C3B;
./board/pleb2/flash.c:			info->sector_count = 39;
./board/pleb2/flash.c:			info->size = 0x00200000 * (sizeof (FPW) / 2);
./board/pleb2/flash.c:			info->flash_id += FLASH_INTEL160B;
./board/pleb2/flash.c:			info->sector_count = 39;
./board/pleb2/flash.c:			info->size = 0x00200000 * (sizeof (FPW) / 2);
./board/pleb2/flash.c:			info->flash_id += FLASH_28F320C3B;
./board/pleb2/flash.c:			info->sector_count = 71;
./board/pleb2/flash.c:			info->size = 0x00400000 * (sizeof (FPW) / 2);
./board/pleb2/flash.c:			info->flash_id += FLASH_INTEL320B;
./board/pleb2/flash.c:			info->sector_count = 71;
./board/pleb2/flash.c:			info->size = 0x00400000 * (sizeof (FPW) / 2);
./board/pleb2/flash.c:			info->flash_id += FLASH_28F640C3B;
./board/pleb2/flash.c:			info->sector_count = 135;
./board/pleb2/flash.c:			info->size = 0x00800000 * (sizeof (FPW) / 2);
./board/pleb2/flash.c:			info->flash_id += FLASH_INTEL640B;
./board/pleb2/flash.c:			info->sector_count = 135;
./board/pleb2/flash.c:			info->size = 0x00800000 * (sizeof (FPW) / 2);
./board/pleb2/flash.c:			info->flash_id = FLASH_UNKNOWN;
./board/pleb2/flash.c:			info->sector_count = 0;
./board/pleb2/flash.c:			info->size = 0;
./board/pleb2/flash.c:	return (info->size);
./board/pleb2/flash.c:	FPWV *addr = (FPWV *) (info->start[0]);
./board/pleb2/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/pleb2/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/pleb2/flash.c:			sect = (FPWV *) (info->start[i]);
./board/pleb2/flash.c:			info->protect[i] =
./board/pleb2/flash.c:	int intel = (info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL;
./board/pleb2/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/pleb2/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/pleb2/flash.c:			info->flash_id);
./board/pleb2/flash.c:		if (info->protect[sect]) {
./board/pleb2/flash.c:		if (info->protect[sect] != 0)	/* protected, skip it */
./board/pleb2/flash.c:		addr = (FPWV *) (info->start[sect]);
./board/pleb2/flash.c:			base = (FPWV *) (info->start[0]);
./board/pleb2/flash.c:		switch (info->flash_id & FLASH_VENDMASK) {
./board/pleb2/flash.c:	base = (FPWV *) (info->start[0]);
./board/pleb2/flash.c:	addr = (FPWV *) (info->start[sector]);
./board/pleb2/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/pleb2/flash.c:			info->protect[sector] = 0;
./board/pleb2/flash.c:			info->protect[sector] = 1;
./board/pleb2/flash.c:			info->protect[sector] = 1;
./board/pleb2/flash.c:		if (info->protect[sector] != prot)
./board/pleb2/flash.c:		info->protect[sector] = prot;
./board/innokom/flash.c:		switch (info->flash_id & FLASH_VENDMASK) {
./board/innokom/flash.c:		switch (info->flash_id & FLASH_TYPEMASK) {
./board/innokom/flash.c:			info->size >> 20, info->sector_count);
./board/innokom/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/innokom/flash.c:			printf (" %08lX%s", info->start[i],
./board/innokom/flash.c:				info->protect[i] ? " (RO)" : "     ");
./board/innokom/flash.c:	if (info->flash_id == FLASH_UNKNOWN)
./board/innokom/flash.c:	if ((info->flash_id & FLASH_VENDMASK) != (INTEL_MANUFACT & FLASH_VENDMASK))
./board/innokom/flash.c:		if (info->protect[sect]) prot++;
./board/innokom/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/innokom/flash.c:			u16 * volatile addr = (u16 * volatile)(info->start[sect]);
./board/westel/amx860/flash.c:	if ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM040) {
./board/westel/amx860/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/westel/amx860/flash.c:			info->start[i] = base + (i * 0x00040000);
./board/westel/amx860/flash.c:	} else if (info->flash_id & FLASH_BTYPE) {
./board/westel/amx860/flash.c:		info->start[0] = base + 0x00000000;
./board/westel/amx860/flash.c:		info->start[1] = base + 0x00008000;
./board/westel/amx860/flash.c:		info->start[2] = base + 0x0000C000;
./board/westel/amx860/flash.c:		info->start[3] = base + 0x00010000;
./board/westel/amx860/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/westel/amx860/flash.c:			info->start[i] = base + (i * 0x00020000) - 0x00060000;
./board/westel/amx860/flash.c:		i = info->sector_count - 1;
./board/westel/amx860/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/westel/amx860/flash.c:		info->start[i--] = base + info->size - 0x0000C000;
./board/westel/amx860/flash.c:		info->start[i--] = base + info->size - 0x00010000;
./board/westel/amx860/flash.c:			info->start[i] = base + i * 0x00020000;
./board/westel/amx860/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/westel/amx860/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/westel/amx860/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/westel/amx860/flash.c:		info->size >> 20, info->sector_count);
./board/westel/amx860/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/westel/amx860/flash.c:			info->start[i],
./board/westel/amx860/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/westel/amx860/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/westel/amx860/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/westel/amx860/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/westel/amx860/flash.c:		info->sector_count = 0;
./board/westel/amx860/flash.c:		info->size = 0;
./board/westel/amx860/flash.c:		info->flash_id += FLASH_AM040;
./board/westel/amx860/flash.c:		info->sector_count = 8;
./board/westel/amx860/flash.c:		info->size = 0x00200000;
./board/westel/amx860/flash.c:		info->flash_id += FLASH_AM400T;
./board/westel/amx860/flash.c:		info->sector_count = 11;
./board/westel/amx860/flash.c:		info->size = 0x00100000;
./board/westel/amx860/flash.c:		info->flash_id += FLASH_AM400B;
./board/westel/amx860/flash.c:		info->sector_count = 11;
./board/westel/amx860/flash.c:		info->size = 0x00100000;
./board/westel/amx860/flash.c:		info->flash_id += FLASH_AM800T;
./board/westel/amx860/flash.c:		info->sector_count = 19;
./board/westel/amx860/flash.c:		info->size = 0x00200000;
./board/westel/amx860/flash.c:		info->flash_id += FLASH_AM800B;
./board/westel/amx860/flash.c:		info->sector_count = 19;
./board/westel/amx860/flash.c:		info->size = 0x00200000;
./board/westel/amx860/flash.c:		info->flash_id += FLASH_AM160T;
./board/westel/amx860/flash.c:		info->sector_count = 35;
./board/westel/amx860/flash.c:		info->size = 0x00400000;
./board/westel/amx860/flash.c:		info->flash_id += FLASH_AM160B;
./board/westel/amx860/flash.c:		info->sector_count = 35;
./board/westel/amx860/flash.c:		info->size = 0x00400000;
./board/westel/amx860/flash.c:		info->flash_id += FLASH_AM320T;
./board/westel/amx860/flash.c:		info->sector_count = 67;
./board/westel/amx860/flash.c:		info->size = 0x00800000;
./board/westel/amx860/flash.c:		info->flash_id += FLASH_AM320B;
./board/westel/amx860/flash.c:		info->sector_count = 67;
./board/westel/amx860/flash.c:		info->size = 0x00800000;
./board/westel/amx860/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/westel/amx860/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/westel/amx860/flash.c:		info->start[0] = base + 0x00000000;
./board/westel/amx860/flash.c:		info->start[1] = base + 0x00008000;
./board/westel/amx860/flash.c:		info->start[2] = base + 0x0000C000;
./board/westel/amx860/flash.c:		info->start[3] = base + 0x00010000;
./board/westel/amx860/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/westel/amx860/flash.c:			info->start[i] = base + (i * 0x00020000) - 0x00060000;
./board/westel/amx860/flash.c:		i = info->sector_count - 1;
./board/westel/amx860/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/westel/amx860/flash.c:		info->start[i--] = base + info->size - 0x0000C000;
./board/westel/amx860/flash.c:		info->start[i--] = base + info->size - 0x00010000;
./board/westel/amx860/flash.c:			info->start[i] = base + i * 0x00020000;
./board/westel/amx860/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/westel/amx860/flash.c:		addr = (volatile unsigned long *)(info->start[i]);
./board/westel/amx860/flash.c:		info->protect[i] = addr[2] & 1;
./board/westel/amx860/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/westel/amx860/flash.c:		addr = (volatile unsigned long *)info->start[0];
./board/westel/amx860/flash.c:	return (info->size);
./board/westel/amx860/flash.c:	vu_long *addr = (vu_long*)(info->start[0]);
./board/westel/amx860/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/westel/amx860/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/westel/amx860/flash.c:	    (info->flash_id > FLASH_AMD_COMP)) {
./board/westel/amx860/flash.c:			info->flash_id);
./board/westel/amx860/flash.c:		if (info->protect[sect]) {
./board/westel/amx860/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/westel/amx860/flash.c:			addr = (vu_long*)(info->start[sect]);
./board/westel/amx860/flash.c:	addr = (vu_long*)(info->start[l_sect]);
./board/westel/amx860/flash.c:	addr = (volatile unsigned long *)info->start[0];
./board/westel/amx860/flash.c:	vu_long *addr = (vu_long*)(info->start[0]);
./board/rbc823/flash.c:	if ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM040) {
./board/rbc823/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/rbc823/flash.c:			info->start[i] = base + (i * 0x00010000);
./board/rbc823/flash.c:	if (info->flash_id == FLASH_UNKNOWN)
./board/rbc823/flash.c:	switch (info->flash_id & FLASH_VENDMASK)
./board/rbc823/flash.c:	switch (info->flash_id & FLASH_TYPEMASK)
./board/rbc823/flash.c:	if (info->size >> 20) {
./board/rbc823/flash.c:		info->size >> 20,
./board/rbc823/flash.c:		info->sector_count);
./board/rbc823/flash.c:		info->size >> 10,
./board/rbc823/flash.c:		info->sector_count);
./board/rbc823/flash.c:	for (i=0; i<info->sector_count; ++i)
./board/rbc823/flash.c:			info->start[i],
./board/rbc823/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/rbc823/flash.c:			info->flash_id = FLASH_MAN_AMD;
./board/rbc823/flash.c:			info->flash_id = FLASH_MAN_FUJ;
./board/rbc823/flash.c:			info->flash_id = FLASH_UNKNOWN;
./board/rbc823/flash.c:			info->sector_count = 0;
./board/rbc823/flash.c:			info->size = 0;
./board/rbc823/flash.c:			info->flash_id += FLASH_AM040;
./board/rbc823/flash.c:			info->sector_count = 8;
./board/rbc823/flash.c:			info->size = 0x00080000;
./board/rbc823/flash.c:			info->flash_id = FLASH_UNKNOWN;
./board/rbc823/flash.c:	for (i = 0; i < info->sector_count; i++)
./board/rbc823/flash.c:		caddr = (volatile unsigned char *)(info->start[i]);
./board/rbc823/flash.c:		info->protect[i] = caddr[2] & 1;
./board/rbc823/flash.c:	if (info->flash_id != FLASH_UNKNOWN)
./board/rbc823/flash.c:		caddr = (volatile unsigned char *)info->start[0];
./board/rbc823/flash.c:	return (info->size);
./board/rbc823/flash.c:	volatile unsigned char *addr = (volatile unsigned char *)(info->start[0]);
./board/rbc823/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/rbc823/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/rbc823/flash.c:	    (info->flash_id > FLASH_AMD_COMP)) {
./board/rbc823/flash.c:		if (info->protect[sect]) {
./board/rbc823/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/rbc823/flash.c:			addr = (volatile unsigned char *)(info->start[sect]);
./board/rbc823/flash.c:	addr = (volatile unsigned char *)(info->start[l_sect]);
./board/rbc823/flash.c:	addr = (volatile unsigned char *)info->start[0];
./board/rbc823/flash.c:	volatile unsigned char *addr = (volatile unsigned char*)(info->start[0]),
./board/scb9328/flash.c:			info->size >> 20, info->sector_count);
./board/scb9328/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/scb9328/flash.c:		printf (" %08lX%s", info->start[i],
./board/scb9328/flash.c:				info->protect[i] ? " (RO)" : "     ");
./board/scb9328/flash.c:		if (!info->protect[sector]) {
./board/scb9328/flash.c:		if (info->protect[sector]) {
./board/scb9328/flash.c:		address = (FLASH_BUS *) (info->start[sector]);
./board/idmr/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/idmr/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/idmr/flash.c:		info->size >> 20, info->sector_count);
./board/idmr/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/idmr/flash.c:		printf (" %08lX%s", info->start[i],
./board/idmr/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/idmr/flash.c:	if (info->flash_id == FLASH_UNKNOWN)
./board/idmr/flash.c:	if ((info->flash_id & FLASH_VENDMASK) !=
./board/idmr/flash.c:		if (info->protect[sect]) {
./board/idmr/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/idmr/flash.c:				(volatile u16 *) (info->start[sect]);
./board/rpxsuper/flash.c:    if (info->flash_id == FLASH_UNKNOWN) {
./board/rpxsuper/flash.c:    switch (info->flash_id & FLASH_VENDMASK) {
./board/rpxsuper/flash.c:    switch (info->flash_id & FLASH_TYPEMASK) {
./board/rpxsuper/flash.c:	    info->size >> 20, info->sector_count);
./board/rpxsuper/flash.c:    for (i = 0; i < info->sector_count; ++i) {
./board/rpxsuper/flash.c:		info->start[i],
./board/rpxsuper/flash.c:		info->protect[i] ? " (RO)" : "     "
./board/rpxsuper/flash.c:	info->size = 0;
./board/rpxsuper/flash.c:	info->flash_id     = (AMD_MANUFACT & FLASH_VENDMASK) |
./board/rpxsuper/flash.c:	info->sector_count = 71;
./board/rpxsuper/flash.c:	info->size         = 4 * (8 * 8 + 63 * 64) * 1024;
./board/rpxsuper/flash.c:	info->size = 0;
./board/rpxsuper/flash.c:	info->start[i] = base + (i * 0x8000);
./board/rpxsuper/flash.c:    for (i = 8; i < info->sector_count; i++) {
./board/rpxsuper/flash.c:	info->start[i] = base + (i * 0x40000) + 8 * 0x8000 - 8 * 0x40000;
./board/rpxsuper/flash.c:    for (i = 0; i < info->sector_count; i++) {
./board/rpxsuper/flash.c:	addr = (volatile unsigned long *)(info->start[i]);
./board/rpxsuper/flash.c:	info->protect[i] = base & 0x00010001 ? 1 : 0;
./board/rpxsuper/flash.c:    addr = (vu_long*)info->start[0];
./board/rpxsuper/flash.c:    return info->size;
./board/rpxsuper/flash.c:    vu_long *addr = (vu_long*)(info->start[0]);
./board/rpxsuper/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/rpxsuper/flash.c:	if (info->protect[sect]) {
./board/rpxsuper/flash.c:	if (info->protect[sect] == 0) {	/* not protected */
./board/rpxsuper/flash.c:	    addr = (vu_long*)(info->start[sect]);
./board/rpxsuper/flash.c:    addr = (vu_long*)(info->start[l_sect]);
./board/rpxsuper/flash.c:    addr = (volatile unsigned long *)info->start[0];
./board/rpxsuper/flash.c:    vu_long *addr = (vu_long*)(info->start[0]);
./board/rmu/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/rmu/flash.c:		info->start[0] = base + 0x00000000;
./board/rmu/flash.c:		info->start[1] = base + 0x00010000;
./board/rmu/flash.c:		info->start[2] = base + 0x00018000;
./board/rmu/flash.c:		info->start[3] = base + 0x00020000;
./board/rmu/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/rmu/flash.c:			info->start[i] = base + ((i-3) * 0x00040000) ;
./board/rmu/flash.c:		i = info->sector_count - 1;
./board/rmu/flash.c:		info->start[i--] = base + info->size - 0x00010000;
./board/rmu/flash.c:		info->start[i--] = base + info->size - 0x00018000;
./board/rmu/flash.c:		info->start[i--] = base + info->size - 0x00020000;
./board/rmu/flash.c:			info->start[i] = base + i * 0x00040000;
./board/rmu/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/rmu/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/rmu/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/rmu/flash.c:		info->size >> 20, info->sector_count);
./board/rmu/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/rmu/flash.c:			info->start[i],
./board/rmu/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/rmu/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/rmu/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/rmu/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/rmu/flash.c:		info->sector_count = 0;
./board/rmu/flash.c:		info->size = 0;
./board/rmu/flash.c:		info->flash_id += FLASH_AM400T;
./board/rmu/flash.c:		info->sector_count = 11;
./board/rmu/flash.c:		info->size = 0x00100000;
./board/rmu/flash.c:		info->flash_id += FLASH_AM400B;
./board/rmu/flash.c:		info->sector_count = 11;
./board/rmu/flash.c:		info->size = 0x00100000;
./board/rmu/flash.c:		info->flash_id += FLASH_AM800T;
./board/rmu/flash.c:		info->sector_count = 19;
./board/rmu/flash.c:		info->size = 0x00200000;
./board/rmu/flash.c:		info->flash_id += FLASH_AM800B;
./board/rmu/flash.c:		info->sector_count = 19;
./board/rmu/flash.c:		info->size = 0x00400000;	/*%%% Size doubled by yooth */
./board/rmu/flash.c:		info->flash_id += FLASH_AM160T;
./board/rmu/flash.c:		info->sector_count = 35;
./board/rmu/flash.c:		info->size = 0x00400000;
./board/rmu/flash.c:		info->flash_id += FLASH_AM160B;
./board/rmu/flash.c:		info->sector_count = 35;
./board/rmu/flash.c:		info->size = 0x00800000;
./board/rmu/flash.c:		info->flash_id += FLASH_AM320T;
./board/rmu/flash.c:		info->sector_count = 67;
./board/rmu/flash.c:		info->size = 0x00800000;
./board/rmu/flash.c:		info->flash_id += FLASH_AM320B;
./board/rmu/flash.c:		info->sector_count = 67;
./board/rmu/flash.c:		info->size = 0x01000000;
./board/rmu/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/rmu/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/rmu/flash.c:		info->start[0] = base + 0x00000000;
./board/rmu/flash.c:		info->start[1] = base + 0x00010000;
./board/rmu/flash.c:		info->start[2] = base + 0x00018000;
./board/rmu/flash.c:		info->start[3] = base + 0x00020000;
./board/rmu/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/rmu/flash.c:			info->start[i] = base + ((i-3) * 0x00040000) ;
./board/rmu/flash.c:		i = info->sector_count - 1;
./board/rmu/flash.c:		info->start[i--] = base + info->size - 0x00010000;
./board/rmu/flash.c:		info->start[i--] = base + info->size - 0x00018000;
./board/rmu/flash.c:		info->start[i--] = base + info->size - 0x00020000;
./board/rmu/flash.c:			info->start[i] = base + i * 0x00040000;
./board/rmu/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/rmu/flash.c:		addr = (volatile unsigned long *)(info->start[i]);
./board/rmu/flash.c:		info->protect[i] = addr[4] & 1 ;
./board/rmu/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/rmu/flash.c:		addr = (volatile unsigned long *)info->start[0];
./board/rmu/flash.c:	return (info->size);
./board/rmu/flash.c:	vu_long *addr = (vu_long*)(info->start[0]);
./board/rmu/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/rmu/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/rmu/flash.c:	    (info->flash_id > FLASH_AMD_COMP)) {
./board/rmu/flash.c:			info->flash_id);
./board/rmu/flash.c:		if (info->protect[sect]) {
./board/rmu/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/rmu/flash.c:			addr = (vu_long *)(info->start[sect]) ;
./board/rmu/flash.c:	addr = (vu_long *)(info->start[l_sect]);
./board/rmu/flash.c:	addr = (vu_long *)info->start[0];
./board/rmu/flash.c:	vu_long *addr = (vu_long *)(info->start[0]);
./board/gcplus/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/gcplus/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/gcplus/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/gcplus/flash.c:			info->start[i] = base + (i * PHYS_FLASH_SECT_SIZE);
./board/gcplus/flash.c:			info->protect[i] = 0;
./board/gcplus/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/gcplus/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/gcplus/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/gcplus/flash.c:	       info->size >> 20, info->sector_count);
./board/gcplus/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/gcplus/flash.c:		       info->start[i], info->protect[i] ? " (RO)" : "     ");
./board/gcplus/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/gcplus/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/gcplus/flash.c:		info->sector_count = 0;
./board/gcplus/flash.c:		info->size = 0;
./board/gcplus/flash.c:		info->flash_id += FLASH_28F128J3A;
./board/gcplus/flash.c:		info->sector_count = 128;
./board/gcplus/flash.c:		info->size = 0x02000000;
./board/gcplus/flash.c:		info->flash_id += FLASH_28F640J5;
./board/gcplus/flash.c:		info->sector_count = 64;
./board/gcplus/flash.c:		info->size = 0x01000000;
./board/gcplus/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/gcplus/flash.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/gcplus/flash.c:		       info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/gcplus/flash.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/gcplus/flash.c:	return (info->size);
./board/gcplus/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/gcplus/flash.c:	type = (info->flash_id & FLASH_VENDMASK);
./board/gcplus/flash.c:		       info->flash_id);
./board/gcplus/flash.c:		if (info->protect[sect]) {
./board/gcplus/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/gcplus/flash.c:			FPWV *addr = (FPWV *) (info->start[sect]);
./board/gcplus/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/sixnet/flash.c:	FPWV *base = (FPWV *)(info->start[0]);
./board/sixnet/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL)
./board/sixnet/flash.c:	else if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_AMD)
./board/sixnet/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL
./board/sixnet/flash.c:	    && (info->flash_id & FLASH_BTYPE)) {
./board/sixnet/flash.c:			info->start[i] = base + (i * bootsect_size);
./board/sixnet/flash.c:		for (i = 8; i < info->sector_count; i++) {
./board/sixnet/flash.c:			info->start[i] = base + ((i - 7) * sect_size);
./board/sixnet/flash.c:	else if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_AMD
./board/sixnet/flash.c:		 && (info->flash_id & FLASH_TYPEMASK) == FLASH_AM640U) {
./board/sixnet/flash.c:		for( i = 0; i < info->sector_count; i++ )
./board/sixnet/flash.c:			info->start[i] = base + (i * sect_size);
./board/sixnet/flash.c:	else if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_AMD
./board/sixnet/flash.c:		 && (info->flash_id & FLASH_TYPEMASK) == FLASH_AM800T) {
./board/sixnet/flash.c:		for (i = 0; i < info->sector_count - 3; i++)
./board/sixnet/flash.c:			info->start[i] = base + (i * sect_size);
./board/sixnet/flash.c:		i = info->sector_count - 1;
./board/sixnet/flash.c:		info->start[i--] = base + (info->size - 0x00004000) * (sizeof(FPW)/2);
./board/sixnet/flash.c:		info->start[i--] = base + (info->size - 0x00006000) * (sizeof(FPW)/2);
./board/sixnet/flash.c:		info->start[i--] = base + (info->size - 0x00008000) * (sizeof(FPW)/2);
./board/sixnet/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/sixnet/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/sixnet/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/sixnet/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/sixnet/flash.c:		info->size >> 20,
./board/sixnet/flash.c:		info->sector_count);
./board/sixnet/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/sixnet/flash.c:		printf (" %08lX%s", info->start[i],
./board/sixnet/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/sixnet/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/sixnet/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/sixnet/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/sixnet/flash.c:		info->sector_count = 0;
./board/sixnet/flash.c:		info->size = 0;
./board/sixnet/flash.c:	if (info->flash_id != FLASH_UNKNOWN) switch (addr[1]) {
./board/sixnet/flash.c:		info->flash_id += FLASH_AM800T;
./board/sixnet/flash.c:		info->sector_count = 19;
./board/sixnet/flash.c:		info->size = 0x00100000 * (sizeof(FPW)/2);
./board/sixnet/flash.c:		info->flash_id += FLASH_AM640U;
./board/sixnet/flash.c:		info->sector_count = 128;
./board/sixnet/flash.c:		info->size = 0x00800000 * (sizeof(FPW)/2);
./board/sixnet/flash.c:		info->flash_id += FLASH_28F800C3B;
./board/sixnet/flash.c:		info->sector_count = 23;
./board/sixnet/flash.c:		info->size = 0x00100000 * (sizeof(FPW)/2);
./board/sixnet/flash.c:		info->flash_id += FLASH_INTEL800B;
./board/sixnet/flash.c:		info->sector_count = 23;
./board/sixnet/flash.c:		info->size = 0x00100000 * (sizeof(FPW)/2);
./board/sixnet/flash.c:		info->flash_id += FLASH_28F160C3B;
./board/sixnet/flash.c:		info->sector_count = 39;
./board/sixnet/flash.c:		info->size = 0x00200000 * (sizeof(FPW)/2);
./board/sixnet/flash.c:		info->flash_id += FLASH_INTEL160B;
./board/sixnet/flash.c:		info->sector_count = 39;
./board/sixnet/flash.c:		info->size = 0x00200000 * (sizeof(FPW)/2);
./board/sixnet/flash.c:		info->flash_id += FLASH_28F320C3B;
./board/sixnet/flash.c:		info->sector_count = 71;
./board/sixnet/flash.c:		info->size = 0x00400000 * (sizeof(FPW)/2);
./board/sixnet/flash.c:		info->flash_id += FLASH_INTEL320B;
./board/sixnet/flash.c:		info->sector_count = 71;
./board/sixnet/flash.c:		info->size = 0x00400000 * (sizeof(FPW)/2);
./board/sixnet/flash.c:		info->flash_id += FLASH_28F640C3B;
./board/sixnet/flash.c:		info->sector_count = 135;
./board/sixnet/flash.c:		info->size = 0x00800000 * (sizeof(FPW)/2);
./board/sixnet/flash.c:		info->flash_id += FLASH_INTEL640B;
./board/sixnet/flash.c:		info->sector_count = 135;
./board/sixnet/flash.c:		info->size = 0x00800000 * (sizeof(FPW)/2);
./board/sixnet/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/sixnet/flash.c:		info->sector_count = 0;
./board/sixnet/flash.c:		info->size = 0;
./board/sixnet/flash.c:	return (info->size);
./board/sixnet/flash.c:    FPWV *addr = (FPWV *)(info->start[0]);
./board/sixnet/flash.c:    switch (info->flash_id & FLASH_TYPEMASK) {
./board/sixnet/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/sixnet/flash.c:	    sect = (FPWV *)(info->start[i]);
./board/sixnet/flash.c:	    info->protect[i] = (sect[2] & (FPW)(0x00010001)) ? 1 : 0;
./board/sixnet/flash.c:	int intel = (info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL;
./board/sixnet/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/sixnet/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/sixnet/flash.c:			info->flash_id);
./board/sixnet/flash.c:		if (info->protect[sect]) {
./board/sixnet/flash.c:		if (info->protect[sect] != 0)	/* protected, skip it */
./board/sixnet/flash.c:		addr = (FPWV *)(info->start[sect]);
./board/sixnet/flash.c:			base = (FPWV *)(info->start[0]);
./board/sixnet/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/sixnet/flash.c:    base = (FPWV *)(info->start[0]);
./board/sixnet/flash.c:	addr = (FPWV *) (info->start[sector]);
./board/sixnet/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/sixnet/flash.c:			info->protect[sector] = 0;
./board/sixnet/flash.c:			info->protect[sector] = 1;
./board/sixnet/flash.c:			info->protect[sector] = 1;
./board/sixnet/flash.c:		if (info->protect[sector] != prot)
./board/sixnet/flash.c:		info->protect[sector] = prot;
./board/svm_sc8xx/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/svm_sc8xx/flash.c:		info->start[0] = base + 0x00000000;
./board/svm_sc8xx/flash.c:		info->start[1] = base + 0x00008000;
./board/svm_sc8xx/flash.c:		info->start[2] = base + 0x0000C000;
./board/svm_sc8xx/flash.c:		info->start[3] = base + 0x00010000;
./board/svm_sc8xx/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/svm_sc8xx/flash.c:			info->start[i] = base + (i * 0x00020000) - 0x00060000;
./board/svm_sc8xx/flash.c:		i = info->sector_count - 1;
./board/svm_sc8xx/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/svm_sc8xx/flash.c:		info->start[i--] = base + info->size - 0x0000C000;
./board/svm_sc8xx/flash.c:		info->start[i--] = base + info->size - 0x00010000;
./board/svm_sc8xx/flash.c:			info->start[i] = base + i * 0x00020000;
./board/svm_sc8xx/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/svm_sc8xx/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/svm_sc8xx/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/svm_sc8xx/flash.c:		info->size >> 20, info->sector_count);
./board/svm_sc8xx/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/svm_sc8xx/flash.c:			info->start[i],
./board/svm_sc8xx/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/svm_sc8xx/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/svm_sc8xx/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/svm_sc8xx/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/svm_sc8xx/flash.c:		info->sector_count = 0;
./board/svm_sc8xx/flash.c:		info->size = 0;
./board/svm_sc8xx/flash.c:		info->flash_id += FLASH_AM400T;
./board/svm_sc8xx/flash.c:		info->sector_count = 11;
./board/svm_sc8xx/flash.c:		info->size = 0x00100000;
./board/svm_sc8xx/flash.c:		info->flash_id += FLASH_AM400B;
./board/svm_sc8xx/flash.c:		info->sector_count = 11;
./board/svm_sc8xx/flash.c:		info->size = 0x00100000;
./board/svm_sc8xx/flash.c:		info->flash_id += FLASH_AM800T;
./board/svm_sc8xx/flash.c:		info->sector_count = 19;
./board/svm_sc8xx/flash.c:		info->size = 0x00200000;
./board/svm_sc8xx/flash.c:		info->flash_id += FLASH_AM800B;
./board/svm_sc8xx/flash.c:		info->sector_count = 19;
./board/svm_sc8xx/flash.c:		info->size = 0x00200000;
./board/svm_sc8xx/flash.c:		info->flash_id += FLASH_AM160T;
./board/svm_sc8xx/flash.c:		info->sector_count = 35;
./board/svm_sc8xx/flash.c:		info->size = 0x00400000;
./board/svm_sc8xx/flash.c:		info->flash_id += FLASH_AM160B;
./board/svm_sc8xx/flash.c:		info->sector_count = 35;
./board/svm_sc8xx/flash.c:		info->size = 0x00400000;
./board/svm_sc8xx/flash.c:		info->flash_id += FLASH_AM320T;
./board/svm_sc8xx/flash.c:		info->sector_count = 67;
./board/svm_sc8xx/flash.c:		info->size = 0x00800000;
./board/svm_sc8xx/flash.c:		info->flash_id += FLASH_AM320B;
./board/svm_sc8xx/flash.c:		info->sector_count = 67;
./board/svm_sc8xx/flash.c:		info->size = 0x00800000;
./board/svm_sc8xx/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/svm_sc8xx/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/svm_sc8xx/flash.c:		info->start[0] = base + 0x00000000;
./board/svm_sc8xx/flash.c:		info->start[1] = base + 0x00008000;
./board/svm_sc8xx/flash.c:		info->start[2] = base + 0x0000C000;
./board/svm_sc8xx/flash.c:		info->start[3] = base + 0x00010000;
./board/svm_sc8xx/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/svm_sc8xx/flash.c:			info->start[i] = base + (i * 0x00020000) - 0x00060000;
./board/svm_sc8xx/flash.c:		i = info->sector_count - 1;
./board/svm_sc8xx/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/svm_sc8xx/flash.c:		info->start[i--] = base + info->size - 0x0000C000;
./board/svm_sc8xx/flash.c:		info->start[i--] = base + info->size - 0x00010000;
./board/svm_sc8xx/flash.c:			info->start[i] = base + i * 0x00020000;
./board/svm_sc8xx/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/svm_sc8xx/flash.c:		addr = (volatile unsigned long *)(info->start[i]);
./board/svm_sc8xx/flash.c:		info->protect[i] = addr[2] & 1;
./board/svm_sc8xx/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/svm_sc8xx/flash.c:		addr = (volatile unsigned long *)info->start[0];
./board/svm_sc8xx/flash.c:	return (info->size);
./board/svm_sc8xx/flash.c:	vu_long *addr = (vu_long*)(info->start[0]);
./board/svm_sc8xx/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/svm_sc8xx/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/svm_sc8xx/flash.c:	    (info->flash_id > FLASH_AMD_COMP)) {
./board/svm_sc8xx/flash.c:			info->flash_id);
./board/svm_sc8xx/flash.c:		if (info->protect[sect]) {
./board/svm_sc8xx/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/svm_sc8xx/flash.c:			addr = (vu_long*)(info->start[sect]);
./board/svm_sc8xx/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/svm_sc8xx/flash.c:			addr = (vu_long*)(info->start[sect]);
./board/svm_sc8xx/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/svm_sc8xx/flash.c:			addr = (vu_long*)(info->start[sect]);
./board/svm_sc8xx/flash.c:	addr = (vu_long*)(info->start[l_sect]);
./board/svm_sc8xx/flash.c:	addr = (volatile unsigned long *)info->start[0];
./board/svm_sc8xx/flash.c:	ulong addr = (ulong)(info->start[0]);
./board/RRvision/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/RRvision/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/RRvision/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/RRvision/flash.c:		info->size >> 20, info->sector_count);
./board/RRvision/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/RRvision/flash.c:			info->start[i],
./board/RRvision/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/RRvision/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/RRvision/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/RRvision/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/RRvision/flash.c:		info->sector_count = 0;
./board/RRvision/flash.c:		info->size = 0;
./board/RRvision/flash.c:		info->flash_id += FLASH_AM400T;
./board/RRvision/flash.c:		info->sector_count = 11;
./board/RRvision/flash.c:		info->size = 0x00100000;
./board/RRvision/flash.c:		info->flash_id += FLASH_AM400B;
./board/RRvision/flash.c:		info->sector_count = 11;
./board/RRvision/flash.c:		info->size = 0x00100000;
./board/RRvision/flash.c:		info->flash_id += FLASH_AM800T;
./board/RRvision/flash.c:		info->sector_count = 19;
./board/RRvision/flash.c:		info->size = 0x00200000;
./board/RRvision/flash.c:		info->flash_id += FLASH_AM800B;
./board/RRvision/flash.c:		info->sector_count = 19;
./board/RRvision/flash.c:		info->size = 0x00200000;
./board/RRvision/flash.c:		info->flash_id += FLASH_AM160T;
./board/RRvision/flash.c:		info->sector_count = 35;
./board/RRvision/flash.c:		info->size = 0x00400000;
./board/RRvision/flash.c:		info->flash_id += FLASH_AM160B;
./board/RRvision/flash.c:		info->sector_count = 35;
./board/RRvision/flash.c:		info->size = 0x00400000;
./board/RRvision/flash.c:		info->flash_id += FLASH_AM320T;
./board/RRvision/flash.c:		info->sector_count = 71;
./board/RRvision/flash.c:		info->size = 0x00800000;
./board/RRvision/flash.c:		info->flash_id += FLASH_AM320B;
./board/RRvision/flash.c:		info->sector_count = 71;
./board/RRvision/flash.c:		info->size = 0x00800000;
./board/RRvision/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/RRvision/flash.c:		info->start[0] = base + 0x00000000;
./board/RRvision/flash.c:		info->start[1] = base + 0x00008000;
./board/RRvision/flash.c:		info->start[2] = base + 0x0000C000;
./board/RRvision/flash.c:		info->start[3] = base + 0x00010000;
./board/RRvision/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/RRvision/flash.c:			info->start[i] = base + (i * 0x00020000) - 0x00060000;
./board/RRvision/flash.c:		i = info->sector_count - 1;
./board/RRvision/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/RRvision/flash.c:		info->start[i--] = base + info->size - 0x0000C000;
./board/RRvision/flash.c:		info->start[i--] = base + info->size - 0x00010000;
./board/RRvision/flash.c:			info->start[i] = base + i * 0x00020000;
./board/RRvision/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/RRvision/flash.c:			info->start[i] = base;
./board/RRvision/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/RRvision/flash.c:			info->start[i] = base;
./board/RRvision/flash.c:			base += (i < (info->sector_count - 8))
./board/RRvision/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/RRvision/flash.c:		addr = (volatile unsigned long *)(info->start[i]);
./board/RRvision/flash.c:		info->protect[i] = addr[2] & 1;
./board/RRvision/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/RRvision/flash.c:		addr = (volatile unsigned long *)info->start[0];
./board/RRvision/flash.c:	return (info->size);
./board/RRvision/flash.c:	vu_long *addr = (vu_long*)(info->start[0]);
./board/RRvision/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/RRvision/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/RRvision/flash.c:	    (info->flash_id > FLASH_AMD_COMP)) {
./board/RRvision/flash.c:			info->flash_id);
./board/RRvision/flash.c:		if (info->protect[sect]) {
./board/RRvision/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/RRvision/flash.c:			addr = (vu_long*)(info->start[sect]);
./board/RRvision/flash.c:	addr = (vu_long*)(info->start[l_sect]);
./board/RRvision/flash.c:	addr = (volatile unsigned long *)info->start[0];
./board/RRvision/flash.c:	vu_long *addr = (vu_long*)(info->start[0]);
./board/emk/common/flash.c:	FPWV *base = (FPWV *)(info->start[0]);
./board/emk/common/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL)
./board/emk/common/flash.c:	else if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_AMD)
./board/emk/common/flash.c:		if (info->size &&
./board/emk/common/flash.c:			info->start[0] <= base && base <= info->start[0] + info->size - 1)
./board/emk/common/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/emk/common/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/emk/common/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/emk/common/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/emk/common/flash.c:		info->size >> 20,
./board/emk/common/flash.c:		info->sector_count);
./board/emk/common/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/emk/common/flash.c:		ulong	*flash = (unsigned long *) info->start[i];
./board/emk/common/flash.c:			(i != (info->sector_count - 1)) ?
./board/emk/common/flash.c:			(info->start[i + 1] - info->start[i]) >> 2 :
./board/emk/common/flash.c:		(info->start[0] + info->size - info->start[i]) >> 2;
./board/emk/common/flash.c:			flash = (unsigned long *) info->start[i], erased = 1;
./board/emk/common/flash.c:				(flash != (unsigned long *) info->start[i] + size) && erased;
./board/emk/common/flash.c:			info->start[i],
./board/emk/common/flash.c:			info->protect[i] ? "(RO)" : "    ");
./board/emk/common/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/emk/common/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/emk/common/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/emk/common/flash.c:		info->sector_count = 0;
./board/emk/common/flash.c:		info->size = 0;
./board/emk/common/flash.c:	if (info->flash_id != FLASH_UNKNOWN) switch ((FPW)addr[FLASH_ID2]) {
./board/emk/common/flash.c:		info->flash_id += FLASH_AM160B;
./board/emk/common/flash.c:		info->sector_count = 35;
./board/emk/common/flash.c:		info->size = 0x00200000;
./board/emk/common/flash.c:		info->start[0] = (ulong)addr;
./board/emk/common/flash.c:		info->start[1] = (ulong)addr + 0x4000;
./board/emk/common/flash.c:		info->start[2] = (ulong)addr + 0x6000;
./board/emk/common/flash.c:		info->start[3] = (ulong)addr + 0x8000;
./board/emk/common/flash.c:		for (i = 4; i < info->sector_count; i++)
./board/emk/common/flash.c:			info->start[i] = (ulong)addr + 0x10000 * (i-3);
./board/emk/common/flash.c:		info->flash_id += FLASH_AMDLV065D;
./board/emk/common/flash.c:		info->sector_count = 128;
./board/emk/common/flash.c:		info->size = 0x00800000;
./board/emk/common/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/emk/common/flash.c:			info->start[i] = (ulong)addr + 0x10000 * i;
./board/emk/common/flash.c:			info->flash_id += FLASH_AMLV640U;
./board/emk/common/flash.c:			info->sector_count = 128;
./board/emk/common/flash.c:			info->size = 0x00800000;
./board/emk/common/flash.c:			for (i = 0; i < info->sector_count; i++)
./board/emk/common/flash.c:				info->start[i] = (ulong)addr + 0x10000 * i;
./board/emk/common/flash.c:			info->flash_id += FLASH_AMLV256U;
./board/emk/common/flash.c:			info->sector_count = 256;
./board/emk/common/flash.c:			info->size = 0x01000000;
./board/emk/common/flash.c:			for (i = 0; i < info->sector_count; i++)
./board/emk/common/flash.c:				info->start[i] = (ulong)addr + 0x10000 * i;
./board/emk/common/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/emk/common/flash.c:		info->sector_count = 0;
./board/emk/common/flash.c:		info->size = 0x800000;
./board/emk/common/flash.c:	return (info->size);
./board/emk/common/flash.c:	int intel = (info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL;
./board/emk/common/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/emk/common/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/emk/common/flash.c:			info->flash_id);
./board/emk/common/flash.c:		if (info->protect[sect]) {
./board/emk/common/flash.c:		if (info->protect[sect] != 0)	/* protected, skip it */
./board/emk/common/flash.c:		addr = (FPWV *)(info->start[sect]);
./board/emk/common/flash.c:			base = (FPWV *)(info->start[0]);
./board/emk/common/flash.c:		switch (info->flash_id & FLASH_VENDMASK) {
./board/emk/common/flash.c:	base = (FPWV *)(info->start[0]);
./board/shannon/flash.c:    switch (info->flash_id & FLASH_VENDMASK)
./board/shannon/flash.c:    switch (info->flash_id & FLASH_TYPEMASK)
./board/shannon/flash.c:	   info->size >> 20, info->sector_count);
./board/shannon/flash.c:    for (i = 0; i < info->sector_count; i++)
./board/shannon/flash.c:	printf (" %08lX%s", info->start[i],
./board/shannon/flash.c:		info->protect[i] ? " (RO)" : "     ");
./board/shannon/flash.c:    if (info->flash_id == FLASH_UNKNOWN)
./board/shannon/flash.c:    if ((info->flash_id & FLASH_VENDMASK) !=
./board/shannon/flash.c:	if (info->protect[sect]) {
./board/shannon/flash.c:	if (info->protect[sect] == 0)
./board/shannon/flash.c:	    vu_long *addr = (vu_long *)(info->start[sect]);
./board/psyent/common/AMDLV065D.c:		info->size >> 10, info->sector_count);
./board/psyent/common/AMDLV065D.c:	for (i = 0; i < info->sector_count; ++i) {
./board/psyent/common/AMDLV065D.c:		addr = (unsigned long *) info->start[i];
./board/psyent/common/AMDLV065D.c:			info->start[i],
./board/psyent/common/AMDLV065D.c:			info->protect[i] ? "RO " : "   ");
./board/psyent/common/AMDLV065D.c:	unsigned char *addr = (unsigned char *) info->start[0];
./board/psyent/common/AMDLV065D.c:		if (info->protect[sect]) {
./board/psyent/common/AMDLV065D.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/psyent/common/AMDLV065D.c:			addr2 = (unsigned char *) info->start[sect];
./board/psyent/common/AMDLV065D.c:	vu_char *cmd = (vu_char *) info->start[0];
./board/barco/flash.c:		pflinfo->flash_id = FLASH_UNKNOWN;
./board/barco/flash.c:		pflinfo->size = 0;
./board/barco/flash.c:		pflinfo->sector_count = 0;
./board/barco/flash.c:		pflinfo->flash_id = flash_id(flash[0x0], flash[0x1]);
./board/barco/flash.c:		switch(pflinfo->flash_id & FLASH_TYPEMASK){
./board/barco/flash.c:				pflinfo->size = 0x00200000;
./board/barco/flash.c:				pflinfo->sector_count = 64;
./board/barco/flash.c:					pflinfo->start[j] = base_address + 0x00010000 * j;
./board/barco/flash.c:					pflinfo->protect[j] = flash[(j << 16) | 0x2];
./board/barco/flash.c:				pflinfo->size = 0x00800000;
./board/barco/flash.c:				pflinfo->sector_count =128;
./board/barco/flash.c:					pflinfo->start[j] = base_address + 0x00010000 * j;
./board/barco/flash.c:					pflinfo->protect[j] = flash[(j << 16) | 0x2];
./board/barco/flash.c:				pflinfo->size = 0x00080000;
./board/barco/flash.c:				pflinfo->sector_count = 2;
./board/barco/flash.c:				pflinfo->start[0] = base_address ;
./board/barco/flash.c:				pflinfo->start[1] = base_address + 0x00004000;
./board/barco/flash.c:				pflinfo->protect[0] = ((flash[0x02] & 0X01)==0) ? 0X02 : 0X01;
./board/barco/flash.c:				pflinfo->protect[1] = 0X02;
./board/barco/flash.c:				pflinfo->size = 0x00080000;
./board/barco/flash.c:				pflinfo->sector_count = 8;
./board/barco/flash.c:					pflinfo->start[j] = base_address + 0x00010000 * j;
./board/barco/flash.c:					pflinfo->protect[j] = flash[(j << 16) | 0x2];
./board/barco/flash.c:				pflinfo->size = 0x00100000;
./board/barco/flash.c:				pflinfo->sector_count = 19;
./board/barco/flash.c:				pflinfo->start[0] = base_address;
./board/barco/flash.c:				pflinfo->start[1] = base_address + 0x4000;
./board/barco/flash.c:				pflinfo->start[2] = base_address + 0x6000;
./board/barco/flash.c:				pflinfo->start[3] = base_address + 0x8000;
./board/barco/flash.c:					pflinfo->start[j+3] = base_address + 0x00010000 * j;
./board/barco/flash.c:	if(info->flash_id != FLASH_UNKNOWN){
./board/barco/flash.c:		switch(info->flash_id & FLASH_VENDMASK){
./board/barco/flash.c:		switch(info->flash_id & FLASH_TYPEMASK){
./board/barco/flash.c:			info->size >> 10,
./board/barco/flash.c:			info->sector_count
./board/barco/flash.c:	for (i = 0; i < info->sector_count; i++){
./board/barco/flash.c:		unsigned long * flash = (unsigned long *) info->start[i];
./board/barco/flash.c:			(i != (info->sector_count - 1)) ?
./board/barco/flash.c:			(info->start[i + 1] - info->start[i]) >> 2 :
./board/barco/flash.c:			(info->start[0] + info->size - info->start[i]) >> 2;
./board/barco/flash.c:				flash = (unsigned long *) info->start[i], erased = 1;
./board/barco/flash.c:				(flash != (unsigned long *) info->start[i] + size) && erased;
./board/barco/flash.c:				info->start[i],
./board/barco/flash.c:				info->protect[i] ? "RO" : "  "
./board/barco/flash.c:	volatile FLASH_WORD_SIZE *addr = (FLASH_WORD_SIZE *)(info->start[0]);
./board/barco/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/barco/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/barco/flash.c:			(info->flash_id > (FLASH_MAN_STM | FLASH_AMD_COMP))) {
./board/barco/flash.c:		if (info->protect[sect]) {
./board/barco/flash.c:	if ((info->start[0] >= ROM_CS1_START) && (info->start[0] < ROM_CS0_START)){
./board/barco/flash.c:		if (info->protect[sect] == 0) { /* not protected */
./board/barco/flash.c:			addr = (FLASH_WORD_SIZE *)(info->start[0] + (
./board/barco/flash.c:						(info->start[sect] - info->start[0]) << sh8b));
./board/barco/flash.c:			if (info->flash_id & FLASH_MAN_SST){
./board/barco/flash.c:	addr = (FLASH_WORD_SIZE *)(info->start[0] + (
./board/barco/flash.c:				(info->start[l_sect] - info->start[0]) << sh8b));
./board/barco/flash.c:	addr = (FLASH_WORD_SIZE *)info->start[0];
./board/barco/flash.c:	volatile FLASH_WORD_SIZE *addr2 = (FLASH_WORD_SIZE *)info->start[0];
./board/barco/flash.c:	if ((info->start[0] >= ROM_CS1_START) && (info->start[0] < ROM_CS0_START)){
./board/barco/flash.c:	dest2 = (FLASH_WORD_SIZE *)(((dest - info->start[0]) << sh8b) +
./board/barco/flash.c:			info->start[0]);
./board/barco/barco.c:		info->address = CONFIG_SYS_WORKING_KERNEL_ADDRESS;
./board/barco/barco.c:		info->address = CONFIG_SYS_WORKING_KERNEL_ADDRESS;
./board/barco/barco.c:		info->address= CONFIG_SYS_DEFAULT_KERNEL_ADDRESS;
./board/barco/barco.c:	info->size = *((unsigned int *)(info->address ));
./board/dnp1110/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/dnp1110/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/dnp1110/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/dnp1110/flash.c:			info->start[i] = base + (i * PHYS_FLASH_SECT_SIZE);
./board/dnp1110/flash.c:			info->protect[i] = 0;
./board/dnp1110/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/dnp1110/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/dnp1110/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/dnp1110/flash.c:		info->size >> 20, info->sector_count);
./board/dnp1110/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/dnp1110/flash.c:			info->start[i],
./board/dnp1110/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/dnp1110/flash.c:      info->flash_id = FLASH_MAN_INTEL;
./board/dnp1110/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/dnp1110/flash.c:		info->sector_count = 0;
./board/dnp1110/flash.c:		info->size = 0;
./board/dnp1110/flash.c:      info->flash_id += FLASH_28F128J3A;
./board/dnp1110/flash.c:      info->sector_count = 128;
./board/dnp1110/flash.c:      info->size = 0x02000000;
./board/dnp1110/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/dnp1110/flash.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/dnp1110/flash.c:			info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/dnp1110/flash.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/dnp1110/flash.c:	return (info->size);
./board/dnp1110/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/dnp1110/flash.c:	type = (info->flash_id & FLASH_VENDMASK);
./board/dnp1110/flash.c:			info->flash_id);
./board/dnp1110/flash.c:	if (info->protect[sect]) {
./board/dnp1110/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/dnp1110/flash.c:			FPWV *addr = (FPWV *)(info->start[sect]);
./board/dnp1110/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/pcippc2/flash.c:			info->flash_id = FLASH_MAN_AMD;
./board/pcippc2/flash.c:			info->flash_id = FLASH_MAN_FUJ;
./board/pcippc2/flash.c:			info->flash_id = FLASH_MAN_STM;
./board/pcippc2/flash.c:			info->flash_id = FLASH_UNKNOWN;
./board/pcippc2/flash.c:			info->sector_count = 0;
./board/pcippc2/flash.c:			info->size = 0;
./board/pcippc2/flash.c:			info->flash_id += FLASH_AM040;
./board/pcippc2/flash.c:			info->sector_count = 8;
./board/pcippc2/flash.c:			info->size = 0x00080000;
./board/pcippc2/flash.c:			info->flash_id += FLASH_AM040;
./board/pcippc2/flash.c:			info->sector_count = 8;
./board/pcippc2/flash.c:			info->size = 0x00080000;
./board/pcippc2/flash.c:			info->flash_id += FLASH_AM400T;
./board/pcippc2/flash.c:			info->sector_count = 11;
./board/pcippc2/flash.c:			info->size = 0x00100000;
./board/pcippc2/flash.c:			info->flash_id += FLASH_AM400B;
./board/pcippc2/flash.c:			info->sector_count = 11;
./board/pcippc2/flash.c:			info->size = 0x00100000;
./board/pcippc2/flash.c:			info->flash_id += FLASH_AM800T;
./board/pcippc2/flash.c:			info->sector_count = 19;
./board/pcippc2/flash.c:			info->size = 0x00200000;
./board/pcippc2/flash.c:			info->flash_id += FLASH_AM800B;
./board/pcippc2/flash.c:			info->sector_count = 19;
./board/pcippc2/flash.c:			info->size = 0x00200000;
./board/pcippc2/flash.c:			info->flash_id += FLASH_AM160T;
./board/pcippc2/flash.c:			info->sector_count = 35;
./board/pcippc2/flash.c:			info->size = 0x00400000;
./board/pcippc2/flash.c:			info->flash_id += FLASH_AM160B;
./board/pcippc2/flash.c:			info->sector_count = 35;
./board/pcippc2/flash.c:			info->size = 0x00400000;
./board/pcippc2/flash.c:			info->flash_id += FLASH_AM320T;
./board/pcippc2/flash.c:			info->sector_count = 67;
./board/pcippc2/flash.c:			info->size = 0x00800000;
./board/pcippc2/flash.c:			info->flash_id += FLASH_AM320B;
./board/pcippc2/flash.c:			info->sector_count = 67;
./board/pcippc2/flash.c:			info->size = 0x00800000;
./board/pcippc2/flash.c:			info->flash_id += FLASH_AM033C;
./board/pcippc2/flash.c:			info->sector_count = 64;
./board/pcippc2/flash.c:			info->size = 0x01000000;
./board/pcippc2/flash.c:			info->flash_id += FLASH_AM040;
./board/pcippc2/flash.c:			info->sector_count = 8;
./board/pcippc2/flash.c:			info->size = 0x00080000;
./board/pcippc2/flash.c:			info->flash_id = FLASH_UNKNOWN;
./board/pcippc2/flash.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/pcippc2/flash.c:			info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/pcippc2/flash.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/pcippc2/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/pcippc2/flash.c:		value = in8(info->start[i] + 2);
./board/pcippc2/flash.c:		info->protect[i] = (value & 1) != 0;
./board/pcippc2/flash.c:	return (info->size);
./board/pcippc2/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/pcippc2/flash.c:			for (i = 0; i < info->sector_count; i++) {
./board/pcippc2/flash.c:				info->start[i] = base + i * info->size /
./board/pcippc2/flash.c:				                            info->sector_count;
./board/pcippc2/flash.c:	volatile ulong addr = info->start[0];
./board/pcippc2/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/pcippc2/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/pcippc2/flash.c:			info->flash_id);
./board/pcippc2/flash.c:		if (info->protect[sect]) {
./board/pcippc2/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/pcippc2/flash.c:			addr = info->start[sect];
./board/pcippc2/flash.c:	addr = info->start[l_sect];
./board/pcippc2/flash.c:			flash_reset (info->start[0]);
./board/pcippc2/flash.c:	flash_reset (info->start[0]);
./board/pcippc2/flash.c:	volatile ulong addr = info->start[0];
./board/pcippc2/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/pcippc2/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/pcippc2/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/pcippc2/flash.c:	if (info->size % 0x100000 == 0) {
./board/pcippc2/flash.c:			info->size / 0x100000, info->sector_count);
./board/pcippc2/flash.c:	} else if (info->size % 0x400 == 0) {
./board/pcippc2/flash.c:		        info->size / 0x400, info->sector_count);
./board/pcippc2/flash.c:		        info->size, info->sector_count);
./board/pcippc2/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/pcippc2/flash.c:			info->start[i],
./board/pcippc2/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/mousse/flash.c:		if (dev->found && (dev->base == info->start[0]))
./board/mousse/flash.c:			(unsigned int) info->start[0]);
./board/mousse/flash.c:				info->flash_id = (dev->vendorID << 16) | dev->deviceID;
./board/mousse/flash.c:				info->sector_count = dev->sectors;
./board/mousse/flash.c:				info->size = info->sector_count * FLASH_SECTOR_SIZE;
./board/mousse/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/mousse/flash.c:	switch ((info->flash_id >> 16) & 0xff) {
./board/mousse/flash.c:	chip = (unsigned int) info->flash_id & 0x000000ff;
./board/mousse/flash.c:		info->size, info->sector_count);
./board/mousse/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/mousse/flash.c:			info->start[FIRST_SECTOR] + i * FLASH_SECTOR_SIZE,
./board/mousse/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/mousse/flash.c:	vu_long *addr = (vu_long *) (info->start[0]);
./board/mousse/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/mousse/flash.c:		if (info->protect[sect]) {
./board/mousse/flash.c:			if (info->protect[sect] == 0) {	/* not protected */
./board/mousse/flash.c:	int addr = dest - info->start[0];
./board/mousse/flash.c:		(unsigned) info->start[0],
./board/mousse/flash.c:		(unsigned) (dest - info->start[0]), (unsigned) data);
./board/mvblue/flash.c:	if (info->flash_id & FLASH_BTYPE)
./board/mvblue/flash.c:		if ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM320B)
./board/mvblue/flash.c:				info->start[i] = base + (i * (0x00002000 << FLASH_SHIFT));
./board/mvblue/flash.c:			for (; i < info->sector_count; i++)									/* +64k		*/
./board/mvblue/flash.c:				info->start[i] = base + (i * (0x00010000 << FLASH_SHIFT)) - (0x00070000 << FLASH_SHIFT);
./board/mvblue/flash.c:			info->start[i++] = base +  0x00000000;								/* -		*/
./board/mvblue/flash.c:			info->start[i++] = base + (0x00004000 << FLASH_SHIFT);				/* +16k		*/
./board/mvblue/flash.c:			info->start[i++] = base + (0x00006000 << FLASH_SHIFT);				/* +8k		*/
./board/mvblue/flash.c:			info->start[i++] = base + (0x00008000 << FLASH_SHIFT);				/* +8k		*/
./board/mvblue/flash.c:			info->start[i++] = base + (0x00010000 << FLASH_SHIFT);				/* +32k		*/
./board/mvblue/flash.c:			for (; i < info->sector_count; i++)									/* +64k		*/
./board/mvblue/flash.c:				info->start[i] = base + (i * (0x00010000 << FLASH_SHIFT)) - (0x00030000 << FLASH_SHIFT);
./board/mvblue/flash.c:		if ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM320T)
./board/mvblue/flash.c:			for (i = 0; i < info->sector_count - 8; i++)						/* +64k		*/
./board/mvblue/flash.c:				info->start[i] = base + (i * (0x00010000 << FLASH_SHIFT));
./board/mvblue/flash.c:			for (; i < info->sector_count; i++)									/* +8k		*/
./board/mvblue/flash.c:				info->start[i] = base + (i * (0x00002000 << FLASH_SHIFT));
./board/mvblue/flash.c:			for (i = 0; i < info->sector_count - 4; i++)						/* +64k		*/
./board/mvblue/flash.c:				info->start[i] = base + (i * (0x00010000 << FLASH_SHIFT));
./board/mvblue/flash.c:			info->start[i++] = base + info->size - (0x00010000 << FLASH_SHIFT);	/* -32k		*/
./board/mvblue/flash.c:			info->start[i++] = base + info->size - (0x00008000 << FLASH_SHIFT);	/* -8k		*/
./board/mvblue/flash.c:			info->start[i++] = base + info->size - (0x00006000 << FLASH_SHIFT);	/* -8k		*/
./board/mvblue/flash.c:			info->start[i]   = base + info->size - (0x00004000 << FLASH_SHIFT);	/* -16k		*/
./board/mvblue/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/mvblue/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/mvblue/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/mvblue/flash.c:	printf ("  Size: %ld MB in %d Sectors\n", info->size >> 20, info->sector_count);
./board/mvblue/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/mvblue/flash.c:		printf (" %08lX%s", info->start[i], info->protect[i] ? " (RO)" : "     ");
./board/mvblue/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/mvblue/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/mvblue/flash.c:		info->flash_id = FLASH_MAN_STM;
./board/mvblue/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/mvblue/flash.c:		info->sector_count = 0;
./board/mvblue/flash.c:		info->size = 0;
./board/mvblue/flash.c:		info->flash_id += FLASH_AM160T;
./board/mvblue/flash.c:		info->sector_count = 37;
./board/mvblue/flash.c:		info->size = (0x00200000 << FLASH_SHIFT);
./board/mvblue/flash.c:		info->flash_id += FLASH_AM160B;
./board/mvblue/flash.c:		info->sector_count = 37;
./board/mvblue/flash.c:		info->size = (0x00200000 << FLASH_SHIFT);
./board/mvblue/flash.c:		info->flash_id += FLASH_AM320T;
./board/mvblue/flash.c:		info->sector_count = 71;
./board/mvblue/flash.c:		info->size = (0x00400000 << FLASH_SHIFT);
./board/mvblue/flash.c:		info->flash_id += FLASH_AM320B;
./board/mvblue/flash.c:		info->sector_count = 71;
./board/mvblue/flash.c:		info->size = (0x00400000 << FLASH_SHIFT);
./board/mvblue/flash.c:		info->flash_id += FLASH_STMW320DT;
./board/mvblue/flash.c:		info->sector_count = 67;
./board/mvblue/flash.c:		info->size = (0x00400000 << FLASH_SHIFT);
./board/mvblue/flash.c:		info->flash_id += FLASH_STMW320DB;
./board/mvblue/flash.c:		info->sector_count = 67;
./board/mvblue/flash.c:		info->size = (0x00400000 << FLASH_SHIFT);
./board/mvblue/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/mvblue/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/mvblue/flash.c:		addr = (FDT *)(info->start[i]);
./board/mvblue/flash.c:		info->protect[i] = addr[2] & 1;
./board/mvblue/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/mvblue/flash.c:		addr = (FDT *)info->start[0];
./board/mvblue/flash.c:	return (info->size);
./board/mvblue/flash.c:	FDT *addr = (FDT *)(info->start[0]);
./board/mvblue/flash.c:	printf("\nflash_erase: first = %d @ 0x%08lx\n", s_first, info->start[s_first] );
./board/mvblue/flash.c:	printf("             last  = %d @ 0x%08lx\n", s_last , info->start[s_last ] );
./board/mvblue/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/mvblue/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) || (info->flash_id > FLASH_AMD_COMP)) {
./board/mvblue/flash.c:		printf ("Can't erase unknown flash type %08lx - aborted\n", info->flash_id);
./board/mvblue/flash.c:		if (info->protect[sect]) {
./board/mvblue/flash.c:		if (info->protect[sect] == 0) {
./board/mvblue/flash.c:			addr = (FDT *)(info->start[sect]);
./board/mvblue/flash.c:	addr = (FDT *)(info->start[l_sect]);
./board/mvblue/flash.c:	vu_char *addr = (vu_char *)(info->start[0]);
./board/ids8247/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/ids8247/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/ids8247/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/ids8247/flash.c:			info->start[i] = base + (i * 0x00020000);
./board/ids8247/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/ids8247/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/ids8247/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/ids8247/flash.c:			info->size >> 20, info->sector_count);
./board/ids8247/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/ids8247/flash.c:			info->start[i],
./board/ids8247/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/ids8247/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/ids8247/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/ids8247/flash.c:		info->sector_count = 0;
./board/ids8247/flash.c:		info->size = 0;
./board/ids8247/flash.c:		info->flash_id += FLASH_28F320J3A;
./board/ids8247/flash.c:		info->sector_count = 32;
./board/ids8247/flash.c:		info->size = 0x00400000;
./board/ids8247/flash.c:		info->flash_id += FLASH_28F640J3A;
./board/ids8247/flash.c:		info->sector_count = 64;
./board/ids8247/flash.c:		info->size = 0x00800000;
./board/ids8247/flash.c:		info->flash_id += FLASH_28F128J3A;
./board/ids8247/flash.c:		info->sector_count = 128;
./board/ids8247/flash.c:		info->size = 0x01000000;
./board/ids8247/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/ids8247/flash.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/ids8247/flash.c:				info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/ids8247/flash.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/ids8247/flash.c:	return (info->size);
./board/ids8247/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/ids8247/flash.c:	type = (info->flash_id & FLASH_VENDMASK);
./board/ids8247/flash.c:			info->flash_id);
./board/ids8247/flash.c:		if (info->protect[sect]) {
./board/ids8247/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/ids8247/flash.c:			FPWV *addr = (FPWV *) (info->start[sect]);
./board/ids8247/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/pcs440ep/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/pcs440ep/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/pcs440ep/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/pcs440ep/flash.c:		info->size >> 20, info->sector_count);
./board/pcs440ep/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/pcs440ep/flash.c:		if (i != (info->sector_count-1))
./board/pcs440ep/flash.c:			size = info->start[i+1] - info->start[i];
./board/pcs440ep/flash.c:			size = info->start[0] + info->size - info->start[i];
./board/pcs440ep/flash.c:		flash = (volatile unsigned long *)info->start[i];
./board/pcs440ep/flash.c:			info->start[i],
./board/pcs440ep/flash.c:			info->protect[i] ? "RO " : "   ");
./board/pcs440ep/flash.c:			info->start[i],
./board/pcs440ep/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/pcs440ep/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/pcs440ep/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/pcs440ep/flash.c:		info->flash_id = FLASH_MAN_SST;
./board/pcs440ep/flash.c:		info->flash_id = FLASH_MAN_STM;
./board/pcs440ep/flash.c:		info->flash_id = FLASH_MAN_EXCEL;
./board/pcs440ep/flash.c:		info->flash_id = FLASH_MAN_MX;
./board/pcs440ep/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/pcs440ep/flash.c:		info->sector_count = 0;
./board/pcs440ep/flash.c:		info->size = 0;
./board/pcs440ep/flash.c:		info->flash_id += FLASH_AM400T;
./board/pcs440ep/flash.c:		info->sector_count = 11;
./board/pcs440ep/flash.c:		info->size = 0x00080000;
./board/pcs440ep/flash.c:		info->flash_id += FLASH_AM400B;
./board/pcs440ep/flash.c:		info->sector_count = 11;
./board/pcs440ep/flash.c:		info->size = 0x00080000;
./board/pcs440ep/flash.c:		info->flash_id += FLASH_AM040;
./board/pcs440ep/flash.c:		info->sector_count = 8;
./board/pcs440ep/flash.c:		info->size = 0x0080000;		/* => 0.5 MB	*/
./board/pcs440ep/flash.c:		info->flash_id += FLASH_AM040;
./board/pcs440ep/flash.c:		info->sector_count = 8;
./board/pcs440ep/flash.c:		info->size = 0x0080000; /* => 0,5 MB */
./board/pcs440ep/flash.c:		info->flash_id += FLASH_AM800T;
./board/pcs440ep/flash.c:		info->sector_count = 19;
./board/pcs440ep/flash.c:		info->size = 0x00100000;
./board/pcs440ep/flash.c:		info->flash_id += FLASH_AM800B;
./board/pcs440ep/flash.c:		info->sector_count = 19;
./board/pcs440ep/flash.c:		info->size = 0x00100000;
./board/pcs440ep/flash.c:		info->flash_id += FLASH_AM160T;
./board/pcs440ep/flash.c:		info->sector_count = 35;
./board/pcs440ep/flash.c:		info->size = 0x00200000;
./board/pcs440ep/flash.c:		info->flash_id += FLASH_AM160B;
./board/pcs440ep/flash.c:		info->sector_count = 35;
./board/pcs440ep/flash.c:		info->size = 0x00200000;
./board/pcs440ep/flash.c:		info->flash_id += FLASH_AM320T;
./board/pcs440ep/flash.c:		info->sector_count = 71;
./board/pcs440ep/flash.c:		info->size = 0x00400000;
./board/pcs440ep/flash.c:		info->flash_id += FLASH_AM320B;
./board/pcs440ep/flash.c:		info->sector_count = 71;
./board/pcs440ep/flash.c:		info->size = 0x00400000;
./board/pcs440ep/flash.c:		info->flash_id += FLASH_AMDL322T;
./board/pcs440ep/flash.c:		info->sector_count = 71;
./board/pcs440ep/flash.c:		info->size = 0x00400000;
./board/pcs440ep/flash.c:		info->flash_id += FLASH_AMDL322B;
./board/pcs440ep/flash.c:		info->sector_count = 71;
./board/pcs440ep/flash.c:		info->size = 0x00400000;
./board/pcs440ep/flash.c:		info->flash_id += FLASH_AMDL323T;
./board/pcs440ep/flash.c:		info->sector_count = 71;
./board/pcs440ep/flash.c:		info->size = 0x00400000;
./board/pcs440ep/flash.c:		info->flash_id += FLASH_AMDL323B;
./board/pcs440ep/flash.c:		info->sector_count = 71;
./board/pcs440ep/flash.c:		info->size = 0x00400000;
./board/pcs440ep/flash.c:		info->flash_id += FLASH_SST020;
./board/pcs440ep/flash.c:		info->sector_count = 64;
./board/pcs440ep/flash.c:		info->size = 0x00040000;
./board/pcs440ep/flash.c:		info->flash_id += FLASH_SST040;
./board/pcs440ep/flash.c:		info->sector_count = 128;
./board/pcs440ep/flash.c:		info->size = 0x00080000;
./board/pcs440ep/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/pcs440ep/flash.c:	if (((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) ||
./board/pcs440ep/flash.c:	    ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM640U)) {
./board/pcs440ep/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/pcs440ep/flash.c:			info->start[i] = base + (i * 0x00001000);
./board/pcs440ep/flash.c:	} else if ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM040) {
./board/pcs440ep/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/pcs440ep/flash.c:			info->start[i] = base + (i * 0x00010000);
./board/pcs440ep/flash.c:	} else if (((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL322B) ||
./board/pcs440ep/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL323B) ||
./board/pcs440ep/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM320B) ||
./board/pcs440ep/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL324B)) {
./board/pcs440ep/flash.c:			info->start[i] = base;
./board/pcs440ep/flash.c:		while (i < info->sector_count) {	/* 64k regular sectors	*/
./board/pcs440ep/flash.c:			info->start[i] = base;
./board/pcs440ep/flash.c:	} else if (((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL322T) ||
./board/pcs440ep/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL323T) ||
./board/pcs440ep/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM320T) ||
./board/pcs440ep/flash.c:		   ((info->flash_id & FLASH_TYPEMASK) == FLASH_AMDL324T)) {
./board/pcs440ep/flash.c:		base += info->size;
./board/pcs440ep/flash.c:		i = info->sector_count;
./board/pcs440ep/flash.c:			info->start[i] = base;
./board/pcs440ep/flash.c:			info->start[i] = base;
./board/pcs440ep/flash.c:		if (info->flash_id & FLASH_BTYPE) {
./board/pcs440ep/flash.c:			info->start[0] = base + 0x00000000;
./board/pcs440ep/flash.c:			info->start[1] = base + 0x00004000;
./board/pcs440ep/flash.c:			info->start[2] = base + 0x00006000;
./board/pcs440ep/flash.c:			info->start[3] = base + 0x00008000;
./board/pcs440ep/flash.c:			for (i = 4; i < info->sector_count; i++) {
./board/pcs440ep/flash.c:				info->start[i] = base + (i * 0x00010000) - 0x00030000;
./board/pcs440ep/flash.c:			i = info->sector_count - 1;
./board/pcs440ep/flash.c:			info->start[i--] = base + info->size - 0x00004000;
./board/pcs440ep/flash.c:			info->start[i--] = base + info->size - 0x00006000;
./board/pcs440ep/flash.c:			info->start[i--] = base + info->size - 0x00008000;
./board/pcs440ep/flash.c:				info->start[i] = base + i * 0x00010000;
./board/pcs440ep/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/pcs440ep/flash.c:		addr2 = (volatile CONFIG_SYS_FLASH_WORD_SIZE *)(info->start[i]);
./board/pcs440ep/flash.c:		if ((info->flash_id & FLASH_VENDMASK) != FLASH_MAN_AMD)
./board/pcs440ep/flash.c:			info->protect[i] = 0;
./board/pcs440ep/flash.c:			info->protect[i] = addr2[CONFIG_SYS_FLASH_READ2] & 1;
./board/pcs440ep/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/pcs440ep/flash.c:		addr2 = (CONFIG_SYS_FLASH_WORD_SIZE *)info->start[0];
./board/pcs440ep/flash.c:	return (info->size);
./board/pcs440ep/flash.c:	volatile CONFIG_SYS_FLASH_WORD_SIZE *addr = (CONFIG_SYS_FLASH_WORD_SIZE *)(info->start[0]);
./board/pcs440ep/flash.c:		if (info->flash_id == FLASH_UNKNOWN)
./board/pcs440ep/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/pcs440ep/flash.c:		if (info->protect[sect])
./board/pcs440ep/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/pcs440ep/flash.c:			addr2 = (CONFIG_SYS_FLASH_WORD_SIZE *)(info->start[sect]);
./board/pcs440ep/flash.c:			if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) {
./board/pcs440ep/flash.c:	addr = (CONFIG_SYS_FLASH_WORD_SIZE *)(info->start[l_sect]);
./board/pcs440ep/flash.c:	addr = (CONFIG_SYS_FLASH_WORD_SIZE *)info->start[0];
./board/pcs440ep/flash.c:	volatile CONFIG_SYS_FLASH_WORD_SIZE *addr2 = (CONFIG_SYS_FLASH_WORD_SIZE *)(info->start[0]);
./board/utx8245/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/utx8245/flash.c:		switch (info->flash_id & FLASH_VENDMASK) {
./board/utx8245/flash.c:		switch (info->flash_id & FLASH_TYPEMASK) {
./board/utx8245/flash.c:			mfct, type, info->size >> 10, info->sector_count);
./board/utx8245/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/utx8245/flash.c:		unsigned long *flash = (unsigned long *) info->start[i];
./board/utx8245/flash.c:		size = (i != (info->sector_count - 1)) ?
./board/utx8245/flash.c:				(info->start[i + 1] - info->start[i]) >> 2 :
./board/utx8245/flash.c:				(info->start[0] + info->size - info->start[i]) >> 2;
./board/utx8245/flash.c:		for (flash = (unsigned long *) info->start[i], erased = 1;
./board/utx8245/flash.c:			 (flash != (unsigned long *) info->start[i] + size) && erased;
./board/utx8245/flash.c:				info->start[i],
./board/utx8245/flash.c:				erased ? "E" : " ", info->protect[i] ? "RO" : "  ");
./board/utx8245/flash.c:	volatile FLASH_WORD_SIZE *addr = (FLASH_WORD_SIZE *) (info->start[0]);
./board/utx8245/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/utx8245/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/utx8245/flash.c:		(info->flash_id > (FLASH_MAN_STM | FLASH_AMD_COMP))) {
./board/utx8245/flash.c:		if (info->protect[sect]) {
./board/utx8245/flash.c:	if ((info->start[0] >= ROM_CS1_START)
./board/utx8245/flash.c:		&& (info->start[0] < ROM_CS0_START))
./board/utx8245/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/utx8245/flash.c:			addr = (FLASH_WORD_SIZE *) (info->start[0] + ((info->
./board/utx8245/flash.c:														   info->
./board/utx8245/flash.c:			if (info->flash_id & FLASH_MAN_SST) {
./board/utx8245/flash.c:	addr = (FLASH_WORD_SIZE *) (info->start[0] + ((info->start[l_sect] -
./board/utx8245/flash.c:												   info->
./board/utx8245/flash.c:	addr = (FLASH_WORD_SIZE *) info->start[0];
./board/utx8245/flash.c:	volatile FLASH_WORD_SIZE *addr2 = (FLASH_WORD_SIZE *) info->start[0];
./board/utx8245/flash.c:	if ((info->start[0] >= ROM_CS1_START)
./board/utx8245/flash.c:		&& (info->start[0] < ROM_CS0_START))
./board/utx8245/flash.c:	dest2 = (FLASH_WORD_SIZE *) (((dest - info->start[0]) << sh8b) +
./board/utx8245/flash.c:								 info->start[0]);
./board/etx094/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/etx094/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) {
./board/etx094/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/etx094/flash.c:			info->start[i] = base + (i * 0x00002000);
./board/etx094/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/etx094/flash.c:		info->start[0] = base + 0x00000000;
./board/etx094/flash.c:		info->start[1] = base + 0x00004000;
./board/etx094/flash.c:		info->start[2] = base + 0x00006000;
./board/etx094/flash.c:		info->start[3] = base + 0x00008000;
./board/etx094/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/etx094/flash.c:			info->start[i] = base + (i * 0x00010000) - 0x00030000;
./board/etx094/flash.c:		info->start[0] = base + 0x00000000;
./board/etx094/flash.c:		info->start[1] = base + 0x00008000;
./board/etx094/flash.c:		info->start[2] = base + 0x0000C000;
./board/etx094/flash.c:		info->start[3] = base + 0x00010000;
./board/etx094/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/etx094/flash.c:			info->start[i] = base + (i * 0x00020000) - 0x00060000;
./board/etx094/flash.c:		i = info->sector_count - 1;
./board/etx094/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/etx094/flash.c:		info->start[i--] = base + info->size - 0x0000C000;
./board/etx094/flash.c:		info->start[i--] = base + info->size - 0x00010000;
./board/etx094/flash.c:			info->start[i] = base + i * 0x00020000;
./board/etx094/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/etx094/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/etx094/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/etx094/flash.c:		info->size >> 20, info->sector_count);
./board/etx094/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/etx094/flash.c:			info->start[i],
./board/etx094/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/etx094/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/etx094/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/etx094/flash.c:		info->flash_id = FLASH_MAN_SST;
./board/etx094/flash.c:		info->flash_id = FLASH_MAN_STM;
./board/etx094/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/etx094/flash.c:		info->sector_count = 0;
./board/etx094/flash.c:		info->size = 0;
./board/etx094/flash.c:		info->flash_id += FLASH_AM400T;
./board/etx094/flash.c:		info->sector_count = 11;
./board/etx094/flash.c:		info->size = 0x00100000;
./board/etx094/flash.c:		info->flash_id += FLASH_AM400B;
./board/etx094/flash.c:		info->sector_count = 11;
./board/etx094/flash.c:		info->size = 0x00100000;
./board/etx094/flash.c:		info->flash_id += FLASH_AM800T;
./board/etx094/flash.c:		info->sector_count = 19;
./board/etx094/flash.c:		info->size = 0x00200000;
./board/etx094/flash.c:		info->flash_id += FLASH_AM800B;
./board/etx094/flash.c:		info->sector_count = 19;
./board/etx094/flash.c:		info->size = 0x00100000;	/* => 1 MB */
./board/etx094/flash.c:		info->sector_count = 19;
./board/etx094/flash.c:		info->size = 0x00200000;	/* => 2 MB	*/
./board/etx094/flash.c:		info->flash_id += FLASH_AM160T;
./board/etx094/flash.c:		info->sector_count = 35;
./board/etx094/flash.c:		info->size = 0x00400000;
./board/etx094/flash.c:		info->flash_id += FLASH_AM160B;
./board/etx094/flash.c:		info->sector_count = 35;
./board/etx094/flash.c:		info->size = 0x00200000;	/* => 2 MB	*/
./board/etx094/flash.c:		info->sector_count = 35;
./board/etx094/flash.c:		info->size = 0x00400000;	/* => 4 MB	*/
./board/etx094/flash.c:		info->flash_id += FLASH_AM320T;
./board/etx094/flash.c:		info->sector_count = 67;
./board/etx094/flash.c:		info->size = 0x00800000;
./board/etx094/flash.c:		info->flash_id += FLASH_AM320B;
./board/etx094/flash.c:		info->sector_count = 67;
./board/etx094/flash.c:		info->size = 0x00800000;
./board/etx094/flash.c:		info->flash_id += FLASH_SST200A;
./board/etx094/flash.c:		info->sector_count = 64;	/* 39xF200A ID ( 2M = 128K x 16	) */
./board/etx094/flash.c:		info->size = 0x00080000;
./board/etx094/flash.c:		info->flash_id += FLASH_SST400A;
./board/etx094/flash.c:		info->sector_count = 128;	/* 39xF400A ID ( 4M = 256K x 16	) */
./board/etx094/flash.c:		info->size = 0x00100000;
./board/etx094/flash.c:		info->flash_id += FLASH_SST800A;
./board/etx094/flash.c:		info->sector_count = 256;	/* 39xF800A ID ( 8M = 512K x 16	) */
./board/etx094/flash.c:		info->size = 0x00200000;
./board/etx094/flash.c:		info->flash_id += FLASH_STM800AB;
./board/etx094/flash.c:		info->sector_count = 19;
./board/etx094/flash.c:		info->size = 0x00200000;
./board/etx094/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/etx094/flash.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/etx094/flash.c:			info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/etx094/flash.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/etx094/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) {
./board/etx094/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/etx094/flash.c:			info->start[i] = base + (i * 0x00002000);
./board/etx094/flash.c:		if (info->flash_id & FLASH_BTYPE) {
./board/etx094/flash.c:			info->start[0] = base + 0x00000000;
./board/etx094/flash.c:			info->start[1] = base + 0x00004000;
./board/etx094/flash.c:			info->start[2] = base + 0x00006000;
./board/etx094/flash.c:			info->start[3] = base + 0x00008000;
./board/etx094/flash.c:			for (i = 4; i < info->sector_count; i++) {
./board/etx094/flash.c:				info->start[i] = base + (i * 0x00010000) - 0x00030000;
./board/etx094/flash.c:			info->start[0] = base + 0x00000000;
./board/etx094/flash.c:			info->start[1] = base + 0x00008000;
./board/etx094/flash.c:			info->start[2] = base + 0x0000C000;
./board/etx094/flash.c:			info->start[3] = base + 0x00010000;
./board/etx094/flash.c:			for (i = 4; i < info->sector_count; i++) {
./board/etx094/flash.c:				info->start[i] = base + (i * 0x00020000) - 0x00060000;
./board/etx094/flash.c:			i = info->sector_count - 1;
./board/etx094/flash.c:			info->start[i--] = base + info->size - 0x00008000;
./board/etx094/flash.c:			info->start[i--] = base + info->size - 0x0000C000;
./board/etx094/flash.c:			info->start[i--] = base + info->size - 0x00010000;
./board/etx094/flash.c:				info->start[i] = base + i * 0x00020000;
./board/etx094/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/etx094/flash.c:			s_addr = (volatile unsigned short *)(info->start[i]);
./board/etx094/flash.c:			info->protect[i] = s_addr[2] & 1;
./board/etx094/flash.c:			addr = (volatile unsigned long *)(info->start[i]);
./board/etx094/flash.c:			info->protect[i] = addr[2] & 1;
./board/etx094/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/etx094/flash.c:		s_addr = (volatile unsigned short *)(info->start[0]);
./board/etx094/flash.c:		addr = (volatile unsigned long *)info->start[0];
./board/etx094/flash.c:	return (info->size);
./board/etx094/flash.c:	vu_long *addr = (vu_long*)(info->start[0]);
./board/etx094/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/etx094/flash.c:	type = (info->flash_id & FLASH_VENDMASK);
./board/etx094/flash.c:			info->flash_id);
./board/etx094/flash.c:		if (info->protect[sect]) {
./board/etx094/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/etx094/flash.c:			vu_short *s_sect_addr = (vu_short*)(info->start[sect]);
./board/etx094/flash.c:			vu_long	*sect_addr = (vu_long*)(info->start[sect]);
./board/etx094/flash.c:	addr = (volatile unsigned long *)info->start[0];
./board/etx094/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/etx094/flash.c:	vu_long *addr = (vu_long*)(info->start[0]);
./board/cmi/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/cmi/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/cmi/flash.c:	    for (i = 0; i < info->sector_count; i++) {
./board/cmi/flash.c:		info->start[i] = base + i * FLASH_BLOCK_SIZE;
./board/cmi/flash.c:		info->flash_id);
./board/cmi/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/cmi/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/cmi/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/cmi/flash.c:	if (info->size >= (1 << 20)) {
./board/cmi/flash.c:		info->size >> i,
./board/cmi/flash.c:		info->sector_count);
./board/cmi/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/cmi/flash.c:			info->start[i],
./board/cmi/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/cmi/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/cmi/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/cmi/flash.c:		info->flash_id = FLASH_MAN_SST;
./board/cmi/flash.c:		info->flash_id = FLASH_MAN_STM;
./board/cmi/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/cmi/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/cmi/flash.c:		info->sector_count = 0;
./board/cmi/flash.c:		info->size = 0;
./board/cmi/flash.c:		info->flash_id += FLASH_28F320J3A;
./board/cmi/flash.c:		info->sector_count = 32;
./board/cmi/flash.c:		info->size = 0x00400000;
./board/cmi/flash.c:		info->flash_id += FLASH_28F640J3A;
./board/cmi/flash.c:		info->sector_count = 64;
./board/cmi/flash.c:		info->size = 0x00800000;
./board/cmi/flash.c:		info->flash_id += FLASH_28F128J3A;
./board/cmi/flash.c:		info->sector_count = 128;
./board/cmi/flash.c:		info->size = 0x01000000;
./board/cmi/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/cmi/flash.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/cmi/flash.c:			info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/cmi/flash.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/cmi/flash.c:	return (info->size);
./board/cmi/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/cmi/flash.c:	if ((info->flash_id & FLASH_VENDMASK) != FLASH_MAN_INTEL) {
./board/cmi/flash.c:		if (info->protect[sect]) {
./board/cmi/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/cmi/flash.c:			vu_short *addr = (vu_short *)(info->start[sect]);
./board/cmi/flash.c:			printf("Erase sector %d at start addr 0x%08X", sect, (unsigned int)info->start[sect]);
./board/cmi/flash.c:					printf("Flash erase timeout at address %lx\n", info->start[sect]);
./board/cmi/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/cmi/flash.c:	vu_short *addr = (vu_short*)(info->start[0]);
./board/cmi/flash.c:	if (!(info->flash_id & FLASH_VENDMASK)) {
./board/cmi/flash.c:	vu_short *addr = (vu_short*)(info->start[sector]);
./board/cmi/flash.c:			printf("Flash protect timeout at address %lx\n",  info->start[sector]);
./board/cmi/flash.c:	info->protect[sector] = prot;
./board/cobra5272/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/cobra5272/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/cobra5272/flash.c:		info->size >> 20, info->sector_count);
./board/cobra5272/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/cobra5272/flash.c:		printf (" %08lX%s", info->start[i],
./board/cobra5272/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/cobra5272/flash.c:	if (info->flash_id == FLASH_UNKNOWN)
./board/cobra5272/flash.c:	if ((info->flash_id & FLASH_VENDMASK) !=
./board/cobra5272/flash.c:		if (info->protect[sect]) {
./board/cobra5272/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/cobra5272/flash.c:				(volatile u16 *) (info->start[sect]);
./board/gth/flash.c:	if (info->flash_id & FLASH_BTYPE)
./board/gth/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/gth/flash.c:			info->start[i] = base + (i * 0x00040000);
./board/gth/flash.c:		i = info->sector_count - 1;
./board/gth/flash.c:			info->start[i] = base + i * 0x00040000;
./board/gth/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/gth/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/gth/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/gth/flash.c:		info->size >> 20,
./board/gth/flash.c:		info->sector_count);
./board/gth/flash.c:	for (i=0; i<info->sector_count; ++i)
./board/gth/flash.c:			info->start[i],
./board/gth/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/gth/flash.c:			info->flash_id = FLASH_MAN_AMD;
./board/gth/flash.c:			info->flash_id = FLASH_MAN_FUJ;
./board/gth/flash.c:			info->flash_id = FLASH_UNKNOWN;
./board/gth/flash.c:			info->sector_count = 0;
./board/gth/flash.c:			info->size = 0;
./board/gth/flash.c:			info->flash_id += FLASH_AM040B;
./board/gth/flash.c:			info->sector_count = 8;
./board/gth/flash.c:			info->size = 0x00200000;
./board/gth/flash.c:			info->flash_id += FLASH_AM400T;
./board/gth/flash.c:			info->sector_count = 11;
./board/gth/flash.c:			info->size = 0x00100000;
./board/gth/flash.c:			info->flash_id += FLASH_AM400B;
./board/gth/flash.c:			info->sector_count = 11;
./board/gth/flash.c:			info->size = 0x00100000;
./board/gth/flash.c:			info->flash_id += FLASH_AM800T;
./board/gth/flash.c:			info->sector_count = 19;
./board/gth/flash.c:			info->size = 0x00200000;
./board/gth/flash.c:			info->flash_id += FLASH_AM800B;
./board/gth/flash.c:			info->sector_count = 19;
./board/gth/flash.c:			info->size = 0x00200000;
./board/gth/flash.c:			info->flash_id += FLASH_AM160T;
./board/gth/flash.c:			info->sector_count = 35;
./board/gth/flash.c:			info->size = 0x00400000;
./board/gth/flash.c:			info->flash_id += FLASH_AM160B;
./board/gth/flash.c:			info->sector_count = 35;
./board/gth/flash.c:			info->size = 0x00400000;
./board/gth/flash.c:			info->flash_id += FLASH_AM320T;
./board/gth/flash.c:			info->sector_count = 67;
./board/gth/flash.c:			info->size = 0x00800000;
./board/gth/flash.c:			info->flash_id += FLASH_AM320B;
./board/gth/flash.c:			info->sector_count = 67;
./board/gth/flash.c:			info->size = 0x00800000;
./board/gth/flash.c:			info->flash_id = FLASH_UNKNOWN;
./board/gth/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/gth/flash.c:		info->start[0] = base + 0x00000000;
./board/gth/flash.c:		info->start[1] = base + 0x00008000;
./board/gth/flash.c:		info->start[2] = base + 0x0000C000;
./board/gth/flash.c:		info->start[3] = base + 0x00010000;
./board/gth/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/gth/flash.c:			info->start[i] = base + (i * 0x00020000) - 0x00060000;
./board/gth/flash.c:		i = info->sector_count - 1;
./board/gth/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/gth/flash.c:		info->start[i--] = base + info->size - 0x0000C000;
./board/gth/flash.c:		info->start[i--] = base + info->size - 0x00010000;
./board/gth/flash.c:			info->start[i] = base + i * 0x00020000;
./board/gth/flash.c:	for (i = 0; i < info->sector_count; i++)
./board/gth/flash.c:		addr = (volatile unsigned long *)(info->start[i]);
./board/gth/flash.c:		info->protect[i] = addr[2] & 1;
./board/gth/flash.c:	if (info->flash_id != FLASH_UNKNOWN)
./board/gth/flash.c:		addr = (volatile unsigned long *)info->start[0];
./board/gth/flash.c:	return (info->size);
./board/gth/flash.c:	vu_long *addr = (vu_long*)(info->start[0]);
./board/gth/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/gth/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/gth/flash.c:	    (info->flash_id > FLASH_AMD_COMP)) {
./board/gth/flash.c:		if (info->protect[sect]) {
./board/gth/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/gth/flash.c:			addr = (vu_long*)(info->start[sect]);
./board/gth/flash.c:	addr = (vu_long*)(info->start[l_sect]);
./board/gth/flash.c:	addr = (volatile unsigned long *)info->start[0];
./board/gth/flash.c:	vu_long *addr = (vu_long*)(info->start[0]);
./board/freescale/mpc8610hpcd/mpc8610hpcd_diu.c:	pGD->winSizeY = yres - info->logo_height;
./board/freescale/mpc8610hpcd/mpc8610hpcd_diu.c:	pGD->memSize = info->screen_size - info->logo_size;
./board/freescale/m5373evb/nand.c:	struct nand_chip *this = mtdinfo->priv;
./board/freescale/m54455evb/m54455evb.c:	info->flash_id          = 0x01000000;
./board/freescale/m54455evb/m54455evb.c:	info->portwidth         = 1;
./board/freescale/m54455evb/m54455evb.c:	info->chipwidth         = 1;
./board/freescale/m54455evb/m54455evb.c:	info->buffer_size       = 32;
./board/freescale/m54455evb/m54455evb.c:	info->erase_blk_tout    = 16384;
./board/freescale/m54455evb/m54455evb.c:	info->write_tout        = 2;
./board/freescale/m54455evb/m54455evb.c:	info->buffer_write_tout = 5;
./board/freescale/m54455evb/m54455evb.c:	info->vendor            = 0xFFF0; /* CFI_CMDSET_AMD_LEGACY */
./board/freescale/m54455evb/m54455evb.c:	info->cmd_reset         = 0x00F0;
./board/freescale/m54455evb/m54455evb.c:	info->interface         = FLASH_CFI_X8;
./board/freescale/m54455evb/m54455evb.c:	info->legacy_unlock     = 0;
./board/freescale/m54455evb/m54455evb.c:	info->manufacturer_id   = (u16) ATM_MANUFACT;
./board/freescale/m54455evb/m54455evb.c:	info->device_id         = ATM_ID_LV040;
./board/freescale/m54455evb/m54455evb.c:	info->device_id2        = 0;
./board/freescale/m54455evb/m54455evb.c:	info->ext_addr          = 0;
./board/freescale/m54455evb/m54455evb.c:	info->cfi_version       = 0x3133;
./board/freescale/m54455evb/m54455evb.c:	info->cfi_offset        = 0x0000;
./board/freescale/m54455evb/m54455evb.c:	info->addr_unlock1      = 0x00000555;
./board/freescale/m54455evb/m54455evb.c:	info->addr_unlock2      = 0x000002AA;
./board/freescale/m54455evb/m54455evb.c:	info->name              = "CFI conformant";
./board/freescale/m54455evb/m54455evb.c:	info->size              = 0;
./board/freescale/m54455evb/m54455evb.c:	info->sector_count      = CONFIG_SYS_ATMEL_TOTALSECT;
./board/freescale/m54455evb/m54455evb.c:	info->start[0] = base;
./board/freescale/m54455evb/m54455evb.c:		info->size += sect[i] * sectsz[i];
./board/freescale/m54455evb/m54455evb.c:			info->start[k + 1] = info->start[k] + sectsz[i];
./board/freescale/m54455evb/m54455evb.c:			info->protect[k] = 0;
./board/freescale/mpc8260ads/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/freescale/mpc8260ads/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/freescale/mpc8260ads/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/freescale/mpc8260ads/flash.c:		info->size >> 20, info->sector_count);
./board/freescale/mpc8260ads/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/freescale/mpc8260ads/flash.c:			info->start[i],
./board/freescale/mpc8260ads/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/freescale/mpc8260ads/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/freescale/mpc8260ads/flash.c:	if (    ((info->flash_id & FLASH_VENDMASK) != FLASH_MAN_INTEL)
./board/freescale/mpc8260ads/flash.c:	     && ((info->flash_id & FLASH_VENDMASK) != FLASH_MAN_SHARP) ) {
./board/freescale/mpc8260ads/flash.c:			info->flash_id);
./board/freescale/mpc8260ads/flash.c:		if (info->protect[sect]) {
./board/freescale/mpc8260ads/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/freescale/mpc8260ads/flash.c:			vu_long *addr = (vu_long *)(info->start[sect]);
./board/freescale/mpc8260ads/flash.c:			if((info->flash_id & FLASH_TYPEMASK) != FLASH_LH28F016SCT) {
./board/freescale/mpc8260ads/flash.c:	vu_long *addr = (vu_long *)(info->start[sector]);
./board/freescale/mpc8260ads/flash.c:		info->protect[sector] = prot;
./board/freescale/mpc8260ads/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/freescale/mpc8260ads/flash.c:			if (info->protect[i]) {
./board/freescale/mpc8260ads/flash.c:				addr = (vu_long *)(info->start[i]);
./board/freescale/m5329evb/nand.c:	struct nand_chip *this = mtdinfo->priv;
./board/freescale/common/fsl_diu_fb.c:	struct fb_var_screeninfo *var = &info->var;
./board/freescale/common/fsl_diu_fb.c:	memset(info->screen_base, 0, info->smem_len);
./board/freescale/common/fsl_diu_fb.c:	info->line_length = var->xres * var->bits_per_pixel / 8;
./board/freescale/common/fsl_diu_fb.c:	info->logo_size = 0;
./board/freescale/common/fsl_diu_fb.c:	info->logo_height = 0;
./board/freescale/common/fsl_diu_fb.c:	ad->addr    = cpu_to_le32((unsigned int)info->screen_base);
./board/freescale/common/fsl_diu_fb.c:		info->logo_height = fsl_diu_display_bmp(splash_bmp, 0, 0, 0);
./board/freescale/common/fsl_diu_fb.c:		info->logo_size = info->logo_height * info->line_length;
./board/freescale/common/fsl_diu_fb.c:			info->logo_height,info->logo_size);
./board/freescale/common/fsl_diu_fb.c:	info->smem_len = 1280 * 4 *1024 + bytes_align;
./board/freescale/common/fsl_diu_fb.c:	debug("MAP_VIDEO_MEMORY: smem_len = %d\n", info->smem_len);
./board/freescale/common/fsl_diu_fb.c:	info->screen_base = malloc(info->smem_len);
./board/freescale/common/fsl_diu_fb.c:	if (info->screen_base == NULL) {
./board/freescale/common/fsl_diu_fb.c:	info->smem_start = (unsigned int) info->screen_base;
./board/freescale/common/fsl_diu_fb.c:	offset = (unsigned long)info->screen_base & mask;
./board/freescale/common/fsl_diu_fb.c:		info->screen_base += (bytes_align - offset);
./board/freescale/common/fsl_diu_fb.c:		info->smem_len = info->smem_len - (bytes_align - offset);
./board/freescale/common/fsl_diu_fb.c:		info->smem_len = info->smem_len - bytes_align;
./board/freescale/common/fsl_diu_fb.c:	info->screen_size = info->smem_len;
./board/freescale/common/fsl_diu_fb.c:		info->smem_start, info->smem_len);
./board/freescale/common/fsl_diu_fb.c:	cpp = info->var.bits_per_pixel / 8;
./board/freescale/common/fsl_diu_fb.c:	debug("xres = %d\n", info->var.xres);
./board/freescale/common/fsl_diu_fb.c:	debug("yres = %d\n", info->var.yres);
./board/freescale/common/fsl_diu_fb.c:	debug("Screen_base = 0x%x\n", (unsigned int)info->screen_base);
./board/freescale/common/fsl_diu_fb.c:	if (((width+xoffset) > info->var.xres) ||
./board/freescale/common/fsl_diu_fb.c:	    ((height+yoffset) > info->var.yres)) {
./board/freescale/common/fsl_diu_fb.c:			fb_t = (unsigned int *) ((unsigned int)info->screen_base + (((y+yoffset) * info->var.xres) + xoffset)*cpp);
./board/freescale/common/fsl_diu_fb.c:			fb_t = (unsigned int *) ((unsigned int)info->screen_base + (((y+yoffset) * info->var.xres) + xoffset)*cpp);
./board/freescale/common/fsl_diu_fb.c:			fb_t = (unsigned int *) ((unsigned int)info->screen_base + (((y+yoffset) * info->var.xres) + xoffset)*cpp);
./board/freescale/common/fsl_diu_fb.c:			fb_t = (unsigned int *) ((unsigned int)info->screen_base + (((y+yoffset) * info->var.xres) + xoffset)*cpp);
./board/freescale/common/fsl_diu_fb.c:	memset(info->screen_base, 0, info->smem_len);
./board/freescale/mpc8266ads/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/freescale/mpc8266ads/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/freescale/mpc8266ads/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/freescale/mpc8266ads/flash.c:		info->size >> 20, info->sector_count);
./board/freescale/mpc8266ads/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/freescale/mpc8266ads/flash.c:			info->start[i],
./board/freescale/mpc8266ads/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/freescale/mpc8266ads/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/freescale/mpc8266ads/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/freescale/mpc8266ads/flash.c:		info->sector_count = 0;
./board/freescale/mpc8266ads/flash.c:		info->size = 0;
./board/freescale/mpc8266ads/flash.c:		info->flash_id += FLASH_28F016SV;
./board/freescale/mpc8266ads/flash.c:		info->sector_count = 32;
./board/freescale/mpc8266ads/flash.c:		info->size = 0x00400000;
./board/freescale/mpc8266ads/flash.c:		info->flash_id += FLASH_28F160S3;
./board/freescale/mpc8266ads/flash.c:		info->sector_count = 32;
./board/freescale/mpc8266ads/flash.c:		info->size = 0x00400000;
./board/freescale/mpc8266ads/flash.c:		info->flash_id += FLASH_28F320S3;
./board/freescale/mpc8266ads/flash.c:		info->sector_count = 64;
./board/freescale/mpc8266ads/flash.c:		info->size = 0x00800000;
./board/freescale/mpc8266ads/flash.c:		info->flash_id      = FLASH_MAN_SHARP | FLASH_LH28F016SCT;
./board/freescale/mpc8266ads/flash.c:		info->sector_count  = 32;
./board/freescale/mpc8266ads/flash.c:		info->size          = 0x00800000;
./board/freescale/mpc8266ads/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/freescale/mpc8266ads/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/freescale/mpc8266ads/flash.c:		info->start[i] = base;
./board/freescale/mpc8266ads/flash.c:		info->protect[i] = 0;
./board/freescale/mpc8266ads/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/freescale/mpc8266ads/flash.c:		addr = (vu_long *)info->start[0];
./board/freescale/mpc8266ads/flash.c:	return (info->size);
./board/freescale/mpc8266ads/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/freescale/mpc8266ads/flash.c:	if (    ((info->flash_id & FLASH_VENDMASK) != FLASH_MAN_INTEL)
./board/freescale/mpc8266ads/flash.c:	     && ((info->flash_id & FLASH_VENDMASK) != FLASH_MAN_SHARP) ) {
./board/freescale/mpc8266ads/flash.c:			info->flash_id);
./board/freescale/mpc8266ads/flash.c:		if (info->protect[sect]) {
./board/freescale/mpc8266ads/flash.c:	if(clear_block_lock_bit((vu_long *)(info->start[s_first]))){
./board/freescale/mpc8266ads/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/freescale/mpc8266ads/flash.c:			vu_long *addr = (vu_long *)(info->start[sect]);
./board/freescale/mpc8266ads/flash.c:			if((info->flash_id & FLASH_TYPEMASK) != FLASH_LH28F016SCT) {
./board/freescale/m5253demo/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_SST) {
./board/freescale/m5253demo/flash.c:		info->start[0] = base;
./board/freescale/m5253demo/flash.c:			info->start[k + 1] = info->start[k] + CONFIG_SYS_SST_SECTSZ;
./board/freescale/m5253demo/flash.c:			info->protect[k] = 0;
./board/freescale/m5253demo/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/freescale/m5253demo/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/freescale/m5253demo/flash.c:	if (info->size > 0x100000) {
./board/freescale/m5253demo/flash.c:		printf("  Size: %ld", info->size >> 20);
./board/freescale/m5253demo/flash.c:		remainder = (info->size % 0x100000);
./board/freescale/m5253demo/flash.c:		printf("MB in %d Sectors\n", info->sector_count);
./board/freescale/m5253demo/flash.c:		       info->size >> 10, info->sector_count);
./board/freescale/m5253demo/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/freescale/m5253demo/flash.c:		       info->start[i], info->protect[i] ? " (RO)" : "     ");
./board/freescale/m5253demo/flash.c:		info->flash_id = FLASH_MAN_SST;
./board/freescale/m5253demo/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/freescale/m5253demo/flash.c:		info->sector_count = 0;
./board/freescale/m5253demo/flash.c:		info->size = 0;
./board/freescale/m5253demo/flash.c:		info->flash_id += FLASH_SST6401B;
./board/freescale/m5253demo/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/freescale/m5253demo/flash.c:	info->sector_count = 0;
./board/freescale/m5253demo/flash.c:	info->size = 0;
./board/freescale/m5253demo/flash.c:	info->sector_count = CONFIG_SYS_SST_SECT;
./board/freescale/m5253demo/flash.c:	info->size = CONFIG_SYS_SST_SECT * CONFIG_SYS_SST_SECTSZ;
./board/freescale/m5253demo/flash.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/freescale/m5253demo/flash.c:		       info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/freescale/m5253demo/flash.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/freescale/m5253demo/flash.c:	return (info->size);
./board/freescale/m5253demo/flash.c:		if (info->flash_id == FLASH_UNKNOWN)
./board/freescale/m5253demo/flash.c:	type = (info->flash_id & FLASH_VENDMASK);
./board/freescale/m5253demo/flash.c:		type = (info->flash_id & FLASH_VENDMASK);
./board/freescale/m5253demo/flash.c:		       info->flash_id);
./board/freescale/m5253demo/flash.c:		if (info->protect[sect]) {
./board/freescale/m5253demo/flash.c:			addr = (FPWV *) info->start[0];
./board/freescale/m5253demo/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/freescale/m5253demo/flash.c:			addr = (FPWV *) (info->start[sect]);
./board/freescale/m5253demo/flash.c:	if (info->flash_id == FLASH_UNKNOWN)
./board/eric/flash.c:	if ((info->flash_id & FLASH_TYPEMASK) == FLASH_28F320J3A ||
./board/eric/flash.c:	    (info->flash_id & FLASH_TYPEMASK) == FLASH_28F640J3A ||
./board/eric/flash.c:	    (info->flash_id & FLASH_TYPEMASK) == FLASH_28F128J3A) {
./board/eric/flash.c:	    for (i = 0; i < info->sector_count; i++) {
./board/eric/flash.c:		info->start[i] = base + (i * info->size/info->sector_count);
./board/eric/flash.c:	} else if (info->flash_id & FLASH_BTYPE) {
./board/eric/flash.c:	     if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/eric/flash.c:		info->start[0] = base + 0x00000000;
./board/eric/flash.c:		info->start[1] = base + 0x00004000;
./board/eric/flash.c:		info->start[2] = base + 0x00008000;
./board/eric/flash.c:		info->start[3] = base + 0x0000C000;
./board/eric/flash.c:		info->start[4] = base + 0x00010000;
./board/eric/flash.c:		info->start[5] = base + 0x00014000;
./board/eric/flash.c:		info->start[6] = base + 0x00018000;
./board/eric/flash.c:		info->start[7] = base + 0x0001C000;
./board/eric/flash.c:		for (i = 8; i < info->sector_count; i++) {
./board/eric/flash.c:			info->start[i] = base + (i * 0x00020000) - 0x000E0000;
./board/eric/flash.c:		info->start[0] = base + 0x00000000;
./board/eric/flash.c:		info->start[1] = base + 0x00008000;
./board/eric/flash.c:		info->start[2] = base + 0x0000C000;
./board/eric/flash.c:		info->start[3] = base + 0x00010000;
./board/eric/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/eric/flash.c:			info->start[i] = base + (i * 0x00020000) - 0x00060000;
./board/eric/flash.c:		info->start[0] = base + 0x00000000;
./board/eric/flash.c:		info->start[1] = base + 0x00002000;
./board/eric/flash.c:		info->start[2] = base + 0x00004000;
./board/eric/flash.c:		info->start[3] = base + 0x00006000;
./board/eric/flash.c:		info->start[4] = base + 0x00008000;
./board/eric/flash.c:		info->start[5] = base + 0x0000A000;
./board/eric/flash.c:		info->start[6] = base + 0x0000C000;
./board/eric/flash.c:		info->start[7] = base + 0x0000E000;
./board/eric/flash.c:		for (i = 8; i < info->sector_count; i++) {
./board/eric/flash.c:			info->start[i] = base + (i * 0x00010000) - 0x00070000;
./board/eric/flash.c:		info->start[0] = base + 0x00000000;
./board/eric/flash.c:		info->start[1] = base + 0x00004000;
./board/eric/flash.c:		info->start[2] = base + 0x00006000;
./board/eric/flash.c:		info->start[3] = base + 0x00008000;
./board/eric/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/eric/flash.c:			info->start[i] = base + (i * 0x00010000) - 0x00030000;
./board/eric/flash.c:		i = info->sector_count - 1;
./board/eric/flash.c:	     if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/eric/flash.c:		info->start[i--] = base + info->size - 0x00004000;
./board/eric/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/eric/flash.c:		info->start[i--] = base + info->size - 0x0000C000;
./board/eric/flash.c:		info->start[i--] = base + info->size - 0x00010000;
./board/eric/flash.c:		info->start[i--] = base + info->size - 0x00014000;
./board/eric/flash.c:		info->start[i--] = base + info->size - 0x00018000;
./board/eric/flash.c:		info->start[i--] = base + info->size - 0x0001C000;
./board/eric/flash.c:			info->start[i] = base + i * 0x00020000;
./board/eric/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/eric/flash.c:		info->start[i--] = base + info->size - 0x0000C000;
./board/eric/flash.c:		info->start[i--] = base + info->size - 0x00010000;
./board/eric/flash.c:			info->start[i] = base + i * 0x00020000;
./board/eric/flash.c:		info->start[i--] = base + info->size - 0x00002000;
./board/eric/flash.c:		info->start[i--] = base + info->size - 0x00004000;
./board/eric/flash.c:		info->start[i--] = base + info->size - 0x00006000;
./board/eric/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/eric/flash.c:		info->start[i--] = base + info->size - 0x0000A000;
./board/eric/flash.c:		info->start[i--] = base + info->size - 0x0000C000;
./board/eric/flash.c:		info->start[i--] = base + info->size - 0x0000E000;
./board/eric/flash.c:			info->start[i] = base + i * 0x00010000;
./board/eric/flash.c:		info->start[i--] = base + info->size - 0x00004000;
./board/eric/flash.c:		info->start[i--] = base + info->size - 0x00006000;
./board/eric/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/eric/flash.c:			info->start[i] = base + i * 0x00010000;
./board/eric/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/eric/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/eric/flash.c:	if (info->flash_id & 0x0001 ) {
./board/eric/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/eric/flash.c:		info->size >> 20, info->sector_count);
./board/eric/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/eric/flash.c:			info->start[i],
./board/eric/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/eric/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/eric/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/eric/flash.c:		info->flash_id = FLASH_MAN_STM;
./board/eric/flash.c:		info->flash_id = FLASH_MAN_SST;
./board/eric/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/eric/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/eric/flash.c:		info->sector_count = 0;
./board/eric/flash.c:		info->size = 0;
./board/eric/flash.c:		info->flash_id += FLASH_AM400T;
./board/eric/flash.c:		info->sector_count = 11;
./board/eric/flash.c:		info->size = 0x00100000;
./board/eric/flash.c:		info->flash_id += FLASH_AM400B;
./board/eric/flash.c:		info->sector_count = 11;
./board/eric/flash.c:		info->size = 0x00100000;
./board/eric/flash.c:		info->flash_id += FLASH_AM800T;
./board/eric/flash.c:		info->sector_count = 19;
./board/eric/flash.c:		info->size = 0x00200000;
./board/eric/flash.c:		info->flash_id += FLASH_AM800B;
./board/eric/flash.c:		info->sector_count = 19;
./board/eric/flash.c:		info->size = 0x00200000;
./board/eric/flash.c:		info->flash_id += FLASH_AM160T;
./board/eric/flash.c:		info->sector_count = 35;
./board/eric/flash.c:		info->size = 0x00400000;
./board/eric/flash.c:		info->flash_id += FLASH_AM160B;
./board/eric/flash.c:		info->sector_count = 35;
./board/eric/flash.c:		info->size = 0x00400000;
./board/eric/flash.c:		info->flash_id += FLASH_AM320T;
./board/eric/flash.c:		info->sector_count = 67;
./board/eric/flash.c:		info->size = 0x00800000;
./board/eric/flash.c:		info->flash_id += FLASH_AM320B;
./board/eric/flash.c:		info->sector_count = 67;
./board/eric/flash.c:		info->size = 0x00800000;
./board/eric/flash.c:		info->flash_id += FLASH_INTEL800T;
./board/eric/flash.c:		info->sector_count = 23;
./board/eric/flash.c:		info->size = 0x00200000;
./board/eric/flash.c:		info->flash_id += FLASH_INTEL800B;
./board/eric/flash.c:		info->sector_count = 23;
./board/eric/flash.c:		info->size = 0x00200000;
./board/eric/flash.c:		info->flash_id += FLASH_INTEL160T;
./board/eric/flash.c:		info->sector_count = 39;
./board/eric/flash.c:		info->size = 0x00400000;
./board/eric/flash.c:		info->flash_id += FLASH_INTEL160B;
./board/eric/flash.c:		info->sector_count = 39;
./board/eric/flash.c:		info->size = 0x00400000;
./board/eric/flash.c:		info->flash_id += FLASH_INTEL320T;
./board/eric/flash.c:		info->sector_count = 71;
./board/eric/flash.c:		info->size = 0x00800000;
./board/eric/flash.c:		info->flash_id += FLASH_AM320B;
./board/eric/flash.c:		info->sector_count = 71;
./board/eric/flash.c:		info->size = 0x00800000;
./board/eric/flash.c:		info->flash_id += FLASH_INTEL320T;
./board/eric/flash.c:		info->sector_count = 135;
./board/eric/flash.c:		info->size = 0x01000000;
./board/eric/flash.c:		info->flash_id += FLASH_AM320B;
./board/eric/flash.c:		info->sector_count = 135;
./board/eric/flash.c:		info->size = 0x01000000;
./board/eric/flash.c:		info->flash_id += FLASH_28F320J3A;
./board/eric/flash.c:		info->sector_count = 32;
./board/eric/flash.c:		info->size = 0x00400000;
./board/eric/flash.c:		info->flash_id += FLASH_28F640J3A;
./board/eric/flash.c:		info->sector_count = 64;
./board/eric/flash.c:		info->size = 0x00800000;
./board/eric/flash.c:		info->flash_id += FLASH_28F128J3A;
./board/eric/flash.c:		info->sector_count = 128;
./board/eric/flash.c:		info->size = 0x01000000;
./board/eric/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/eric/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/eric/flash.c:		addr = (volatile FLASH_WORD_SIZE *)(info->start[i]);
./board/eric/flash.c:		info->protect[i] = addr[2] & 1;
./board/eric/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/eric/flash.c:		addr = (volatile FLASH_WORD_SIZE *)info->start[0];
./board/eric/flash.c:		if( (info->flash_id & 0xFF00) == FLASH_MAN_INTEL){
./board/eric/flash.c:	return (info->size);
./board/eric/flash.c:	volatile FLASH_WORD_SIZE *addr=(volatile FLASH_WORD_SIZE*)(info->start[0]);
./board/eric/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/eric/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/eric/flash.c:	    ((info->flash_id > FLASH_AMD_COMP) &&
./board/eric/flash.c:	     ( (info->flash_id & FLASH_VENDMASK) != FLASH_MAN_INTEL ) ) ){
./board/eric/flash.c:		if (info->protect[sect]) {
./board/eric/flash.c:    if(info->flash_id < FLASH_AMD_COMP) {
./board/eric/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/eric/flash.c:			addr = (volatile FLASH_WORD_SIZE *)(info->start[sect]);
./board/eric/flash.c:	addr = (volatile FLASH_WORD_SIZE*)(info->start[l_sect]);
./board/eric/flash.c:	addr = (volatile FLASH_WORD_SIZE *)info->start[0];
./board/eric/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/eric/flash.c:			addr = (vu_long*)(info->start[sect]);
./board/eric/flash.c:			addr = (vu_short*)(info->start[sect]);
./board/eric/flash.c:	addr = (volatile FLASH_WORD_SIZE *)info->start[0];
./board/eric/flash.c:		if ((addr >= info->start[0]) &&
./board/eric/flash.c:		    (addr < (info->start[0] + info->size)) ) {
./board/eric/flash.c:		ulong b_end = info->start[0] + info->size;*/	/* bank end addr */
./board/eric/flash.c:/*		short s_end = info->sector_count - 1;
./board/eric/flash.c:		for (i=0; i<info->sector_count; ++i) {
./board/eric/flash.c:			ulong e_addr = (i == s_end) ? b_end : info->start[i + 1];
./board/eric/flash.c:			if ((end >= info->start[i]) && (addr < e_addr) &&
./board/eric/flash.c:			    (info->protect[i] != 0) ) {
./board/eric/flash.c:		len = info->start[0] + info->size - addr;
./board/eric/flash.c:	vu_long *addr = (vu_long *) (info->start[0]);
./board/eric/flash.c:	if (info->flash_id > FLASH_AMD_COMP) {
./board/eric/flash.c:	if (info->flash_id > FLASH_AMD_COMP) {
./board/eric/flash.c:	vu_short *addr = (vu_short *) (info->start[0]);
./board/eric/flash.c:	if (info->flash_id < FLASH_AMD_COMP) {
./board/eric/flash.c:	if (info->flash_id < FLASH_AMD_COMP) {
./board/lpc2292sodimm/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/lpc2292sodimm/flash.c:	  info->size >> 10, info->sector_count);
./board/lpc2292sodimm/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/lpc2292sodimm/flash.c:		if (i < (info->sector_count - 1)) {
./board/lpc2292sodimm/flash.c:			count = info->start[i+1] - info->start[i];
./board/lpc2292sodimm/flash.c:			count = info->start[0] + info->size - info->start[i];
./board/lpc2292sodimm/flash.c:		p = (unsigned char*)(info->start[i]);
./board/lpc2292sodimm/flash.c:		printf (" %08lX%s%s", info->start[i], info->protect[i] ? " RO" : "   ",
./board/lpc2292sodimm/flash.c:		*((volatile ushort*)(info->start[i])) = 0x0030;
./board/lpc2292sodimm/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/lpc2292sodimm/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/korat/korat.c:	info->size		= CONFIG_SYS_FLASH0_SIZE;
./board/korat/korat.c:	info->sector_count	= CONFIG_SYS_FLASH0_SIZE / 0x20000;
./board/korat/korat.c:	info->flash_id		= 0x01000000;
./board/korat/korat.c:	info->portwidth		= 2;
./board/korat/korat.c:	info->chipwidth		= 2;
./board/korat/korat.c:	info->buffer_size	= 32;
./board/korat/korat.c:	info->erase_blk_tout	= 16384;
./board/korat/korat.c:	info->write_tout	= 2;
./board/korat/korat.c:	info->buffer_write_tout	= 5;
./board/korat/korat.c:	info->vendor		= 2;
./board/korat/korat.c:	info->cmd_reset		= 0x00F0;
./board/korat/korat.c:	info->interface		= 2;
./board/korat/korat.c:	info->legacy_unlock	= 0;
./board/korat/korat.c:	info->manufacturer_id	= 1;
./board/korat/korat.c:	info->device_id		= 0x007E;
./board/korat/korat.c:	info->device_id2	= 0x2101;
./board/korat/korat.c:	info->device_id2	= 0x2301;
./board/korat/korat.c:	info->ext_addr		= 0x0040;
./board/korat/korat.c:	info->cfi_version	= 0x3133;
./board/korat/korat.c:	info->cfi_offset	= 0x0055;
./board/korat/korat.c:	info->addr_unlock1	= 0x00000555;
./board/korat/korat.c:	info->addr_unlock2	= 0x000002AA;
./board/korat/korat.c:	info->name		= "CFI conformant";
./board/korat/korat.c:	for (i = 0, addr = -info->size;
./board/korat/korat.c:	     i < info->sector_count;
./board/korat/korat.c:		info->start[i] = addr;
./board/korat/korat.c:		info->protect[i] = 0x00;
./board/genietv/flash.c:	if ((info->flash_id & FLASH_TYPEMASK) == FLASH_AM040) {
./board/genietv/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/genietv/flash.c:			info->start[i] = base + (i * 0x00010000);
./board/genietv/flash.c:	if (info->flash_id == FLASH_UNKNOWN)
./board/genietv/flash.c:	switch (info->flash_id & FLASH_VENDMASK)
./board/genietv/flash.c:	switch (info->flash_id & FLASH_TYPEMASK)
./board/genietv/flash.c:	if (info->size >> 20) {
./board/genietv/flash.c:		info->size >> 20,
./board/genietv/flash.c:		info->sector_count);
./board/genietv/flash.c:		info->size >> 10,
./board/genietv/flash.c:		info->sector_count);
./board/genietv/flash.c:	for (i=0; i<info->sector_count; ++i)
./board/genietv/flash.c:			info->start[i],
./board/genietv/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/genietv/flash.c:			info->flash_id = FLASH_MAN_AMD;
./board/genietv/flash.c:			info->flash_id = FLASH_MAN_FUJ;
./board/genietv/flash.c:			info->flash_id = FLASH_UNKNOWN;
./board/genietv/flash.c:			info->sector_count = 0;
./board/genietv/flash.c:			info->size = 0;
./board/genietv/flash.c:			info->flash_id += FLASH_AM040;
./board/genietv/flash.c:			info->sector_count = 8;
./board/genietv/flash.c:			info->size = 0x00080000;
./board/genietv/flash.c:			info->flash_id = FLASH_UNKNOWN;
./board/genietv/flash.c:	for (i = 0; i < info->sector_count; i++)
./board/genietv/flash.c:		caddr = (volatile unsigned char *)(info->start[i]);
./board/genietv/flash.c:		info->protect[i] = caddr[2] & 1;
./board/genietv/flash.c:	if (info->flash_id != FLASH_UNKNOWN)
./board/genietv/flash.c:		caddr = (volatile unsigned char *)info->start[0];
./board/genietv/flash.c:	return (info->size);
./board/genietv/flash.c:	volatile unsigned char *addr = (volatile unsigned char *)(info->start[0]);
./board/genietv/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/genietv/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/genietv/flash.c:	    (info->flash_id > FLASH_AMD_COMP)) {
./board/genietv/flash.c:		if (info->protect[sect]) {
./board/genietv/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/genietv/flash.c:			addr = (volatile unsigned char *)(info->start[sect]);
./board/genietv/flash.c:	addr = (volatile unsigned char *)(info->start[l_sect]);
./board/genietv/flash.c:	addr = (volatile unsigned char *)info->start[0];
./board/genietv/flash.c:	volatile unsigned char *addr = (volatile unsigned char*)(info->start[0]),
./board/icu862/flash.c:	if (((info->flash_id & FLASH_TYPEMASK) == FLASH_AM040) ||
./board/icu862/flash.c:		((info->flash_id & FLASH_TYPEMASK) == FLASH_AM033C)) {
./board/icu862/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/icu862/flash.c:			info->start[i] = base + (i * 0x00040000);
./board/icu862/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/icu862/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/icu862/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/icu862/flash.c:		info->size >> 20, info->sector_count);
./board/icu862/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/icu862/flash.c:			info->start[i],
./board/icu862/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/icu862/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/icu862/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/icu862/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/icu862/flash.c:		info->sector_count = 0;
./board/icu862/flash.c:		info->size = 0;
./board/icu862/flash.c:		info->flash_id += FLASH_AM040;
./board/icu862/flash.c:		info->sector_count = 8;
./board/icu862/flash.c:		info->size = 0x00200000;
./board/icu862/flash.c:		info->flash_id += FLASH_AM400T;
./board/icu862/flash.c:		info->sector_count = 11;
./board/icu862/flash.c:		info->size = 0x00100000;
./board/icu862/flash.c:		info->flash_id += FLASH_AM400B;
./board/icu862/flash.c:		info->sector_count = 11;
./board/icu862/flash.c:		info->size = 0x00100000;
./board/icu862/flash.c:		info->flash_id += FLASH_AM800T;
./board/icu862/flash.c:		info->sector_count = 19;
./board/icu862/flash.c:		info->size = 0x00200000;
./board/icu862/flash.c:		info->flash_id += FLASH_AM800B;
./board/icu862/flash.c:		info->sector_count = 19;
./board/icu862/flash.c:		info->size = 0x00200000;
./board/icu862/flash.c:		info->flash_id += FLASH_AM160T;
./board/icu862/flash.c:		info->sector_count = 35;
./board/icu862/flash.c:		info->size = 0x00400000;
./board/icu862/flash.c:		info->flash_id += FLASH_AM160B;
./board/icu862/flash.c:		info->sector_count = 35;
./board/icu862/flash.c:		info->size = 0x00400000;
./board/icu862/flash.c:		info->flash_id += FLASH_AM320T;
./board/icu862/flash.c:		info->sector_count = 67;
./board/icu862/flash.c:		info->size = 0x00800000;
./board/icu862/flash.c:		info->flash_id += FLASH_AM320B;
./board/icu862/flash.c:		info->sector_count = 67;
./board/icu862/flash.c:		info->size = 0x00800000;
./board/icu862/flash.c:		info->flash_id += FLASH_AM033C;
./board/icu862/flash.c:		info->sector_count = 64;
./board/icu862/flash.c:		info->size = 0x01000000;
./board/icu862/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/icu862/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/icu862/flash.c:		info->start[0] = base + 0x00000000;
./board/icu862/flash.c:		info->start[1] = base + 0x00008000;
./board/icu862/flash.c:		info->start[2] = base + 0x0000C000;
./board/icu862/flash.c:		info->start[3] = base + 0x00010000;
./board/icu862/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/icu862/flash.c:			info->start[i] = base + (i * 0x00020000) - 0x00060000;
./board/icu862/flash.c:		i = info->sector_count - 1;
./board/icu862/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/icu862/flash.c:		info->start[i--] = base + info->size - 0x0000C000;
./board/icu862/flash.c:		info->start[i--] = base + info->size - 0x00010000;
./board/icu862/flash.c:			info->start[i] = base + i * 0x00020000;
./board/icu862/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/icu862/flash.c:		addr = (volatile unsigned long *)(info->start[i]);
./board/icu862/flash.c:		info->protect[i] = addr[2] & 1;
./board/icu862/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/icu862/flash.c:		addr = (volatile unsigned long *)info->start[0];
./board/icu862/flash.c:	return (info->size);
./board/icu862/flash.c:	vu_long *addr = (vu_long*)(info->start[0]);
./board/icu862/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/icu862/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/icu862/flash.c:	    (info->flash_id > FLASH_AMD_COMP)) {
./board/icu862/flash.c:		if (info->protect[sect]) {
./board/icu862/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/icu862/flash.c:			addr = (vu_long*)(info->start[sect]);
./board/icu862/flash.c:	addr = (vu_long*)(info->start[l_sect]);
./board/icu862/flash.c:	addr = (volatile unsigned long *)info->start[0];
./board/icu862/flash.c:	vu_long *addr = (vu_long*)(info->start[0]);
./board/xm250/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/xm250/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/xm250/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/xm250/flash.c:			info->start[i] = base + (i * PHYS_FLASH_SECT_SIZE);
./board/xm250/flash.c:			info->protect[i] = 0;
./board/xm250/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/xm250/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/xm250/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/xm250/flash.c:			info->size >> 20, info->sector_count);
./board/xm250/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/xm250/flash.c:			info->start[i],
./board/xm250/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/xm250/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/xm250/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/xm250/flash.c:		info->sector_count = 0;
./board/xm250/flash.c:		info->size = 0;
./board/xm250/flash.c:		info->flash_id += FLASH_28F128J3A;
./board/xm250/flash.c:		info->sector_count = 128;
./board/xm250/flash.c:		info->size = 0x02000000;
./board/xm250/flash.c:		info->flash_id += FLASH_28F640J3A;
./board/xm250/flash.c:		info->sector_count = 64;
./board/xm250/flash.c:		info->size = 0x01000000;
./board/xm250/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/xm250/flash.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/xm250/flash.c:			info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/xm250/flash.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/xm250/flash.c:	return (info->size);
./board/xm250/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/xm250/flash.c:	type = (info->flash_id & FLASH_VENDMASK);
./board/xm250/flash.c:			info->flash_id);
./board/xm250/flash.c:		if (info->protect[sect]) {
./board/xm250/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/xm250/flash.c:			FPWV *addr = (FPWV *) (info->start[sect]);
./board/xm250/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/xm250/flash.c:	vu_long *addr = (vu_long *)(info->start[sector]);
./board/xm250/flash.c:		info->protect[sector] = prot;
./board/xm250/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/xm250/flash.c:			if (info->protect[i])
./board/xm250/flash.c:				addr = (vu_long *)(info->start[i]);
./board/bmw/flash.c:		pflinfo->flash_id = FLASH_UNKNOWN;
./board/bmw/flash.c:		pflinfo->size = 0;
./board/bmw/flash.c:		pflinfo->sector_count = 0;
./board/bmw/flash.c:		pflinfo->flash_id = flash_id (flash[0x0], flash[0x1]);
./board/bmw/flash.c:		pflinfo->flash_id =
./board/bmw/flash.c:		switch (pflinfo->flash_id & FLASH_TYPEMASK) {
./board/bmw/flash.c:			pflinfo->size = 0x00080000;
./board/bmw/flash.c:			pflinfo->sector_count = 8;
./board/bmw/flash.c:				pflinfo->start[j] =
./board/bmw/flash.c:				pflinfo->protect[j] = flash[(j << 16) | 0x2];
./board/bmw/flash.c:			pflinfo->size = 0x00100000;
./board/bmw/flash.c:			pflinfo->sector_count = 19;
./board/bmw/flash.c:			pflinfo->start[0] = base_address;
./board/bmw/flash.c:			pflinfo->start[1] = base_address + 0x4000;
./board/bmw/flash.c:			pflinfo->start[2] = base_address + 0x6000;
./board/bmw/flash.c:			pflinfo->start[3] = base_address + 0x8000;
./board/bmw/flash.c:				pflinfo->start[j + 3] =
./board/bmw/flash.c:			for (j = 0; j < pflinfo->sector_count; j++) {
./board/bmw/flash.c:					 *) (pflinfo->start[j]);
./board/bmw/flash.c:				if (pflinfo->flash_id & FLASH_MAN_SST)
./board/bmw/flash.c:					pflinfo->protect[j] = 0;
./board/bmw/flash.c:					pflinfo->protect[j] = addr2[2] & 1;
./board/bmw/flash.c:	if (info->flash_id & FLASH_MAN_SST) {
./board/bmw/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/bmw/flash.c:			info->start[i] = base + (i * 0x00010000);
./board/bmw/flash.c:	} else if (info->flash_id & FLASH_BTYPE) {
./board/bmw/flash.c:		info->start[0] = base + 0x00000000;
./board/bmw/flash.c:		info->start[1] = base + 0x00004000;
./board/bmw/flash.c:		info->start[2] = base + 0x00006000;
./board/bmw/flash.c:		info->start[3] = base + 0x00008000;
./board/bmw/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/bmw/flash.c:			info->start[i] = base + (i * 0x00010000) - 0x00030000;
./board/bmw/flash.c:		i = info->sector_count - 1;
./board/bmw/flash.c:		info->start[i--] = base + info->size - 0x00004000;
./board/bmw/flash.c:		info->start[i--] = base + info->size - 0x00006000;
./board/bmw/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/bmw/flash.c:			info->start[i] = base + i * 0x00010000;
./board/bmw/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/bmw/flash.c:		switch (info->flash_id & FLASH_VENDMASK) {
./board/bmw/flash.c:		switch (info->flash_id & FLASH_TYPEMASK) {
./board/bmw/flash.c:		mfct, type, info->size >> 10, info->sector_count);
./board/bmw/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/bmw/flash.c:		unsigned long *flash = (unsigned long *) info->start[i];
./board/bmw/flash.c:		size = (i != (info->sector_count - 1)) ?
./board/bmw/flash.c:			(info->start[i + 1] - info->start[i]) >> 2 :
./board/bmw/flash.c:			(info->start[0] + info->size - info->start[i]) >> 2;
./board/bmw/flash.c:		for (flash = (unsigned long *) info->start[i], erased = 1;
./board/bmw/flash.c:		     (flash != (unsigned long *) info->start[i] + size)
./board/bmw/flash.c:			info->start[i],
./board/bmw/flash.c:			erased ? "E" : " ", info->protect[i] ? "RO" : "  ");
./board/bmw/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/bmw/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/bmw/flash.c:		info->flash_id = FLASH_MAN_SST;
./board/bmw/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/bmw/flash.c:		info->sector_count = 0;
./board/bmw/flash.c:		info->size = 0;
./board/bmw/flash.c:		info->flash_id += FLASH_AM400T;
./board/bmw/flash.c:		info->sector_count = 11;
./board/bmw/flash.c:		info->size = 0x00080000;
./board/bmw/flash.c:		info->flash_id += FLASH_AM400B;
./board/bmw/flash.c:		info->sector_count = 11;
./board/bmw/flash.c:		info->size = 0x00080000;
./board/bmw/flash.c:		info->flash_id += FLASH_AM800T;
./board/bmw/flash.c:		info->sector_count = 19;
./board/bmw/flash.c:		info->size = 0x00100000;
./board/bmw/flash.c:		info->flash_id += FLASH_AM800B;
./board/bmw/flash.c:		info->sector_count = 19;
./board/bmw/flash.c:		info->size = 0x00100000;
./board/bmw/flash.c:		info->flash_id += FLASH_AM160T;
./board/bmw/flash.c:		info->sector_count = 35;
./board/bmw/flash.c:		info->size = 0x00200000;
./board/bmw/flash.c:		info->flash_id += FLASH_AM160B;
./board/bmw/flash.c:		info->sector_count = 35;
./board/bmw/flash.c:		info->size = 0x00200000;
./board/bmw/flash.c:		info->flash_id += FLASH_SST800A;
./board/bmw/flash.c:		info->sector_count = 16;
./board/bmw/flash.c:		info->size = 0x00100000;
./board/bmw/flash.c:		info->flash_id += FLASH_SST160A;
./board/bmw/flash.c:		info->sector_count = 32;
./board/bmw/flash.c:		info->size = 0x00200000;
./board/bmw/flash.c:		info->flash_id += FLASH_AM040;
./board/bmw/flash.c:		info->sector_count = 8;
./board/bmw/flash.c:		info->size = 0x00080000;
./board/bmw/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/bmw/flash.c:	printf ("flash id %lx; sector count %x, size %lx\n", info->flash_id,
./board/bmw/flash.c:		info->sector_count, info->size);
./board/bmw/flash.c:	if (info->flash_id & FLASH_MAN_SST) {
./board/bmw/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/bmw/flash.c:			info->start[i] = base + (i * 0x00010000);
./board/bmw/flash.c:	} else if (info->flash_id & FLASH_BTYPE) {
./board/bmw/flash.c:		info->start[0] = base + 0x00000000;
./board/bmw/flash.c:		info->start[1] = base + 0x00004000;
./board/bmw/flash.c:		info->start[2] = base + 0x00006000;
./board/bmw/flash.c:		info->start[3] = base + 0x00008000;
./board/bmw/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/bmw/flash.c:			info->start[i] = base + (i * 0x00010000) - 0x00030000;
./board/bmw/flash.c:		i = info->sector_count - 1;
./board/bmw/flash.c:		info->start[i--] = base + info->size - 0x00004000;
./board/bmw/flash.c:		info->start[i--] = base + info->size - 0x00006000;
./board/bmw/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/bmw/flash.c:			info->start[i] = base + i * 0x00010000;
./board/bmw/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/bmw/flash.c:		addr2 = (volatile FLASH_WORD_SIZE *) (info->start[i]);
./board/bmw/flash.c:		if (info->flash_id & FLASH_MAN_SST)
./board/bmw/flash.c:			info->protect[i] = 0;
./board/bmw/flash.c:			info->protect[i] = addr2[2] & 1;
./board/bmw/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/bmw/flash.c:		addr2 = (FLASH_WORD_SIZE *) info->start[0];
./board/bmw/flash.c:	return (info->size);
./board/bmw/flash.c:	volatile FLASH_WORD_SIZE *addr = (FLASH_WORD_SIZE *) (info->start[0]);
./board/bmw/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/bmw/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/bmw/flash.c:	    (info->flash_id > (FLASH_MAN_STM | FLASH_AMD_COMP))) {
./board/bmw/flash.c:		if (info->protect[sect]) {
./board/bmw/flash.c:	if ((info->start[0] >= ROM_CS1_START)
./board/bmw/flash.c:	    && (info->start[0] < ROM_CS0_START))
./board/bmw/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/bmw/flash.c:			addr = (FLASH_WORD_SIZE *) (info->start[0] + ((info->
./board/bmw/flash.c:								       info->
./board/bmw/flash.c:			if (info->flash_id & FLASH_MAN_SST) {
./board/bmw/flash.c:	addr = (FLASH_WORD_SIZE *) (info->start[0] + ((info->start[l_sect] -
./board/bmw/flash.c:						       info->
./board/bmw/flash.c:	addr = (FLASH_WORD_SIZE *) info->start[0];
./board/bmw/flash.c:	volatile FLASH_WORD_SIZE *addr2 = (FLASH_WORD_SIZE *) info->start[0];
./board/bmw/flash.c:	if ((info->start[0] >= ROM_CS1_START)
./board/bmw/flash.c:	    && (info->start[0] < ROM_CS0_START))
./board/bmw/flash.c:	dest2 = (FLASH_WORD_SIZE *) (((dest - info->start[0]) << sh8b) +
./board/bmw/flash.c:				     info->start[0]);
./board/earthlcd/favr-32-ezkit/flash.c:	info->flash_id = readl(flash);
./board/earthlcd/favr-32-ezkit/flash.c:	       info->flash_id >> 16, info->flash_id & 0xffff);
./board/earthlcd/favr-32-ezkit/flash.c:	       info->size >> 10, info->sector_count);
./board/earthlcd/favr-32-ezkit/flash.c:	    || (s_last >= info->sector_count)) {
./board/earthlcd/favr-32-ezkit/flash.c:		if (info->protect[i]) {
./board/earthlcd/favr-32-ezkit/flash.c:	fb = (uint16_t *)uncached(info->start[0]);
./board/earthlcd/favr-32-ezkit/flash.c:		sb = (uint16_t *)uncached(info->start[i]);
./board/earthlcd/favr-32-ezkit/flash.c:	if (addr < info->start[0]
./board/earthlcd/favr-32-ezkit/flash.c:	    || (addr + count) > (info->start[0] + info->size)
./board/earthlcd/favr-32-ezkit/flash.c:	base = (uint16_t *)uncached(info->start[0]);
./board/ip860/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/ip860/flash.c:		info->start[i] = base;
./board/ip860/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/ip860/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/ip860/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/ip860/flash.c:		info->size >> 20, info->sector_count);
./board/ip860/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/ip860/flash.c:			info->start[i],
./board/ip860/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/ip860/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/ip860/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/ip860/flash.c:		info->sector_count = 0;
./board/ip860/flash.c:		info->size = 0;
./board/ip860/flash.c:		info->flash_id += FLASH_28F016SV;
./board/ip860/flash.c:		info->sector_count = 32;
./board/ip860/flash.c:		info->size = 0x00400000;
./board/ip860/flash.c:		info->flash_id += FLASH_28F160S3;
./board/ip860/flash.c:		info->sector_count = 32;
./board/ip860/flash.c:		info->size = 0x00400000;
./board/ip860/flash.c:		info->flash_id += FLASH_28F320S3;
./board/ip860/flash.c:		info->sector_count = 64;
./board/ip860/flash.c:		info->size = 0x00800000;
./board/ip860/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/ip860/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/ip860/flash.c:		info->start[i] = base + (i * 0x00020000);
./board/ip860/flash.c:		info->protect[i] = 0;
./board/ip860/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/ip860/flash.c:		addr = (vu_long *)info->start[0];
./board/ip860/flash.c:	return (info->size);
./board/ip860/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/ip860/flash.c:	if ((info->flash_id & FLASH_VENDMASK) != FLASH_MAN_INTEL) {
./board/ip860/flash.c:			info->flash_id);
./board/ip860/flash.c:		if (info->protect[sect]) {
./board/ip860/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/ip860/flash.c:			vu_long *addr = (vu_long *)(info->start[sect]);
./board/mp2usb/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/mp2usb/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/mp2usb/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/mp2usb/flash.c:			info->start[i] = base + (i * PHYS_FLASH_SECT_SIZE);
./board/mp2usb/flash.c:			info->protect[i] = 0;
./board/mp2usb/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/mp2usb/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/mp2usb/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/mp2usb/flash.c:			info->size >> 20, info->sector_count);
./board/mp2usb/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/mp2usb/flash.c:			info->start[i],
./board/mp2usb/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/mp2usb/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/mp2usb/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/mp2usb/flash.c:		info->sector_count = 0;
./board/mp2usb/flash.c:		info->size = 0;
./board/mp2usb/flash.c:		info->flash_id += FLASH_28F640J3A;
./board/mp2usb/flash.c:		info->sector_count = 64;
./board/mp2usb/flash.c:		info->size = 0x00800000;
./board/mp2usb/flash.c:		info->flash_id += FLASH_28F128J3A;
./board/mp2usb/flash.c:		info->sector_count = 128;
./board/mp2usb/flash.c:		info->size = 0x01000000;
./board/mp2usb/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/mp2usb/flash.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/mp2usb/flash.c:			info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/mp2usb/flash.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/mp2usb/flash.c:	return (info->size);
./board/mp2usb/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/mp2usb/flash.c:	type = (info->flash_id & FLASH_VENDMASK);
./board/mp2usb/flash.c:			info->flash_id);
./board/mp2usb/flash.c:		if (info->protect[sect]) {
./board/mp2usb/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/mp2usb/flash.c:			FPWV *addr = (FPWV *) (info->start[sect]);
./board/mp2usb/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/mp2usb/flash.c:	FPWV *addr = (FPWV *)(info->start[sector]);
./board/mp2usb/flash.c:		info->protect[sector] = prot;
./board/mp2usb/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/mp2usb/flash.c:			if (info->protect[i])
./board/mp2usb/flash.c:				addr = (FPWV *) (info->start[i]);
./board/hymod/flash.c:	volatile bank_addr_t addr = (bank_addr_t)info->start[sect];
./board/hymod/flash.c:	volatile bank_addr_t addr = (bank_addr_t)info->start[sect];
./board/hymod/flash.c:	volatile bank_addr_t addr = (bank_addr_t)info->start[sect];
./board/hymod/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/hymod/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/hymod/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/hymod/flash.c:		info->size >> 20, info->sector_count);
./board/hymod/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/hymod/flash.c:			info->start[i],
./board/hymod/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/hymod/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/hymod/flash.c:		if (info->protect[sect]) {
./board/hymod/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/hymod/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/cm41xx/flash.c:	if (info->flash_id == FLASH_UNKNOWN)
./board/cm41xx/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/cm41xx/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/cm41xx/flash.c:			info->start[i] = base + (i * PHYS_FLASH_SECT_SIZE);
./board/cm41xx/flash.c:			info->protect[i] = 0;
./board/cm41xx/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/cm41xx/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/cm41xx/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/cm41xx/flash.c:		info->size >> 20, info->sector_count);
./board/cm41xx/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/cm41xx/flash.c:			info->start[i], info->protect[i] ? " (RO)" : "     ");
./board/cm41xx/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/cm41xx/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/cm41xx/flash.c:		info->sector_count = 0;
./board/cm41xx/flash.c:		info->size = 0;
./board/cm41xx/flash.c:		info->flash_id += FLASH_28F640J3A;
./board/cm41xx/flash.c:		info->sector_count = 64;
./board/cm41xx/flash.c:		info->size = 0x00800000;
./board/cm41xx/flash.c:		info->flash_id += FLASH_28F128J3A;
./board/cm41xx/flash.c:		info->sector_count = 128;
./board/cm41xx/flash.c:		info->size = 0x01000000;
./board/cm41xx/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/cm41xx/flash.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/cm41xx/flash.c:			info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/cm41xx/flash.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/cm41xx/flash.c:	return (info->size);
./board/cm41xx/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/cm41xx/flash.c:	type = (info->flash_id & FLASH_VENDMASK);
./board/cm41xx/flash.c:			info->flash_id);
./board/cm41xx/flash.c:		if (info->protect[sect]) {
./board/cm41xx/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/cm41xx/flash.c:			addr = (volatile unsigned char *) (info->start[sect]);
./board/cm41xx/flash.c:	if (info->flash_id == FLASH_UNKNOWN)
./board/lantec/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/lantec/flash.c:		info->start[0] = base + 0x00000000;
./board/lantec/flash.c:		info->start[1] = base + 0x00008000;
./board/lantec/flash.c:		info->start[2] = base + 0x0000C000;
./board/lantec/flash.c:		info->start[3] = base + 0x00010000;
./board/lantec/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/lantec/flash.c:			info->start[i] = base + (i * 0x00020000) - 0x00060000;
./board/lantec/flash.c:		i = info->sector_count - 1;
./board/lantec/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/lantec/flash.c:		info->start[i--] = base + info->size - 0x0000C000;
./board/lantec/flash.c:		info->start[i--] = base + info->size - 0x00010000;
./board/lantec/flash.c:			info->start[i] = base + i * 0x00020000;
./board/lantec/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/lantec/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/lantec/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/lantec/flash.c:		info->size >> 20, info->sector_count);
./board/lantec/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/lantec/flash.c:			info->start[i],
./board/lantec/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/lantec/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/lantec/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/lantec/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/lantec/flash.c:		info->sector_count = 0;
./board/lantec/flash.c:		info->size = 0;
./board/lantec/flash.c:		info->flash_id += FLASH_AM400T;
./board/lantec/flash.c:		info->sector_count = 11;
./board/lantec/flash.c:		info->size = 0x00100000;
./board/lantec/flash.c:		info->flash_id += FLASH_AM400B;
./board/lantec/flash.c:		info->sector_count = 11;
./board/lantec/flash.c:		info->size = 0x00100000;
./board/lantec/flash.c:		info->flash_id += FLASH_AM800T;
./board/lantec/flash.c:		info->sector_count = 19;
./board/lantec/flash.c:		info->size = 0x00200000;
./board/lantec/flash.c:		info->flash_id += FLASH_AM800B;
./board/lantec/flash.c:		info->sector_count = 19;
./board/lantec/flash.c:		info->size = 0x00200000;
./board/lantec/flash.c:		info->flash_id += FLASH_AM160T;
./board/lantec/flash.c:		info->sector_count = 35;
./board/lantec/flash.c:		info->size = 0x00400000;
./board/lantec/flash.c:		info->flash_id += FLASH_AM160B;
./board/lantec/flash.c:		info->sector_count = 35;
./board/lantec/flash.c:		info->size = 0x00400000;
./board/lantec/flash.c:		info->flash_id += FLASH_AM320T;
./board/lantec/flash.c:		info->sector_count = 67;
./board/lantec/flash.c:		info->size = 0x00800000;
./board/lantec/flash.c:		info->flash_id += FLASH_AM320B;
./board/lantec/flash.c:		info->sector_count = 67;
./board/lantec/flash.c:		info->size = 0x00800000;
./board/lantec/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/lantec/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/lantec/flash.c:		info->start[0] = base + 0x00000000;
./board/lantec/flash.c:		info->start[1] = base + 0x00008000;
./board/lantec/flash.c:		info->start[2] = base + 0x0000C000;
./board/lantec/flash.c:		info->start[3] = base + 0x00010000;
./board/lantec/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/lantec/flash.c:			info->start[i] = base + (i * 0x00020000) - 0x00060000;
./board/lantec/flash.c:		i = info->sector_count - 1;
./board/lantec/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/lantec/flash.c:		info->start[i--] = base + info->size - 0x0000C000;
./board/lantec/flash.c:		info->start[i--] = base + info->size - 0x00010000;
./board/lantec/flash.c:			info->start[i] = base + i * 0x00020000;
./board/lantec/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/lantec/flash.c:		addr = (volatile unsigned long *)(info->start[i]);
./board/lantec/flash.c:		info->protect[i] = addr[2] & 1;
./board/lantec/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/lantec/flash.c:		addr = (volatile unsigned long *)info->start[0];
./board/lantec/flash.c:	return (info->size);
./board/lantec/flash.c:	vu_long *addr = (vu_long*)(info->start[0]);
./board/lantec/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/lantec/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/lantec/flash.c:	    (info->flash_id > FLASH_AMD_COMP)) {
./board/lantec/flash.c:			info->flash_id);
./board/lantec/flash.c:		if (info->protect[sect]) {
./board/lantec/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/lantec/flash.c:			addr = (vu_long*)(info->start[sect]);
./board/lantec/flash.c:	addr = (vu_long*)(info->start[l_sect]);
./board/lantec/flash.c:	addr = (volatile unsigned long *)info->start[0];
./board/lantec/flash.c:	vu_long *addr = (vu_long*)(info->start[0]);
./board/BuS/EB+MCF-EV123/cfm_flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/BuS/EB+MCF-EV123/cfm_flash.c:		info->flash_id = (FREESCALE_MANUFACT & FLASH_VENDMASK) |
./board/BuS/EB+MCF-EV123/cfm_flash.c:		info->size = 256*1024;
./board/BuS/EB+MCF-EV123/cfm_flash.c:		info->sector_count = 16;
./board/BuS/EB+MCF-EV123/cfm_flash.c:		info->flash_id = (FREESCALE_MANUFACT & FLASH_VENDMASK) |
./board/BuS/EB+MCF-EV123/cfm_flash.c:		info->size = 512*1024;
./board/BuS/EB+MCF-EV123/cfm_flash.c:		info->sector_count = 32;
./board/BuS/EB+MCF-EV123/cfm_flash.c:	for (sector = 0; sector < info->sector_count; sector++)
./board/BuS/EB+MCF-EV123/cfm_flash.c:			info->start[sector] = CONFIG_SYS_INT_FLASH_BASE;
./board/BuS/EB+MCF-EV123/cfm_flash.c:			info->start[sector] = info->start[sector-1] + 0x04000;
./board/BuS/EB+MCF-EV123/cfm_flash.c:		info->protect[sector] = protection & 1;
./board/BuS/EB+MCF-EV123/cfm_flash.c:	address = cmf_backdoor_address(info->start[sector]);
./board/BuS/EB+MCF-EV123/cfm_flash.c:		info->protect[sector]=1;
./board/BuS/EB+MCF-EV123/cfm_flash.c:		info->protect[sector]=0;
./board/BuS/EB+MCF-EV123/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/BuS/EB+MCF-EV123/flash.c:		switch (info->flash_id & FLASH_TYPEMASK) {
./board/BuS/EB+MCF-EV123/flash.c:	if ((info->size >> 20) > 0)
./board/BuS/EB+MCF-EV123/flash.c:		printf ("%ld MiB",info->size >> 20);
./board/BuS/EB+MCF-EV123/flash.c:		printf ("%ld KiB",info->size >> 10);
./board/BuS/EB+MCF-EV123/flash.c:	printf (" in %d Sectors\n", info->sector_count);
./board/BuS/EB+MCF-EV123/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/BuS/EB+MCF-EV123/flash.c:		printf ("%02d: %08lX%s  ", i,info->start[i],
./board/BuS/EB+MCF-EV123/flash.c:			info->protect[i] ? " P" : "  ");
./board/BuS/EB+MCF-EV123/flash.c:#define MEM_FLASH_ADDR1		(*(volatile u16 *)(info->start[0] + (0x00000555<<1)))
./board/BuS/EB+MCF-EV123/flash.c:#define MEM_FLASH_ADDR2		(*(volatile u16 *)(info->start[0] + (0x000002AA<<1)))
./board/BuS/EB+MCF-EV123/flash.c:				(volatile u16 *) (info->start[sector]);
./board/BuS/EB+MCF-EV123/flash.c:	if (info->flash_id == FLASH_UNKNOWN)
./board/BuS/EB+MCF-EV123/flash.c:	} /* (info->flash_id == FLASH_UNKNOWN) */
./board/BuS/EB+MCF-EV123/flash.c:	if ((s_first < 0) || (s_first > s_last) || s_last >= info->sector_count)
./board/BuS/EB+MCF-EV123/flash.c:		if (info->protect[sector])
./board/BuS/EB+MCF-EV123/flash.c:			switch (info->flash_id & FLASH_VENDMASK)
./board/BuS/EB+MCF-EV123/flash.c:	switch (info->flash_id & FLASH_VENDMASK)
./board/BuS/EB+MCF-EV123/flash.c:		info->protect[sector]=1;
./board/BuS/EB+MCF-EV123/flash.c:		info->protect[sector]=0;
./board/BuS/EB+MCF-EV123/flash.c:	switch (info->flash_id & FLASH_VENDMASK)
./board/wepep250/flash.c:			info->size >> 20, info->sector_count);
./board/wepep250/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/wepep250/flash.c:		printf (" %08lX%s", info->start[i],
./board/wepep250/flash.c:				info->protect[i] ? " (RO)" : "     ");
./board/wepep250/flash.c:		if (!info->protect[sector]) {
./board/wepep250/flash.c:		if (info->protect[sector]) {
./board/wepep250/flash.c:		address = (FLASH_BUS *) (info->start[sector]);
./board/sbc8260/flash.c:    if (info->flash_id == FLASH_UNKNOWN) {
./board/sbc8260/flash.c:    switch ((info->flash_id >> 16) & 0xff) {
./board/sbc8260/flash.c:    switch (info->flash_id & FLASH_TYPEMASK) {
./board/sbc8260/flash.c:	    info->size >> 20, info->sector_count);
./board/sbc8260/flash.c:    for (i=0; i<info->sector_count; ++i) {
./board/sbc8260/flash.c:		info->start[i],
./board/sbc8260/flash.c:		info->protect[i] ? " (RO)" : "     "
./board/sbc8260/flash.c:	info->size = 0;
./board/sbc8260/flash.c:	info->flash_id     = (vendor & 0xff) << 16 | AMD_ID_F080B;
./board/sbc8260/flash.c:	info->sector_count = 16;
./board/sbc8260/flash.c:	info->size         = 4 * info->sector_count * 64*1024;
./board/sbc8260/flash.c:	info->size = 0;
./board/sbc8260/flash.c:    for (i = 0; i < info->sector_count; i++) {
./board/sbc8260/flash.c:	info->start[i] = base + i * (info->size / info->sector_count);
./board/sbc8260/flash.c:	addr = (volatile unsigned long *)(info->start[i]);
./board/sbc8260/flash.c:	info->protect[i] = addr[2] & 1;
./board/sbc8260/flash.c:    addr = (vu_long *)info->start[0];
./board/sbc8260/flash.c:    return info->size;
./board/sbc8260/flash.c:    vu_long *addr = (vu_long*)(info->start[0]);
./board/sbc8260/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/sbc8260/flash.c:	if (info->protect[sect]) {
./board/sbc8260/flash.c:	if (info->protect[sect] == 0) {	/* not protected */
./board/sbc8260/flash.c:	    addr = (vu_long*)(info->start[sect]);
./board/sbc8260/flash.c:    addr = (vu_long*)(info->start[l_sect]);
./board/sbc8260/flash.c:    addr = (volatile unsigned long *)info->start[0];
./board/sbc8260/flash.c:    vu_long *addr = (vu_long*)(info->start[0]);
./board/cray/L1/flash.c:	for (i = 0; i < info->sector_count; i++)
./board/cray/L1/flash.c:		info->start[i] = base + (i * 0x00010000);
./board/cray/L1/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/cray/L1/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/cray/L1/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/cray/L1/flash.c:		info->size >> 10, info->sector_count);
./board/cray/L1/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/cray/L1/flash.c:		if (i != (info->sector_count-1))
./board/cray/L1/flash.c:		  size = info->start[i+1] - info->start[i];
./board/cray/L1/flash.c:		  size = info->start[0] + info->size - info->start[i];
./board/cray/L1/flash.c:		flash = (volatile unsigned long *)info->start[i];
./board/cray/L1/flash.c:			info->start[i],
./board/cray/L1/flash.c:			info->protect[i] ? "RO " : "   "
./board/cray/L1/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/cray/L1/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/cray/L1/flash.c:		info->sector_count = 0;
./board/cray/L1/flash.c:		info->size = 0;
./board/cray/L1/flash.c:		info->flash_id += FLASH_AM320B;
./board/cray/L1/flash.c:		info->sector_count = 64;
./board/cray/L1/flash.c:		info->size = 0x0400000; /* => 4 MB */
./board/cray/L1/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/cray/L1/flash.c:	for (i = 0; i < info->sector_count; i++)
./board/cray/L1/flash.c:		info->start[i] = base + (i * 0x00010000);
./board/cray/L1/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/cray/L1/flash.c:		addr2 = (volatile FLASH_WORD_SIZE *)(info->start[i]);
./board/cray/L1/flash.c:	info->protect[i] = addr2[2] & 1;
./board/cray/L1/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/cray/L1/flash.c:		addr2 = (FLASH_WORD_SIZE *)info->start[0];
./board/cray/L1/flash.c:	return (info->size);
./board/cray/L1/flash.c:	volatile FLASH_WORD_SIZE *addr = (FLASH_WORD_SIZE *)(info->start[sect]);
./board/cray/L1/flash.c:	volatile FLASH_WORD_SIZE *addr = (FLASH_WORD_SIZE *)(info->start[0]);
./board/cray/L1/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/cray/L1/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/cray/L1/flash.c:		if (info->protect[sect]) {
./board/cray/L1/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/cray/L1/flash.c:		    addr2 = (FLASH_WORD_SIZE *)(info->start[sect]);
./board/cray/L1/flash.c:	addr = (FLASH_WORD_SIZE *)info->start[0];
./board/cray/L1/flash.c:	volatile FLASH_WORD_SIZE *addr2 = (FLASH_WORD_SIZE *)(info->start[0]);
./board/lubbock/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/lubbock/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/lubbock/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/lubbock/flash.c:			info->start[i] = base + (i * PHYS_FLASH_SECT_SIZE);
./board/lubbock/flash.c:			info->protect[i] = 0;
./board/lubbock/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/lubbock/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/lubbock/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/lubbock/flash.c:			info->size >> 20, info->sector_count);
./board/lubbock/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/lubbock/flash.c:			info->start[i],
./board/lubbock/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/lubbock/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/lubbock/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/lubbock/flash.c:		info->sector_count = 0;
./board/lubbock/flash.c:		info->size = 0;
./board/lubbock/flash.c:		info->flash_id += FLASH_28F128J3A;
./board/lubbock/flash.c:		info->sector_count = 128;
./board/lubbock/flash.c:		info->size = 0x02000000;
./board/lubbock/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/lubbock/flash.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/lubbock/flash.c:			info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/lubbock/flash.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/lubbock/flash.c:	return (info->size);
./board/lubbock/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/lubbock/flash.c:	type = (info->flash_id & FLASH_VENDMASK);
./board/lubbock/flash.c:			info->flash_id);
./board/lubbock/flash.c:		if (info->protect[sect]) {
./board/lubbock/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/lubbock/flash.c:			FPWV *addr = (FPWV *) (info->start[sect]);
./board/lubbock/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/modnet50/flash.c:		info->flash_id = FLASH_MAN_AMD & FLASH_VENDMASK;
./board/modnet50/flash.c:		info->flash_id = FLASH_MAN_FUJ & FLASH_VENDMASK;
./board/modnet50/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/modnet50/flash.c:		info->sector_count = 0;
./board/modnet50/flash.c:		info->size = 0;
./board/modnet50/flash.c:		info->flash_id +=
./board/modnet50/flash.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/modnet50/flash.c:		info->size = CONFIG_SYS_FLASH_SIZE;
./board/modnet50/flash.c:		info->start[0] = baseaddr;
./board/modnet50/flash.c:		info->start[1] = baseaddr + 0x4000;
./board/modnet50/flash.c:		info->start[2] = baseaddr + 0x6000;
./board/modnet50/flash.c:		info->start[3] = baseaddr + 0x8000;
./board/modnet50/flash.c:		for (i = 1; i < info->sector_count; i++)
./board/modnet50/flash.c:			info->start[3 + i] = baseaddr + i * CONFIG_SYS_MAIN_SECT_SIZE;
./board/modnet50/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/modnet50/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/modnet50/flash.c:		WRITE_UNLOCK (info->start[i]);
./board/modnet50/flash.c:		*(volatile __u16 *) (info->start[i] + ID_ADDR) = (__u16) ID_CMD;
./board/modnet50/flash.c:		flashtest /* protected verify */  = *(volatile __u16 *) (info->start[i] + 4);
./board/modnet50/flash.c:		*(volatile __u16 *) (info->start[i] + ID_ADDR) = (__u16) RESET_CMD;
./board/modnet50/flash.c:			info->protect[i] = 1;	/* D0 = 1 if protected */
./board/modnet50/flash.c:			info->protect[i] = 0;
./board/modnet50/flash.c:	return (info->size);
./board/modnet50/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/modnet50/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/modnet50/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/modnet50/flash.c:		info->size >> 20, info->sector_count);
./board/modnet50/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/modnet50/flash.c:			info->start[i], info->protect[i] ? " !" : "  ");
./board/modnet50/flash.c:		if (info->protect[sect])
./board/modnet50/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/modnet50/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/modnet50/flash.c:		switch (info->flash_id & FLASH_TYPEMASK) {
./board/modnet50/flash.c:				if (info->protect[sect] == 0) {
./board/modnet50/flash.c:					WRITE_UNLOCK (info->start[0]);
./board/modnet50/flash.c:					*(volatile __u16 *) (info->start[0] +
./board/modnet50/flash.c:					WRITE_UNLOCK (info->start[0]);
./board/modnet50/flash.c:					*(volatile __u16 *) (info->
./board/modnet50/flash.c:					while (flash_check_erase_amd (info->start[sect])) {
./board/modnet50/flash.c:							*(volatile __u16 *) (info-> start[sect]) = (__u16) RESET_CMD;
./board/modnet50/flash.c:	WRITE_UNLOCK (info->start[0]);
./board/modnet50/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/modnet50/flash.c:		switch (info->flash_id & FLASH_TYPEMASK) {
./board/modnet50/flash.c:			*(volatile __u16 *) (info->start[0] + UNLOCK_ADDR1) =
./board/sl8245/flash.c:	switch ((i = info->flash_id & FLASH_VENDMASK)) {
./board/sl8245/flash.c:	switch ((i = info->flash_id & FLASH_TYPEMASK)) {
./board/sl8245/flash.c:			info->size >> 20, info->sector_count);
./board/sl8245/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/sl8245/flash.c:		printf (" %08lX%s", info->start[i],
./board/sl8245/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/sl8245/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/sl8245/flash.c:	if ((info->flash_id & FLASH_VENDMASK) !=
./board/sl8245/flash.c:		if (info->protect[sect]) {
./board/sl8245/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/sl8245/flash.c:			vu_long *addr = (vu_long *) (info->start[sect]);
./board/sl8245/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/sl8245/flash.c:	vu_long *chip = (vu_long *) (info->start[0]);
./board/atmel/atstk1000/flash.c:	info->flash_id = readl(flash);
./board/atmel/atstk1000/flash.c:	       info->flash_id >> 16, info->flash_id & 0xffff);
./board/atmel/atstk1000/flash.c:	       info->size >> 10, info->sector_count);
./board/atmel/atstk1000/flash.c:	    || (s_last >= info->sector_count)) {
./board/atmel/atstk1000/flash.c:		if (info->protect[i]) {
./board/atmel/atstk1000/flash.c:	fb = (uint16_t *)uncached(info->start[0]);
./board/atmel/atstk1000/flash.c:		sb = (uint16_t *)uncached(info->start[i]);
./board/atmel/atstk1000/flash.c:	if (addr < info->start[0]
./board/atmel/atstk1000/flash.c:	    || (addr + count) > (info->start[0] + info->size)
./board/atmel/atstk1000/flash.c:	base = (uint16_t *)uncached(info->start[0]);
./board/atmel/at91rm9200dk/flash.c:	info->flash_id = ATM_MANUFACT & FLASH_VENDMASK;
./board/atmel/at91rm9200dk/flash.c:			info->flash_id |= ATM_ID_BV1614A & FLASH_TYPEMASK;
./board/atmel/at91rm9200dk/flash.c:			info->flash_id |= ATM_ID_BV1614 & FLASH_TYPEMASK;
./board/atmel/at91rm9200dk/flash.c:		info->flash_id |= ATM_ID_BV6416 & FLASH_TYPEMASK;
./board/atmel/at91rm9200dk/flash.c:	volatile u16 *addr = (volatile u16 *) (info->start[sector]);
./board/atmel/at91rm9200dk/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/atmel/at91rm9200dk/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/atmel/at91rm9200dk/flash.c:		info->size >> 20, info->sector_count);
./board/atmel/at91rm9200dk/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/atmel/at91rm9200dk/flash.c:		printf (" %08lX%s", info->start[i],
./board/atmel/at91rm9200dk/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/atmel/at91rm9200dk/flash.c:	if (info->flash_id == FLASH_UNKNOWN)
./board/atmel/at91rm9200dk/flash.c:	if ((info->flash_id & FLASH_VENDMASK) !=
./board/atmel/at91rm9200dk/flash.c:		if (info->protect[sect]) {
./board/atmel/at91rm9200dk/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/atmel/at91rm9200dk/flash.c:			volatile u16 *addr = (volatile u16 *) (info->start[sect]);
./board/ep8260/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/ep8260/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/ep8260/flash.c:		info->sector_count = 0;
./board/ep8260/flash.c:		info->size = 0;
./board/ep8260/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/ep8260/flash.c:		info->flash_id += FLASH_AMDL323B;
./board/ep8260/flash.c:		info->sector_count = 71;
./board/ep8260/flash.c:		info->size = 0x01000000;	 /* 4 * 4 MB = 16 MB	*/
./board/ep8260/flash.c:		info->flash_id += FLASH_AMLV640U;
./board/ep8260/flash.c:		info->sector_count = 128;
./board/ep8260/flash.c:		info->size = 0x02000000;	/* 4 * 8 MB = 32 MB	*/
./board/ep8260/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/ep8260/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/ep8260/flash.c:			info->start[i] = baseaddr + (i * 0x00040000);
./board/ep8260/flash.c:			info->start[i] = baseaddr + (i * 0x00008000);
./board/ep8260/flash.c:		for (i = 8; i < info->sector_count; i++) {
./board/ep8260/flash.c:			info->start[i] = baseaddr + (i * 0x00040000) - 0x001C0000;
./board/ep8260/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/ep8260/flash.c:		if ((V_ULONG( info->start[i] + 16 ) & 0x00010001) ||
./board/ep8260/flash.c:		    (V_ULONG( info->start[i] + 20 ) & 0x00010001)) {
./board/ep8260/flash.c:			info->protect[i] = 1;		/* D0 = 1 if protected */
./board/ep8260/flash.c:			info->protect[i] = 0;
./board/ep8260/flash.c:	return(info->size);
./board/ep8260/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/ep8260/flash.c:	switch ((info->flash_id >> 16) & 0xff) {
./board/ep8260/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/ep8260/flash.c:		info->size >> 20, info->sector_count);
./board/ep8260/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/ep8260/flash.c:			info->start[i],
./board/ep8260/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/ep8260/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/ep8260/flash.c:		if (info->protect[sect])
./board/ep8260/flash.c:	V_ULONG( info->start[0] + (0x0555 << 3) ) = 0x00AA00AA;
./board/ep8260/flash.c:	V_ULONG( info->start[0] + (0x02AA << 3) ) = 0x00550055;
./board/ep8260/flash.c:	V_ULONG( info->start[0] + (0x0555 << 3) ) = 0x00800080;
./board/ep8260/flash.c:	V_ULONG( info->start[0] + (0x0555 << 3) ) = 0x00AA00AA;
./board/ep8260/flash.c:	V_ULONG( info->start[0] + (0x02AA << 3) ) = 0x00550055;
./board/ep8260/flash.c:	V_ULONG( info->start[0] + 4 + (0x0555 << 3) ) = 0x00AA00AA;
./board/ep8260/flash.c:	V_ULONG( info->start[0] + 4 + (0x02AA << 3) ) = 0x00550055;
./board/ep8260/flash.c:	V_ULONG( info->start[0] + 4 + (0x0555 << 3) ) = 0x00800080;
./board/ep8260/flash.c:	V_ULONG( info->start[0] + 4 + (0x0555 << 3) ) = 0x00AA00AA;
./board/ep8260/flash.c:	V_ULONG( info->start[0] + 4 + (0x02AA << 3) ) = 0x00550055;
./board/ep8260/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/ep8260/flash.c:			V_ULONG( info->start[sect] ) = 0x00300030;
./board/ep8260/flash.c:			V_ULONG( info->start[sect] + 4 ) = 0x00300030;
./board/ep8260/flash.c:	while ((V_ULONG( info->start[l_sect] ) & 0x00800080) != 0x00800080 ||
./board/ep8260/flash.c:	       (V_ULONG( info->start[l_sect] + 4 ) & 0x00800080) != 0x00800080)
./board/ep8260/flash.c:	V_ULONG( info->start[0] + (0x0555 << 3) ) = 0x00AA00AA;
./board/ep8260/flash.c:	V_ULONG( info->start[0] + (0x02AA << 3) ) = 0x00550055;
./board/ep8260/flash.c:	V_ULONG( info->start[0] + (0x0555 << 3) ) = 0x00A000A0;
./board/ep8260/flash.c:	V_ULONG( info->start[0] + 4 + (0x0555 << 3) ) = 0x00AA00AA;
./board/ep8260/flash.c:	V_ULONG( info->start[0] + 4 + (0x02AA << 3) ) = 0x00550055;
./board/ep8260/flash.c:	V_ULONG( info->start[0] + 4 + (0x0555 << 3) ) = 0x00A000A0;
./board/siemens/SMN42/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/siemens/SMN42/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/siemens/SMN42/flash.c:	  info->size >> 10, info->sector_count);
./board/siemens/SMN42/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/siemens/SMN42/flash.c:		if (i < (info->sector_count - 1)) {
./board/siemens/SMN42/flash.c:			count = info->start[i+1] - info->start[i];
./board/siemens/SMN42/flash.c:			count = info->start[0] + info->size - info->start[i];
./board/siemens/SMN42/flash.c:		p = (unsigned char*)(info->start[i]);
./board/siemens/SMN42/flash.c:		printf (" %08lX%s%s", info->start[i], info->protect[i] ? " RO" : "   ",
./board/siemens/SMN42/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/siemens/SMN42/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/siemens/SMN42/flash.c:		(CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[sect]);
./board/siemens/SMN42/flash.c:	volatile CONFIG_SYS_FLASH_WORD_SIZE *addr = (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[0]);
./board/siemens/SMN42/flash.c:		if (info->flash_id == FLASH_UNKNOWN)
./board/siemens/SMN42/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/siemens/SMN42/flash.c:		if (info->protect[sect])
./board/siemens/SMN42/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/siemens/SMN42/flash.c:			addr2 = (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[sect]);
./board/siemens/SMN42/flash.c:	addr = (CONFIG_SYS_FLASH_WORD_SIZE *) info->start[0];
./board/siemens/SMN42/flash.c:			info->flash_id = FLASH_MAN_AMD;
./board/siemens/SMN42/flash.c:			info->flash_id = FLASH_UNKNOWN;
./board/siemens/SMN42/flash.c:			info->sector_count = 0;
./board/siemens/SMN42/flash.c:			info->size = 0;
./board/siemens/SMN42/flash.c:						info->flash_id = FLASH_UNKNOWN;
./board/siemens/SMN42/flash.c:						info->flash_id += FLASH_S29GL128N;
./board/siemens/SMN42/flash.c:						info->sector_count = 128;
./board/siemens/SMN42/flash.c:						info->size = 0x01000000;
./board/siemens/SMN42/flash.c:					info->flash_id = FLASH_UNKNOWN;
./board/siemens/SMN42/flash.c:			info->flash_id = FLASH_UNKNOWN;
./board/siemens/SMN42/flash.c:	for (i = 0; i < info->sector_count; i++)
./board/siemens/SMN42/flash.c:		info->start[i] = base + (i * 0x00020000);
./board/siemens/SMN42/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/siemens/SMN42/flash.c:		addr2 = (volatile CONFIG_SYS_FLASH_WORD_SIZE *)(info->start[i]);
./board/siemens/SMN42/flash.c:		info->protect[i] = addr2[2] & 1;
./board/siemens/SMN42/flash.c:	return (info->size);
./board/siemens/SMN42/flash.c:	volatile CONFIG_SYS_FLASH_WORD_SIZE *addr2 = (CONFIG_SYS_FLASH_WORD_SIZE *) (info->start[0]);
./board/siemens/pcu_e/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/siemens/pcu_e/flash.c:	if ((info->flash_id & FLASH_VENDMASK) != FLASH_MAN_AMD) {
./board/siemens/pcu_e/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/siemens/pcu_e/flash.c:		base += info->size;
./board/siemens/pcu_e/flash.c:		i = info->sector_count;
./board/siemens/pcu_e/flash.c:			info->start[i] = base;
./board/siemens/pcu_e/flash.c:			info->start[i] = base;
./board/siemens/pcu_e/flash.c:			info->start[i] = base;
./board/siemens/pcu_e/flash.c:		while (base < info->size) {	/* 64k regular sectors	*/
./board/siemens/pcu_e/flash.c:			info->start[i] = base;
./board/siemens/pcu_e/flash.c:			info->start[i] = base;
./board/siemens/pcu_e/flash.c:		n = info->sector_count - 8;
./board/siemens/pcu_e/flash.c:			info->start[i] = base;
./board/siemens/pcu_e/flash.c:		while (i < info->sector_count) { /* 8 x 8k boot sectors	*/
./board/siemens/pcu_e/flash.c:			info->start[i] = base;
./board/siemens/pcu_e/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/siemens/pcu_e/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/siemens/pcu_e/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/siemens/pcu_e/flash.c:					info->flash_id);
./board/siemens/pcu_e/flash.c:		info->size >> 20, info->sector_count);
./board/siemens/pcu_e/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/siemens/pcu_e/flash.c:			info->start[i],
./board/siemens/pcu_e/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/siemens/pcu_e/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/siemens/pcu_e/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/siemens/pcu_e/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/siemens/pcu_e/flash.c:		info->sector_count = 0;
./board/siemens/pcu_e/flash.c:		info->size = 0;
./board/siemens/pcu_e/flash.c:		info->flash_id += FLASH_AMDL322T;
./board/siemens/pcu_e/flash.c:		info->sector_count = 71;
./board/siemens/pcu_e/flash.c:		info->size = 0x00400000;
./board/siemens/pcu_e/flash.c:		info->flash_id += FLASH_AMDL322B;
./board/siemens/pcu_e/flash.c:		info->sector_count = 71;
./board/siemens/pcu_e/flash.c:		info->size = 0x00400000;
./board/siemens/pcu_e/flash.c:		info->flash_id += FLASH_AMDL323T;
./board/siemens/pcu_e/flash.c:		info->sector_count = 71;
./board/siemens/pcu_e/flash.c:		info->size = 0x00400000;
./board/siemens/pcu_e/flash.c:		info->flash_id += FLASH_AMDL323B;
./board/siemens/pcu_e/flash.c:		info->sector_count = 71;
./board/siemens/pcu_e/flash.c:		info->size = 0x00400000;
./board/siemens/pcu_e/flash.c:		info->flash_id += FLASH_AMDL324T;
./board/siemens/pcu_e/flash.c:		info->sector_count = 71;
./board/siemens/pcu_e/flash.c:		info->size = 0x00400000;
./board/siemens/pcu_e/flash.c:		info->flash_id += FLASH_AMDL324B;
./board/siemens/pcu_e/flash.c:		info->sector_count = 71;
./board/siemens/pcu_e/flash.c:		info->size = 0x00400000;
./board/siemens/pcu_e/flash.c:		info->flash_id += FLASH_AMDL640;
./board/siemens/pcu_e/flash.c:		info->sector_count = 142;
./board/siemens/pcu_e/flash.c:		info->size = 0x00800000;
./board/siemens/pcu_e/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/siemens/pcu_e/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/siemens/pcu_e/flash.c:		saddr = (vu_short *)(info->start[i]);
./board/siemens/pcu_e/flash.c:		info->protect[i] = saddr[2] & 1;
./board/siemens/pcu_e/flash.c:		info->protect[i] =0;
./board/siemens/pcu_e/flash.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/siemens/pcu_e/flash.c:			info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/siemens/pcu_e/flash.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/siemens/pcu_e/flash.c:	saddr = (vu_short *)info->start[0];
./board/siemens/pcu_e/flash.c:	return (info->size);
./board/siemens/pcu_e/flash.c:	vu_short *addr = (vu_short*)(info->start[0]);
./board/siemens/pcu_e/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/siemens/pcu_e/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/siemens/pcu_e/flash.c:	    (info->flash_id > FLASH_AMD_COMP)) {
./board/siemens/pcu_e/flash.c:			info->flash_id);
./board/siemens/pcu_e/flash.c:		if (info->protect[sect]) {
./board/siemens/pcu_e/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/siemens/pcu_e/flash.c:			addr = (vu_short*)(info->start[sect]);
./board/siemens/pcu_e/flash.c:	addr = (vu_short*)(info->start[l_sect]);
./board/siemens/pcu_e/flash.c:	addr = (vu_short *)info->start[0];
./board/siemens/pcu_e/flash.c:	vu_short *addr  = (vu_short*)(info->start[0]);
./board/siemens/pcu_e/flash.c:	addr = (vu_short *)info->start[0];
./board/siemens/IAD210/flash.c:  if (info->flash_id & FLASH_BTYPE) {
./board/siemens/IAD210/flash.c:    info->start[0] = base + 0x00000000;
./board/siemens/IAD210/flash.c:    info->start[1] = base + 0x00008000;
./board/siemens/IAD210/flash.c:    info->start[2] = base + 0x0000C000;
./board/siemens/IAD210/flash.c:    info->start[3] = base + 0x00010000;
./board/siemens/IAD210/flash.c:    for (i = 4; i < info->sector_count; i++) {
./board/siemens/IAD210/flash.c:      info->start[i] = base + (i * 0x00020000) - 0x00060000;
./board/siemens/IAD210/flash.c:    i = info->sector_count - 1;
./board/siemens/IAD210/flash.c:    info->start[i--] = base + info->size - 0x00008000;
./board/siemens/IAD210/flash.c:    info->start[i--] = base + info->size - 0x0000C000;
./board/siemens/IAD210/flash.c:    info->start[i--] = base + info->size - 0x00010000;
./board/siemens/IAD210/flash.c:      info->start[i] = base + i * 0x00020000;
./board/siemens/IAD210/flash.c:  if (info->flash_id == FLASH_UNKNOWN) {
./board/siemens/IAD210/flash.c:  switch (info->flash_id & FLASH_VENDMASK) {
./board/siemens/IAD210/flash.c:  switch (info->flash_id & FLASH_TYPEMASK) {
./board/siemens/IAD210/flash.c:	  info->size >> 20, info->sector_count);
./board/siemens/IAD210/flash.c:  for (i=0; i<info->sector_count; ++i) {
./board/siemens/IAD210/flash.c:			info->start[i],
./board/siemens/IAD210/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/siemens/IAD210/flash.c:    info->flash_id = FLASH_MAN_AMD;
./board/siemens/IAD210/flash.c:    info->flash_id = FLASH_MAN_FUJ;
./board/siemens/IAD210/flash.c:    info->flash_id = FLASH_UNKNOWN;
./board/siemens/IAD210/flash.c:    info->sector_count = 0;
./board/siemens/IAD210/flash.c:    info->size = 0;
./board/siemens/IAD210/flash.c:    info->flash_id += FLASH_AM400T;
./board/siemens/IAD210/flash.c:    info->sector_count = 11;
./board/siemens/IAD210/flash.c:    info->size = 0x00100000;
./board/siemens/IAD210/flash.c:    info->flash_id += FLASH_AM400B;
./board/siemens/IAD210/flash.c:    info->sector_count = 11;
./board/siemens/IAD210/flash.c:    info->size = 0x00100000;
./board/siemens/IAD210/flash.c:    info->flash_id += FLASH_AM800T;
./board/siemens/IAD210/flash.c:    info->sector_count = 19;
./board/siemens/IAD210/flash.c:    info->size = 0x00200000;
./board/siemens/IAD210/flash.c:    info->flash_id += FLASH_AM800B;
./board/siemens/IAD210/flash.c:    info->sector_count = 19;
./board/siemens/IAD210/flash.c:    info->size = 0x00200000;
./board/siemens/IAD210/flash.c:    info->flash_id += FLASH_AM160T;
./board/siemens/IAD210/flash.c:    info->sector_count = 35;
./board/siemens/IAD210/flash.c:    info->size = 0x00400000;
./board/siemens/IAD210/flash.c:    info->flash_id += FLASH_AM160B;
./board/siemens/IAD210/flash.c:    info->sector_count = 35;
./board/siemens/IAD210/flash.c:    info->size = 0x00400000;
./board/siemens/IAD210/flash.c:    info->flash_id += FLASH_AM320T;
./board/siemens/IAD210/flash.c:    info->sector_count = 67;
./board/siemens/IAD210/flash.c:    info->size = 0x00800000;
./board/siemens/IAD210/flash.c:    info->flash_id += FLASH_AM320B;
./board/siemens/IAD210/flash.c:    info->sector_count = 67;
./board/siemens/IAD210/flash.c:    info->size = 0x00800000;
./board/siemens/IAD210/flash.c:    info->flash_id = FLASH_UNKNOWN;
./board/siemens/IAD210/flash.c:  if (info->flash_id & FLASH_BTYPE) {
./board/siemens/IAD210/flash.c:    info->start[0] = base + 0x00000000;
./board/siemens/IAD210/flash.c:    info->start[1] = base + 0x00008000;
./board/siemens/IAD210/flash.c:    info->start[2] = base + 0x0000C000;
./board/siemens/IAD210/flash.c:    info->start[3] = base + 0x00010000;
./board/siemens/IAD210/flash.c:    for (i = 4; i < info->sector_count; i++) {
./board/siemens/IAD210/flash.c:      info->start[i] = base + (i * 0x00020000) - 0x00060000;
./board/siemens/IAD210/flash.c:    i = info->sector_count - 1;
./board/siemens/IAD210/flash.c:    info->start[i--] = base + info->size - 0x00008000;
./board/siemens/IAD210/flash.c:    info->start[i--] = base + info->size - 0x0000C000;
./board/siemens/IAD210/flash.c:    info->start[i--] = base + info->size - 0x00010000;
./board/siemens/IAD210/flash.c:      info->start[i] = base + i * 0x00020000;
./board/siemens/IAD210/flash.c:  for (i = 0; i < info->sector_count; i++) {
./board/siemens/IAD210/flash.c:    addr = (volatile unsigned long *)(info->start[i]);
./board/siemens/IAD210/flash.c:    info->protect[i] = addr[2] & 1;
./board/siemens/IAD210/flash.c:  if (info->flash_id != FLASH_UNKNOWN) {
./board/siemens/IAD210/flash.c:    addr = (volatile unsigned long *)info->start[0];
./board/siemens/IAD210/flash.c:  return (info->size);
./board/siemens/IAD210/flash.c:  vu_long *addr = (vu_long*)(info->start[0]);
./board/siemens/IAD210/flash.c:    if (info->flash_id == FLASH_UNKNOWN) {
./board/siemens/IAD210/flash.c:  if ((info->flash_id == FLASH_UNKNOWN) ||
./board/siemens/IAD210/flash.c:      (info->flash_id > FLASH_AMD_COMP)) {
./board/siemens/IAD210/flash.c:			info->flash_id);
./board/siemens/IAD210/flash.c:    if (info->protect[sect]) {
./board/siemens/IAD210/flash.c:    if (info->protect[sect] == 0) {	/* not protected */
./board/siemens/IAD210/flash.c:      addr = (vu_long*)(info->start[sect]);
./board/siemens/IAD210/flash.c:  addr = (vu_long*)(info->start[l_sect]);
./board/siemens/IAD210/flash.c:  addr = (volatile unsigned long *)info->start[0];
./board/siemens/IAD210/flash.c:  vu_long *addr = (vu_long*)(info->start[0]);
./board/siemens/SCM/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/siemens/SCM/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/siemens/SCM/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/siemens/SCM/flash.c:		info->sector_count = 0;
./board/siemens/SCM/flash.c:		info->size = 0;
./board/siemens/SCM/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/siemens/SCM/flash.c:			info->flash_id += FLASH_AM800T;
./board/siemens/SCM/flash.c:			info->sector_count = 19;
./board/siemens/SCM/flash.c:			info->size = 0x00400000;
./board/siemens/SCM/flash.c:			info->flash_id += FLASH_AM800B;
./board/siemens/SCM/flash.c:			info->sector_count = 19;
./board/siemens/SCM/flash.c:			info->size = 0x00400000;
./board/siemens/SCM/flash.c:			info->flash_id += FLASH_AM160T;
./board/siemens/SCM/flash.c:			info->sector_count = 35;
./board/siemens/SCM/flash.c:			info->size = 0x00800000;
./board/siemens/SCM/flash.c:			info->flash_id += FLASH_AM160B;
./board/siemens/SCM/flash.c:			info->sector_count = 35;
./board/siemens/SCM/flash.c:			info->size = 0x00800000;
./board/siemens/SCM/flash.c:			info->flash_id += FLASH_AMDL322T;
./board/siemens/SCM/flash.c:			info->sector_count = 71;
./board/siemens/SCM/flash.c:			info->size = 0x01000000;
./board/siemens/SCM/flash.c:			info->flash_id += FLASH_AMDL322B;
./board/siemens/SCM/flash.c:			info->sector_count = 71;
./board/siemens/SCM/flash.c:			info->size = 0x01000000;
./board/siemens/SCM/flash.c:			info->flash_id += FLASH_AMDL323T;
./board/siemens/SCM/flash.c:			info->sector_count = 71;
./board/siemens/SCM/flash.c:			info->size = 0x01000000;
./board/siemens/SCM/flash.c:			info->flash_id += FLASH_AMDL323B;
./board/siemens/SCM/flash.c:			info->sector_count = 71;
./board/siemens/SCM/flash.c:			info->size = 0x01000000;
./board/siemens/SCM/flash.c:			info->flash_id += FLASH_AM640U;
./board/siemens/SCM/flash.c:			info->sector_count = 128;
./board/siemens/SCM/flash.c:			info->size = 0x02000000;
./board/siemens/SCM/flash.c:			info->flash_id = FLASH_UNKNOWN;
./board/siemens/SCM/flash.c:		for (i = 0; i < info->sector_count; i++)
./board/siemens/SCM/flash.c:			info->start[i] = baseaddr + (i * 0x00040000);
./board/siemens/SCM/flash.c:	} else if (info->flash_id & FLASH_BTYPE) {
./board/siemens/SCM/flash.c:		info->start[0] = baseaddr + 0x00000000;
./board/siemens/SCM/flash.c:		info->start[1] = baseaddr + 0x00010000;
./board/siemens/SCM/flash.c:		info->start[2] = baseaddr + 0x00018000;
./board/siemens/SCM/flash.c:		info->start[3] = baseaddr + 0x00020000;
./board/siemens/SCM/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/siemens/SCM/flash.c:			info->start[i] = baseaddr + (i * 0x00040000) - 0x000C0000;
./board/siemens/SCM/flash.c:		i = info->sector_count - 1;
./board/siemens/SCM/flash.c:		info->start[i--] = baseaddr + info->size - 0x00010000;
./board/siemens/SCM/flash.c:		info->start[i--] = baseaddr + info->size - 0x00018000;
./board/siemens/SCM/flash.c:		info->start[i--] = baseaddr + info->size - 0x00020000;
./board/siemens/SCM/flash.c:			info->start[i] = baseaddr + i * 0x00040000;
./board/siemens/SCM/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/siemens/SCM/flash.c:		if ((V_ULONG (info->start[i] + 16) & 0x00010001) ||
./board/siemens/SCM/flash.c:			(V_ULONG (info->start[i] + 20) & 0x00010001)) {
./board/siemens/SCM/flash.c:			info->protect[i] = 1;	/* D0 = 1 if protected */
./board/siemens/SCM/flash.c:			info->protect[i] = 0;
./board/siemens/SCM/flash.c:	return (info->size);
./board/siemens/SCM/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/siemens/SCM/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/siemens/SCM/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/siemens/SCM/flash.c:			info->size >> 20, info->sector_count);
./board/siemens/SCM/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/siemens/SCM/flash.c:			info->start[i],
./board/siemens/SCM/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/siemens/SCM/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/siemens/SCM/flash.c:		if (info->protect[sect])
./board/siemens/SCM/flash.c:	V_ULONG (info->start[0] + (0x0555 << 3)) = 0x00AA00AA;
./board/siemens/SCM/flash.c:	V_ULONG (info->start[0] + (0x02AA << 3)) = 0x00550055;
./board/siemens/SCM/flash.c:	V_ULONG (info->start[0] + (0x0555 << 3)) = 0x00800080;
./board/siemens/SCM/flash.c:	V_ULONG (info->start[0] + (0x0555 << 3)) = 0x00AA00AA;
./board/siemens/SCM/flash.c:	V_ULONG (info->start[0] + (0x02AA << 3)) = 0x00550055;
./board/siemens/SCM/flash.c:	V_ULONG (info->start[0] + 4 + (0x0555 << 3)) = 0x00AA00AA;
./board/siemens/SCM/flash.c:	V_ULONG (info->start[0] + 4 + (0x02AA << 3)) = 0x00550055;
./board/siemens/SCM/flash.c:	V_ULONG (info->start[0] + 4 + (0x0555 << 3)) = 0x00800080;
./board/siemens/SCM/flash.c:	V_ULONG (info->start[0] + 4 + (0x0555 << 3)) = 0x00AA00AA;
./board/siemens/SCM/flash.c:	V_ULONG (info->start[0] + 4 + (0x02AA << 3)) = 0x00550055;
./board/siemens/SCM/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/siemens/SCM/flash.c:			V_ULONG (info->start[sect]) = 0x00300030;
./board/siemens/SCM/flash.c:			V_ULONG (info->start[sect] + 4) = 0x00300030;
./board/siemens/SCM/flash.c:	while ((V_ULONG (info->start[l_sect]) & 0x00800080) != 0x00800080 ||
./board/siemens/SCM/flash.c:	       (V_ULONG (info->start[l_sect] + 4) & 0x00800080) != 0x00800080)
./board/siemens/SCM/flash.c:	V_ULONG (info->start[0] + (0x0555 << 3)) = 0x00AA00AA;
./board/siemens/SCM/flash.c:	V_ULONG (info->start[0] + (0x02AA << 3)) = 0x00550055;
./board/siemens/SCM/flash.c:	V_ULONG (info->start[0] + (0x0555 << 3)) = 0x00A000A0;
./board/siemens/SCM/flash.c:	V_ULONG (info->start[0] + 4 + (0x0555 << 3)) = 0x00AA00AA;
./board/siemens/SCM/flash.c:	V_ULONG (info->start[0] + 4 + (0x02AA << 3)) = 0x00550055;
./board/siemens/SCM/flash.c:	V_ULONG (info->start[0] + 4 + (0x0555 << 3)) = 0x00A000A0;
./board/siemens/CCM/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/siemens/CCM/flash.c:		info->start[0] = base + 0x00000000;
./board/siemens/CCM/flash.c:		info->start[1] = base + 0x00008000;
./board/siemens/CCM/flash.c:		info->start[2] = base + 0x0000C000;
./board/siemens/CCM/flash.c:		info->start[3] = base + 0x00010000;
./board/siemens/CCM/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/siemens/CCM/flash.c:			info->start[i] = base + (i * 0x00020000) - 0x00060000;
./board/siemens/CCM/flash.c:		i = info->sector_count - 1;
./board/siemens/CCM/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/siemens/CCM/flash.c:		info->start[i--] = base + info->size - 0x0000C000;
./board/siemens/CCM/flash.c:		info->start[i--] = base + info->size - 0x00010000;
./board/siemens/CCM/flash.c:			info->start[i] = base + i * 0x00020000;
./board/siemens/CCM/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/siemens/CCM/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/siemens/CCM/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/siemens/CCM/flash.c:		info->size >> 20, info->sector_count);
./board/siemens/CCM/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/siemens/CCM/flash.c:			info->start[i],
./board/siemens/CCM/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/siemens/CCM/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/siemens/CCM/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/siemens/CCM/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/siemens/CCM/flash.c:		info->sector_count = 0;
./board/siemens/CCM/flash.c:		info->size = 0;
./board/siemens/CCM/flash.c:		info->flash_id += FLASH_AM400T;
./board/siemens/CCM/flash.c:		info->sector_count = 11;
./board/siemens/CCM/flash.c:		info->size = 0x00100000;
./board/siemens/CCM/flash.c:		info->flash_id += FLASH_AM400B;
./board/siemens/CCM/flash.c:		info->sector_count = 11;
./board/siemens/CCM/flash.c:		info->size = 0x00100000;
./board/siemens/CCM/flash.c:		info->flash_id += FLASH_AM800T;
./board/siemens/CCM/flash.c:		info->sector_count = 19;
./board/siemens/CCM/flash.c:		info->size = 0x00200000;
./board/siemens/CCM/flash.c:		info->flash_id += FLASH_AM800B;
./board/siemens/CCM/flash.c:		info->sector_count = 19;
./board/siemens/CCM/flash.c:		info->size = 0x00200000;
./board/siemens/CCM/flash.c:		info->flash_id += FLASH_AM160T;
./board/siemens/CCM/flash.c:		info->sector_count = 35;
./board/siemens/CCM/flash.c:		info->size = 0x00400000;
./board/siemens/CCM/flash.c:		info->flash_id += FLASH_AM160B;
./board/siemens/CCM/flash.c:		info->sector_count = 35;
./board/siemens/CCM/flash.c:		info->size = 0x00400000;
./board/siemens/CCM/flash.c:		info->flash_id += FLASH_AM320T;
./board/siemens/CCM/flash.c:		info->sector_count = 67;
./board/siemens/CCM/flash.c:		info->size = 0x00800000;
./board/siemens/CCM/flash.c:		info->flash_id += FLASH_AM320B;
./board/siemens/CCM/flash.c:		info->sector_count = 67;
./board/siemens/CCM/flash.c:		info->size = 0x00800000;
./board/siemens/CCM/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/siemens/CCM/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/siemens/CCM/flash.c:		info->start[0] = base + 0x00000000;
./board/siemens/CCM/flash.c:		info->start[1] = base + 0x00008000;
./board/siemens/CCM/flash.c:		info->start[2] = base + 0x0000C000;
./board/siemens/CCM/flash.c:		info->start[3] = base + 0x00010000;
./board/siemens/CCM/flash.c:		for (i = 4; i < info->sector_count; i++) {
./board/siemens/CCM/flash.c:			info->start[i] = base + (i * 0x00020000) - 0x00060000;
./board/siemens/CCM/flash.c:		i = info->sector_count - 1;
./board/siemens/CCM/flash.c:		info->start[i--] = base + info->size - 0x00008000;
./board/siemens/CCM/flash.c:		info->start[i--] = base + info->size - 0x0000C000;
./board/siemens/CCM/flash.c:		info->start[i--] = base + info->size - 0x00010000;
./board/siemens/CCM/flash.c:			info->start[i] = base + i * 0x00020000;
./board/siemens/CCM/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/siemens/CCM/flash.c:		addr = (volatile unsigned long *)(info->start[i]);
./board/siemens/CCM/flash.c:		info->protect[i] = addr[2] & 1;
./board/siemens/CCM/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/siemens/CCM/flash.c:		addr = (volatile unsigned long *)info->start[0];
./board/siemens/CCM/flash.c:	return (info->size);
./board/siemens/CCM/flash.c:	vu_long *addr = (vu_long*)(info->start[0]);
./board/siemens/CCM/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/siemens/CCM/flash.c:	if ((info->flash_id == FLASH_UNKNOWN) ||
./board/siemens/CCM/flash.c:	    (info->flash_id > FLASH_AMD_COMP)) {
./board/siemens/CCM/flash.c:			info->flash_id);
./board/siemens/CCM/flash.c:		if (info->protect[sect]) {
./board/siemens/CCM/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/siemens/CCM/flash.c:			addr = (vu_long*)(info->start[sect]);
./board/siemens/CCM/flash.c:	addr = (vu_long*)(info->start[l_sect]);
./board/siemens/CCM/flash.c:	addr = (volatile unsigned long *)info->start[0];
./board/siemens/CCM/flash.c:	vu_long *addr = (vu_long*)(info->start[0]);
./board/amirix/ap1000/flash.c:	return ((uchar *) (info->start[sect] + (offset * info->chipwidth)));
./board/amirix/ap1000/flash.c:	if (info->portwidth == FLASH_CFI_8BIT) {
./board/amirix/ap1000/flash.c:	} else if (info->portwidth == FLASH_CFI_16BIT) {
./board/amirix/ap1000/flash.c:	if (info->portwidth == FLASH_CFI_8BIT) {
./board/amirix/ap1000/flash.c:	} else if (info->portwidth == FLASH_CFI_16BIT) {
./board/amirix/ap1000/flash.c:	if (info->portwidth == FLASH_CFI_8BIT) {
./board/amirix/ap1000/flash.c:	} else if (info->portwidth == FLASH_CFI_16BIT) {
./board/amirix/ap1000/flash.c:	if (info->flash_id != FLASH_MAN_CFI) {
./board/amirix/ap1000/flash.c:		if (info->protect[sect]) {
./board/amirix/ap1000/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/amirix/ap1000/flash.c:			    (info, sect, info->erase_blk_tout, "erase")) {
./board/amirix/ap1000/flash.c:	if (info->flash_id != FLASH_MAN_CFI) {
./board/amirix/ap1000/flash.c:		(info->chipwidth << 3), (info->portwidth << 3));
./board/amirix/ap1000/flash.c:		info->size >> 20, info->sector_count);
./board/amirix/ap1000/flash.c:	printf (" Erase timeout %ld ms, write timeout %ld ms, buffer write timeout %ld ms, buffer size %d\n", info->erase_blk_tout, info->write_tout, info->buffer_write_tout, info->buffer_size);
./board/amirix/ap1000/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/amirix/ap1000/flash.c:			info->start[i], info->protect[i] ? " (RO)" : " ");
./board/amirix/ap1000/flash.c:	wp = (addr & ~(info->portwidth - 1));
./board/amirix/ap1000/flash.c:		for (; (i < info->portwidth) && (cnt > 0); i++) {
./board/amirix/ap1000/flash.c:		for (; (cnt == 0) && (i < info->portwidth); ++i, ++cp)
./board/amirix/ap1000/flash.c:	while (cnt >= info->portwidth) {
./board/amirix/ap1000/flash.c:		i = info->buffer_size > cnt ? cnt : info->buffer_size;
./board/amirix/ap1000/flash.c:	while (cnt >= info->portwidth) {
./board/amirix/ap1000/flash.c:		for (i = 0; i < info->portwidth; i++) {
./board/amirix/ap1000/flash.c:		wp += info->portwidth;
./board/amirix/ap1000/flash.c:		cnt -= info->portwidth;
./board/amirix/ap1000/flash.c:	for (i = 0, cp = wp; (i < info->portwidth) && (cnt > 0); ++i, ++cp) {
./board/amirix/ap1000/flash.c:	for (; i < info->portwidth; ++i, ++cp) {
./board/amirix/ap1000/flash.c:	     flash_full_status_check (info, sector, info->erase_blk_tout,
./board/amirix/ap1000/flash.c:		info->protect[sector] = prot;
./board/amirix/ap1000/flash.c:			for (i = 0; i < info->sector_count; i++) {
./board/amirix/ap1000/flash.c:				if (info->protect[i])
./board/amirix/ap1000/flash.c:		if (get_timer (start) > info->erase_blk_tout) {
./board/amirix/ap1000/flash.c:				info->start[sector]);
./board/amirix/ap1000/flash.c:			info->start[sector]);
./board/amirix/ap1000/flash.c:	switch (info->portwidth) {
./board/amirix/ap1000/flash.c:	/* for(i=0; i< info->portwidth; i++) */
./board/amirix/ap1000/flash.c:	/*  *cp++ = ((i+1) % info->chipwidth) ? '\0':cmd; */
./board/amirix/ap1000/flash.c:	if (info->portwidth == FLASH_CFI_8BIT
./board/amirix/ap1000/flash.c:	    && info->chipwidth == FLASH_CFI_16BIT) {
./board/amirix/ap1000/flash.c:	} else if (info->portwidth == FLASH_CFI_16BIT
./board/amirix/ap1000/flash.c:		   && info->chipwidth == FLASH_CFI_16BIT) {
./board/amirix/ap1000/flash.c:	switch (info->portwidth) {
./board/amirix/ap1000/flash.c:	switch (info->portwidth) {
./board/amirix/ap1000/flash.c:	switch (info->portwidth) {
./board/amirix/ap1000/flash.c:	for (info->portwidth = FLASH_CFI_8BIT;
./board/amirix/ap1000/flash.c:	     info->portwidth <= FLASH_CFI_32BIT; info->portwidth <<= 1) {
./board/amirix/ap1000/flash.c:		for (info->chipwidth = FLASH_CFI_BY8;
./board/amirix/ap1000/flash.c:		     info->chipwidth <= info->portwidth;
./board/amirix/ap1000/flash.c:		     info->chipwidth <<= 1) {
./board/amirix/ap1000/flash.c:	info->start[0] = base;
./board/amirix/ap1000/flash.c:		printf ("portwidth=%d chipwidth=%d\n", info->portwidth, info->chipwidth);	/* test-only */
./board/amirix/ap1000/flash.c:		size_ratio = 1;	/* info->portwidth / info->chipwidth; */
./board/amirix/ap1000/flash.c:				info->start[sect_cnt] = sector;
./board/amirix/ap1000/flash.c:				info->protect[sect_cnt] =
./board/amirix/ap1000/flash.c:		info->sector_count = sect_cnt;
./board/amirix/ap1000/flash.c:		info->size =
./board/amirix/ap1000/flash.c:		info->buffer_size =
./board/amirix/ap1000/flash.c:		info->erase_blk_tout =
./board/amirix/ap1000/flash.c:		info->buffer_write_tout =
./board/amirix/ap1000/flash.c:		info->write_tout =
./board/amirix/ap1000/flash.c:		info->flash_id = FLASH_MAN_CFI;
./board/amirix/ap1000/flash.c:	return (info->size);
./board/amirix/ap1000/flash.c:	switch (info->portwidth) {
./board/amirix/ap1000/flash.c:	switch (info->portwidth) {
./board/amirix/ap1000/flash.c:	return flash_full_status_check (info, 0, info->write_tout, "write");
./board/amirix/ap1000/flash.c:	for (sector = info->sector_count - 1; sector >= 0; sector--) {
./board/amirix/ap1000/flash.c:		if (addr >= info->start[sector])
./board/amirix/ap1000/flash.c:	     flash_status_check (info, sector, info->buffer_write_tout,
./board/amirix/ap1000/flash.c:		switch (info->portwidth) {
./board/amirix/ap1000/flash.c:			switch (info->portwidth) {
./board/amirix/ap1000/flash.c:						 info->buffer_write_tout,
./board/cm4008/flash.c:	if (info->flash_id == FLASH_UNKNOWN)
./board/cm4008/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/cm4008/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/cm4008/flash.c:			info->start[i] = base + (i * PHYS_FLASH_SECT_SIZE);
./board/cm4008/flash.c:			info->protect[i] = 0;
./board/cm4008/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/cm4008/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/cm4008/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/cm4008/flash.c:		info->size >> 20, info->sector_count);
./board/cm4008/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/cm4008/flash.c:			info->start[i], info->protect[i] ? " (RO)" : "     ");
./board/cm4008/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/cm4008/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/cm4008/flash.c:		info->sector_count = 0;
./board/cm4008/flash.c:		info->size = 0;
./board/cm4008/flash.c:		info->flash_id += FLASH_28F640J3A;
./board/cm4008/flash.c:		info->sector_count = 64;
./board/cm4008/flash.c:		info->size = 0x00800000;
./board/cm4008/flash.c:		info->flash_id += FLASH_28F128J3A;
./board/cm4008/flash.c:		info->sector_count = 128;
./board/cm4008/flash.c:		info->size = 0x01000000;
./board/cm4008/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/cm4008/flash.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/cm4008/flash.c:			info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/cm4008/flash.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/cm4008/flash.c:	return (info->size);
./board/cm4008/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/cm4008/flash.c:	type = (info->flash_id & FLASH_VENDMASK);
./board/cm4008/flash.c:			info->flash_id);
./board/cm4008/flash.c:		if (info->protect[sect]) {
./board/cm4008/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/cm4008/flash.c:			addr = (volatile unsigned char *) (info->start[sect]);
./board/cm4008/flash.c:	if (info->flash_id == FLASH_UNKNOWN)
./board/logodl/flash.c:	FPWV *base = (FPWV *)(info->start[0]);
./board/logodl/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL)
./board/logodl/flash.c:	else if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_AMD)
./board/logodl/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL
./board/logodl/flash.c:	    && (info->flash_id & FLASH_BTYPE)) {
./board/logodl/flash.c:			info->start[i] = base + (i * bootsect_size);
./board/logodl/flash.c:		for (i = 8; i < info->sector_count; i++) {
./board/logodl/flash.c:			info->start[i] = base + ((i - 7) * sect_size);
./board/logodl/flash.c:	else if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_AMD
./board/logodl/flash.c:		 && (info->flash_id & FLASH_TYPEMASK) == FLASH_AM640U) {
./board/logodl/flash.c:		for( i = 0; i < info->sector_count; i++ )
./board/logodl/flash.c:			info->start[i] = base + (i * sect_size);
./board/logodl/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/logodl/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/logodl/flash.c:	if (info->flash_id & FLASH_BTYPE) {
./board/logodl/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/logodl/flash.c:		info->size >> 20,
./board/logodl/flash.c:		info->sector_count);
./board/logodl/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/logodl/flash.c:		printf (" %08lX%s", info->start[i],
./board/logodl/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/logodl/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/logodl/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/logodl/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/logodl/flash.c:		info->sector_count = 0;
./board/logodl/flash.c:		info->size = 0;
./board/logodl/flash.c:	if (info->flash_id != FLASH_UNKNOWN) switch (addr[1]) {
./board/logodl/flash.c:		info->flash_id += FLASH_AM640U;
./board/logodl/flash.c:		info->sector_count = 128;
./board/logodl/flash.c:		info->size = 0x00800000 * (sizeof(FPW)/2);
./board/logodl/flash.c:		info->flash_id += FLASH_28F800C3B;
./board/logodl/flash.c:		info->sector_count = 23;
./board/logodl/flash.c:		info->size = 0x00100000 * (sizeof(FPW)/2);
./board/logodl/flash.c:		info->flash_id += FLASH_INTEL800B;
./board/logodl/flash.c:		info->sector_count = 23;
./board/logodl/flash.c:		info->size = 0x00100000 * (sizeof(FPW)/2);
./board/logodl/flash.c:		info->flash_id += FLASH_28F160C3B;
./board/logodl/flash.c:		info->sector_count = 39;
./board/logodl/flash.c:		info->size = 0x00200000 * (sizeof(FPW)/2);
./board/logodl/flash.c:		info->flash_id += FLASH_INTEL160B;
./board/logodl/flash.c:		info->sector_count = 39;
./board/logodl/flash.c:		info->size = 0x00200000 * (sizeof(FPW)/2);
./board/logodl/flash.c:		info->flash_id += FLASH_28F320C3B;
./board/logodl/flash.c:		info->sector_count = 71;
./board/logodl/flash.c:		info->size = 0x00400000 * (sizeof(FPW)/2);
./board/logodl/flash.c:		info->flash_id += FLASH_INTEL320B;
./board/logodl/flash.c:		info->sector_count = 71;
./board/logodl/flash.c:		info->size = 0x00400000 * (sizeof(FPW)/2);
./board/logodl/flash.c:		info->flash_id += FLASH_28F640C3B;
./board/logodl/flash.c:		info->sector_count = 135;
./board/logodl/flash.c:		info->size = 0x00800000 * (sizeof(FPW)/2);
./board/logodl/flash.c:		info->flash_id += FLASH_INTEL640B;
./board/logodl/flash.c:		info->sector_count = 135;
./board/logodl/flash.c:		info->size = 0x00800000 * (sizeof(FPW)/2);
./board/logodl/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/logodl/flash.c:		info->sector_count = 0;
./board/logodl/flash.c:		info->size = 0;
./board/logodl/flash.c:	return (info->size);
./board/logodl/flash.c:    FPWV *addr = (FPWV *)(info->start[0]);
./board/logodl/flash.c:    switch (info->flash_id & FLASH_TYPEMASK) {
./board/logodl/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/logodl/flash.c:	    sect = (FPWV *)(info->start[i]);
./board/logodl/flash.c:	    info->protect[i] = (sect[2] & (FPW)(0x00010001)) ? 1 : 0;
./board/logodl/flash.c:	int intel = (info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL;
./board/logodl/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/logodl/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/logodl/flash.c:			info->flash_id);
./board/logodl/flash.c:		if (info->protect[sect]) {
./board/logodl/flash.c:		if (info->protect[sect] != 0)	/* protected, skip it */
./board/logodl/flash.c:		addr = (FPWV *)(info->start[sect]);
./board/logodl/flash.c:			base = (FPWV *)(info->start[0]);
./board/logodl/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/logodl/flash.c:    base = (FPWV *)(info->start[0]);
./board/logodl/flash.c:	addr = (FPWV *) (info->start[sector]);
./board/logodl/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/logodl/flash.c:			info->protect[sector] = 0;
./board/logodl/flash.c:			info->protect[sector] = 1;
./board/logodl/flash.c:			info->protect[sector] = 1;
./board/logodl/flash.c:		if (info->protect[sector] != prot)
./board/logodl/flash.c:		info->protect[sector] = prot;
./board/LEOX/elpt860/flash.c:  for (i = 0; i < info->sector_count; i++)
./board/LEOX/elpt860/flash.c:      info->start[i] = base + (i * SECTOR_64KB);
./board/LEOX/elpt860/flash.c:  if ( info->flash_id == FLASH_UNKNOWN )
./board/LEOX/elpt860/flash.c:  switch ( info->flash_id & FLASH_VENDMASK )
./board/LEOX/elpt860/flash.c:  switch ( info->flash_id & FLASH_TYPEMASK )
./board/LEOX/elpt860/flash.c:	  info->size >> 10, info->sector_count);
./board/LEOX/elpt860/flash.c:  for (i=0; i<info->sector_count; ++i)
./board/LEOX/elpt860/flash.c:	      info->start[i],
./board/LEOX/elpt860/flash.c:	      info->protect[i] ? " (RO)" : "     "
./board/LEOX/elpt860/flash.c:      info->flash_id = FLASH_MAN_AMD;
./board/LEOX/elpt860/flash.c:      info->flash_id = FLASH_MAN_FUJ;
./board/LEOX/elpt860/flash.c:      info->flash_id = FLASH_MAN_STM;
./board/LEOX/elpt860/flash.c:      info->flash_id = FLASH_UNKNOWN;
./board/LEOX/elpt860/flash.c:      info->sector_count = 0;
./board/LEOX/elpt860/flash.c:      info->size = 0;
./board/LEOX/elpt860/flash.c:      info->flash_id += FLASH_AM040;    /* 4 Mbits = 512k * 8  */
./board/LEOX/elpt860/flash.c:      info->sector_count = 8;
./board/LEOX/elpt860/flash.c:      info->size = 0x00080000;
./board/LEOX/elpt860/flash.c:      info->flash_id = FLASH_UNKNOWN;
./board/LEOX/elpt860/flash.c:  for (i = 0; i < info->sector_count; i++)
./board/LEOX/elpt860/flash.c:      info->start[i] = base + (i * 0x00010000);
./board/LEOX/elpt860/flash.c:  for (i = 0; i < info->sector_count; i++)
./board/LEOX/elpt860/flash.c:      addr = (volatile unsigned char *)(info->start[i]);
./board/LEOX/elpt860/flash.c:      info->protect[i] = addr[2] & 1;
./board/LEOX/elpt860/flash.c:  if ( info->flash_id != FLASH_UNKNOWN )
./board/LEOX/elpt860/flash.c:      addr = (volatile unsigned char *)info->start[0];
./board/LEOX/elpt860/flash.c:  return (info->size);
./board/LEOX/elpt860/flash.c:  volatile unsigned char *addr = (volatile unsigned char *)(info->start[0]);
./board/LEOX/elpt860/flash.c:      if ( info->flash_id == FLASH_UNKNOWN )
./board/LEOX/elpt860/flash.c:  if ( (info->flash_id == FLASH_UNKNOWN) ||
./board/LEOX/elpt860/flash.c:       (info->flash_id > FLASH_AMD_COMP) )
./board/LEOX/elpt860/flash.c:	      info->flash_id);
./board/LEOX/elpt860/flash.c:      if ( info->protect[sect] )
./board/LEOX/elpt860/flash.c:      if (info->protect[sect] == 0)    /* not protected */
./board/LEOX/elpt860/flash.c:	  addr = (volatile unsigned char *)(info->start[sect]);
./board/LEOX/elpt860/flash.c:  addr = (volatile unsigned char *)(info->start[l_sect]);
./board/LEOX/elpt860/flash.c:  addr = (volatile unsigned char *)info->start[0];
./board/LEOX/elpt860/flash.c:  if ( (info->flash_id & FLASH_TYPEMASK) == FLASH_AM040 )
./board/LEOX/elpt860/flash.c:  vu_long *addr = (vu_long*)(info->start[0]);
./board/LEOX/elpt860/flash.c:  volatile unsigned char *addr = (volatile unsigned char *)(info->start[0]);
./board/kup/common/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/kup/common/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/kup/common/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/kup/common/flash.c:		info->size >> 20, info->sector_count);
./board/kup/common/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/kup/common/flash.c:			info->start[i],
./board/kup/common/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/kup/common/flash.c:		info->flash_id = FLASH_MAN_AMD;
./board/kup/common/flash.c:		info->flash_id = FLASH_MAN_FUJ;
./board/kup/common/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/kup/common/flash.c:		info->sector_count = 0;
./board/kup/common/flash.c:		info->size = 0;
./board/kup/common/flash.c:		info->flash_id += FLASH_AM400T;
./board/kup/common/flash.c:		info->sector_count = 19;
./board/kup/common/flash.c:		info->size = 0x00100000;
./board/kup/common/flash.c:		info->flash_id += FLASH_AM800T;
./board/kup/common/flash.c:		info->sector_count = 19;
./board/kup/common/flash.c:		info->size = 0x00100000;
./board/kup/common/flash.c:		info->flash_id += FLASH_AM800B;
./board/kup/common/flash.c:		info->sector_count = 19;
./board/kup/common/flash.c:		info->size = 0x00100000;
./board/kup/common/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/kup/common/flash.c:	info->start[0] = base + 0x00000000;
./board/kup/common/flash.c:	info->start[1] = base + 0x00004000;
./board/kup/common/flash.c:	info->start[2] = base + 0x00006000;
./board/kup/common/flash.c:	info->start[3] = base + 0x00008000;
./board/kup/common/flash.c:	for (i = 4; i < info->sector_count; i++) {
./board/kup/common/flash.c:		info->start[i] = base + (i * 0x00010000) - 0x00030000;
./board/kup/common/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/kup/common/flash.c:		s_addr = (volatile unsigned short *)(info->start[i]);
./board/kup/common/flash.c:		info->protect[i] = s_addr[2] & 1;
./board/kup/common/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/kup/common/flash.c:		s_addr = (volatile unsigned short *)info->start[0];
./board/kup/common/flash.c:	return (info->size);
./board/kup/common/flash.c:	vu_long *addr = (vu_long*)(info->start[0]);
./board/kup/common/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/kup/common/flash.c:	type = (info->flash_id & FLASH_VENDMASK);
./board/kup/common/flash.c:			info->flash_id);
./board/kup/common/flash.c:		if (info->protect[sect]) {
./board/kup/common/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/kup/common/flash.c:			vu_short *s_sect_addr = (vu_short*)(info->start[sect]);
./board/kup/common/flash.c:			vu_long	*sect_addr = (vu_long*)(info->start[sect]);
./board/kup/common/flash.c:	addr = (volatile unsigned long *)info->start[0];
./board/kup/common/flash.c:	vu_long *addr = (vu_long*)(info->start[0]);
./board/cerf250/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/cerf250/flash.c:	if ((info->flash_id & FLASH_VENDMASK) == FLASH_MAN_INTEL) {
./board/cerf250/flash.c:		for (i = 0; i < info->sector_count; i++) {
./board/cerf250/flash.c:			info->start[i] = base + (i * PHYS_FLASH_SECT_SIZE);
./board/cerf250/flash.c:			info->protect[i] = 0;
./board/cerf250/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/cerf250/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/cerf250/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/cerf250/flash.c:			info->size >> 20, info->sector_count);
./board/cerf250/flash.c:	for (i = 0; i < info->sector_count; ++i) {
./board/cerf250/flash.c:			info->start[i],
./board/cerf250/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/cerf250/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/cerf250/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/cerf250/flash.c:		info->sector_count = 0;
./board/cerf250/flash.c:		info->size = 0;
./board/cerf250/flash.c:		info->flash_id += FLASH_28F128J3A;
./board/cerf250/flash.c:		info->sector_count = 128;
./board/cerf250/flash.c:		info->size = 0x02000000;
./board/cerf250/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/cerf250/flash.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./board/cerf250/flash.c:			info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./board/cerf250/flash.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./board/cerf250/flash.c:	return (info->size);
./board/cerf250/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/cerf250/flash.c:	type = (info->flash_id & FLASH_VENDMASK);
./board/cerf250/flash.c:			info->flash_id);
./board/cerf250/flash.c:		if (info->protect[sect]) {
./board/cerf250/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/cerf250/flash.c:			FPWV *addr = (FPWV *) (info->start[sect]);
./board/cerf250/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/sbc2410x/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/sbc2410x/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/sbc2410x/flash.c:		info->size >> 20, info->sector_count);
./board/sbc2410x/flash.c:	for (i = 0; i < info->sector_count; i++) {
./board/sbc2410x/flash.c:		printf (" %08lX%s", info->start[i],
./board/sbc2410x/flash.c:			info->protect[i] ? " (RO)" : "     ");
./board/sbc2410x/flash.c:	if (info->flash_id == FLASH_UNKNOWN)
./board/sbc2410x/flash.c:	if ((info->flash_id & FLASH_VENDMASK) !=
./board/sbc2410x/flash.c:		if (info->protect[sect]) {
./board/sbc2410x/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/sbc2410x/flash.c:			vu_short *addr = (vu_short *) (info->start[sect]);
./board/stxgp3/flash.c:	if (info->flash_id == FLASH_UNKNOWN) {
./board/stxgp3/flash.c:	switch (info->flash_id & FLASH_VENDMASK) {
./board/stxgp3/flash.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./board/stxgp3/flash.c:		info->size >> 20, info->sector_count);
./board/stxgp3/flash.c:	for (i=0; i<info->sector_count; ++i) {
./board/stxgp3/flash.c:			info->start[i],
./board/stxgp3/flash.c:			info->protect[i] ? " (RO)" : "     "
./board/stxgp3/flash.c:		info->flash_id = FLASH_MAN_INTEL;
./board/stxgp3/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/stxgp3/flash.c:		info->sector_count = 0;
./board/stxgp3/flash.c:		info->size = 0;
./board/stxgp3/flash.c:		info->flash_id += FLASH_28F640C3T;
./board/stxgp3/flash.c:		info->sector_count = 135;
./board/stxgp3/flash.c:		info->size = 0x01000000;
./board/stxgp3/flash.c:		info->flash_id = FLASH_UNKNOWN;
./board/stxgp3/flash.c:		info->start[i] = base;
./board/stxgp3/flash.c:		info->protect[i] = 0;
./board/stxgp3/flash.c:		info->start[i] = base;
./board/stxgp3/flash.c:		info->protect[i] = 0;
./board/stxgp3/flash.c:	if (info->flash_id != FLASH_UNKNOWN) {
./board/stxgp3/flash.c:		addr = (vu_long *)info->start[0];
./board/stxgp3/flash.c:	return (info->size);
./board/stxgp3/flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./board/stxgp3/flash.c:	if (    ((info->flash_id & FLASH_VENDMASK) != FLASH_MAN_INTEL)
./board/stxgp3/flash.c:	     && ((info->flash_id & FLASH_VENDMASK) != FLASH_MAN_SHARP) ) {
./board/stxgp3/flash.c:			info->flash_id);
./board/stxgp3/flash.c:		if (info->protect[sect]) {
./board/stxgp3/flash.c:	if(clear_block_lock_bit((vu_long *)(info->start[s_first]))){
./board/stxgp3/flash.c:		if (info->protect[sect] == 0) {	/* not protected */
./board/stxgp3/flash.c:			vu_long *addr = (vu_long *)(info->start[sect]);
./board/stxgp3/flash.c:			if((info->flash_id & FLASH_TYPEMASK) != FLASH_LH28F016SCT) {
./tools/updater/cmd_flash.c:			rcode = flash_erase (info, 0, info->sector_count-1);
./tools/updater/cmd_flash.c:			sect_first, sect_last, (info-flash_info)+1);
./tools/updater/cmd_flash.c:		rcode = flash_erase (info, 0, info->sector_count-1);
./tools/updater/cmd_flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./tools/updater/cmd_flash.c:		b_end = info->start[0] + info->size - 1; /* bank end addr */
./tools/updater/cmd_flash.c:		for (sect=0; sect < info->sector_count; ++sect) {
./tools/updater/cmd_flash.c:			s_end = info->sector_count - 1;
./tools/updater/cmd_flash.c:			end = (sect == s_end) ? b_end : info->start[sect + 1] - 1;
./tools/updater/cmd_flash.c:			if (addr_last < info->start[sect])
./tools/updater/cmd_flash.c:			if (addr_first == info->start[sect]) {
./tools/updater/cmd_flash.c:			if (info->flash_id == FLASH_UNKNOWN) {
./tools/updater/cmd_flash.c:			for (i=0; i<info->sector_count; ++i) {
./tools/updater/cmd_flash.c:				info->protect[i] = p;
./tools/updater/cmd_flash.c:		/*	(info-flash_info)+1); */
./tools/updater/cmd_flash.c:			info->protect[i] = p;
./tools/updater/cmd_flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./tools/updater/cmd_flash.c:		for (i=0; i<info->sector_count; ++i) {
./tools/updater/cmd_flash.c:			info->protect[i] = p;
./tools/updater/cmd_flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./tools/updater/cmd_flash.c:		b_end = info->start[0] + info->size - 1; /* bank end addr */
./tools/updater/cmd_flash.c:		for (sect=0; sect < info->sector_count; ++sect) {
./tools/updater/cmd_flash.c:			s_end = info->sector_count - 1;
./tools/updater/cmd_flash.c:			end = (sect == s_end) ? b_end : info->start[sect + 1] - 1;
./tools/updater/cmd_flash.c:			if (addr_last < info->start[sect])
./tools/updater/cmd_flash.c:			if (addr_first == info->start[sect]) {
./tools/updater/cmd_flash.c:				info->protect[i] = p;
./tools/updater/flash_hw.c:			info->flash_id = FLASH_MAN_AMD;
./tools/updater/flash_hw.c:			info->flash_id = FLASH_MAN_FUJ;
./tools/updater/flash_hw.c:			info->flash_id = FLASH_MAN_STM;
./tools/updater/flash_hw.c:			info->flash_id = FLASH_UNKNOWN;
./tools/updater/flash_hw.c:			info->sector_count = 0;
./tools/updater/flash_hw.c:			info->size = 0;
./tools/updater/flash_hw.c:			info->flash_id += FLASH_AM040;
./tools/updater/flash_hw.c:			info->sector_count = 8;
./tools/updater/flash_hw.c:			info->size = 0x00080000;
./tools/updater/flash_hw.c:			info->flash_id += FLASH_AM040;
./tools/updater/flash_hw.c:			info->sector_count = 8;
./tools/updater/flash_hw.c:			info->size = 0x00080000;
./tools/updater/flash_hw.c:			info->flash_id += FLASH_AM400T;
./tools/updater/flash_hw.c:			info->sector_count = 11;
./tools/updater/flash_hw.c:			info->size = 0x00100000;
./tools/updater/flash_hw.c:			info->flash_id += FLASH_AM400B;
./tools/updater/flash_hw.c:			info->sector_count = 11;
./tools/updater/flash_hw.c:			info->size = 0x00100000;
./tools/updater/flash_hw.c:			info->flash_id += FLASH_AM800T;
./tools/updater/flash_hw.c:			info->sector_count = 19;
./tools/updater/flash_hw.c:			info->size = 0x00200000;
./tools/updater/flash_hw.c:			info->flash_id += FLASH_AM800B;
./tools/updater/flash_hw.c:			info->sector_count = 19;
./tools/updater/flash_hw.c:			info->size = 0x00200000;
./tools/updater/flash_hw.c:			info->flash_id += FLASH_AM160T;
./tools/updater/flash_hw.c:			info->sector_count = 35;
./tools/updater/flash_hw.c:			info->size = 0x00400000;
./tools/updater/flash_hw.c:			info->flash_id += FLASH_AM160B;
./tools/updater/flash_hw.c:			info->sector_count = 35;
./tools/updater/flash_hw.c:			info->size = 0x00400000;
./tools/updater/flash_hw.c:			info->flash_id += FLASH_AM320T;
./tools/updater/flash_hw.c:			info->sector_count = 67;
./tools/updater/flash_hw.c:			info->size = 0x00800000;
./tools/updater/flash_hw.c:			info->flash_id += FLASH_AM320B;
./tools/updater/flash_hw.c:			info->sector_count = 67;
./tools/updater/flash_hw.c:			info->size = 0x00800000;
./tools/updater/flash_hw.c:			info->flash_id += FLASH_AM033C;
./tools/updater/flash_hw.c:			info->sector_count = 64;
./tools/updater/flash_hw.c:			info->size = 0x01000000;
./tools/updater/flash_hw.c:			info->flash_id += FLASH_AM040;
./tools/updater/flash_hw.c:			info->sector_count = 8;
./tools/updater/flash_hw.c:			info->size = 0x00080000;
./tools/updater/flash_hw.c:			info->flash_id = FLASH_UNKNOWN;
./tools/updater/flash_hw.c:	if (info->sector_count > CONFIG_SYS_MAX_FLASH_SECT) {
./tools/updater/flash_hw.c:			info->sector_count, CONFIG_SYS_MAX_FLASH_SECT);
./tools/updater/flash_hw.c:		info->sector_count = CONFIG_SYS_MAX_FLASH_SECT;
./tools/updater/flash_hw.c:	for (i = 0; i < info->sector_count; i++) {
./tools/updater/flash_hw.c:		value = in8(info->start[i] + 2);
./tools/updater/flash_hw.c:		info->protect[i] = (value & 1) != 0;
./tools/updater/flash_hw.c:	return (info->size);
./tools/updater/flash_hw.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./tools/updater/flash_hw.c:			for (i = 0; i < info->sector_count; i++) {
./tools/updater/flash_hw.c:				info->start[i] = base + i * info->size /
./tools/updater/flash_hw.c:							    info->sector_count;
./tools/updater/flash_hw.c:	volatile ulong addr = info->start[0];
./tools/updater/flash_hw.c:		if (info->flash_id == FLASH_UNKNOWN) {
./tools/updater/flash_hw.c:	if (info->flash_id == FLASH_UNKNOWN) {
./tools/updater/flash_hw.c:			info->flash_id);
./tools/updater/flash_hw.c:		if (info->protect[sect]) {
./tools/updater/flash_hw.c:		if (info->protect[sect] == 0) {	/* not protected */
./tools/updater/flash_hw.c:			addr = info->start[sect];
./tools/updater/flash_hw.c:	addr = info->start[l_sect];
./tools/updater/flash_hw.c:			flash_reset (info->start[0]);
./tools/updater/flash_hw.c:	flash_reset (info->start[0]);
./tools/updater/flash_hw.c:	volatile ulong addr = info->start[0];
./tools/updater/flash_hw.c:	if (info->flash_id == FLASH_UNKNOWN) {
./tools/updater/flash_hw.c:	switch (info->flash_id & FLASH_VENDMASK) {
./tools/updater/flash_hw.c:	switch (info->flash_id & FLASH_TYPEMASK) {
./tools/updater/flash_hw.c:	if (info->size % 0x100000 == 0) {
./tools/updater/flash_hw.c:			info->size / 0x100000, info->sector_count);
./tools/updater/flash_hw.c:	} else if (info->size % 0x400 == 0) {
./tools/updater/flash_hw.c:			info->size / 0x400, info->sector_count);
./tools/updater/flash_hw.c:			info->size, info->sector_count);
./tools/updater/flash_hw.c:	for (i=0; i<info->sector_count; ++i) {
./tools/updater/flash_hw.c:			info->start[i],
./tools/updater/flash_hw.c:			info->protect[i] ? " (RO)" : "     "
./tools/updater/flash.c:	ulong b_end = info->start[0] + info->size - 1;	/* bank end address */
./tools/updater/flash.c:	short s_end = info->sector_count - 1;	/* index of last sector */
./tools/updater/flash.c:	if (info->sector_count == 0 || info->size == 0 || to < from) {
./tools/updater/flash.c:	if (info->flash_id == FLASH_UNKNOWN ||
./tools/updater/flash.c:	    to < info->start[0] || from > b_end) {
./tools/updater/flash.c:	for (i=0; i<info->sector_count; ++i) {
./tools/updater/flash.c:		end = (i == s_end) ? b_end : info->start[i + 1] - 1;
./tools/updater/flash.c:		if (from <= end && to >= info->start[i]) {
./tools/updater/flash.c:				info->protect[i] = 0;
./tools/updater/flash.c:				info->protect[i] = 1;
./tools/updater/flash.c:		if (info->flash_id != FLASH_UNKNOWN &&
./tools/updater/flash.c:		    addr >= info->start[0] &&
./tools/updater/flash.c:		     * info->start[0] + info->size wraps back to 0.
./tools/updater/flash.c:		    addr <= info->start[0] + info->size - 1) {
./tools/updater/flash.c:		ulong b_end = info->start[0] + info->size;	/* bank end addr */
./tools/updater/flash.c:		short s_end = info->sector_count - 1;
./tools/updater/flash.c:		for (i=0; i<info->sector_count; ++i) {
./tools/updater/flash.c:			ulong e_addr = (i == s_end) ? b_end : info->start[i + 1];
./tools/updater/flash.c:			if ((end >= info->start[i]) && (addr < e_addr) &&
./tools/updater/flash.c:			    (info->protect[i] != 0) ) {
./tools/updater/flash.c:		len = info->start[0] + info->size - addr;
./disk/part_iso.c:	info->blksz=ppr->secsize_BE; /* assuming same block size for all entries */
./disk/part_iso.c:	sprintf ((char *)info->type, "U-Boot");
./disk/part_iso.c:			sprintf ((char *)info->name, "hd%c%d",
./disk/part_iso.c:			sprintf ((char *)info->name, "sd%c%d",
./disk/part_iso.c:			sprintf ((char *)info->name, "usbd%c%d",
./disk/part_iso.c:			sprintf ((char *)info->name, "docd%c%d",
./disk/part_iso.c:			sprintf ((char *)info->name, "xx%c%d",
./disk/part_iso.c:			info->size=le16_to_int(pide->sec_cnt)>>2;
./disk/part_iso.c:		case 0x01:	info->size=2400>>2; break; /* 1.2MByte Floppy */
./disk/part_iso.c:		case 0x02:	info->size=2880>>2; break; /* 1.44MByte Floppy */
./disk/part_iso.c:		case 0x03:	info->size=5760>>2; break; /* 2.88MByte Floppy */
./disk/part_iso.c:		case 0x04:	info->size=2880>>2; break; /* dummy (HD Emulation) */
./disk/part_iso.c:		default:	info->size=0; break;
./disk/part_iso.c:	info->start=newblkaddr;
./disk/part_iso.c:	PRINTF(" part %d found @ %lx size %lx\n",part_num,newblkaddr,info->size);
./disk/part_efi.c:	info->start = (ulong) le64_to_int((*pgpt_pte)[part - 1].starting_lba);
./disk/part_efi.c:	info->size = ((ulong)le64_to_int((*pgpt_pte)[part - 1].ending_lba) + 1)
./disk/part_efi.c:		     - info->start;
./disk/part_efi.c:	info->blksz = GPT_BLOCK_SIZE;
./disk/part_efi.c:	sprintf((char *)info->name, "%s%d", GPT_ENTRY_NAME, part);
./disk/part_efi.c:	sprintf((char *)info->type, "U-Boot");
./disk/part_efi.c:		info->start, info->size, info->name);
./disk/part_mac.c:	info->blksz = ddesc.blk_size;
./disk/part_mac.c:	info->start = mpart.start_block;
./disk/part_mac.c:	info->size  = mpart.block_count;
./disk/part_mac.c:	memcpy (info->type, mpart.type, sizeof(info->type));
./disk/part_mac.c:	memcpy (info->name, mpart.name, sizeof(info->name));
./disk/part_amiga.c:    info->start = g->low_cyl  * g->block_per_track * g->surfaces;
./disk/part_amiga.c:    info->size  = (g->high_cyl - g->low_cyl + 1) * g->block_per_track * g->surfaces - 1;
./disk/part_amiga.c:    info->blksz = rdb.block_bytes;
./disk/part_amiga.c:    bcpl_strcpy(info->name, p->drive_name);
./disk/part_amiga.c:    info->type[0] = (disk_type & 0xFF000000)>>24;
./disk/part_amiga.c:    info->type[1] = (disk_type & 0x00FF0000)>>16;
./disk/part_amiga.c:    info->type[2] = (disk_type & 0x0000FF00)>>8;
./disk/part_amiga.c:    info->type[3] = '\\';
./disk/part_amiga.c:    info->type[4] = (disk_type & 0x000000FF) + '0';
./disk/part_amiga.c:    info->type[5] = 0;
./disk/part_dos.c:			info->blksz = 512;
./disk/part_dos.c:			info->start = ext_part_sector + le32_to_int (pt->start4);
./disk/part_dos.c:			info->size  = le32_to_int (pt->size4);
./disk/part_dos.c:					sprintf ((char *)info->name, "hd%c%d",
./disk/part_dos.c:					sprintf ((char *)info->name, "sd%c%d",
./disk/part_dos.c:					sprintf ((char *)info->name, "usbd%c%d",
./disk/part_dos.c:					sprintf ((char *)info->name, "docd%c%d",
./disk/part_dos.c:					sprintf ((char *)info->name, "xx%c%d",
./disk/part_dos.c:			/* sprintf(info->type, "%d, pt->sys_ind); */
./disk/part_dos.c:			sprintf ((char *)info->type, "U-Boot");
./CHANGELOG-before-U-Boot-1.1.5:* Fix drivers/cfi_flash.c: use info->reset_cmd instead of FLASH_CMD_RESET
./fs/cramfs/cramfs.c:	if (info->dev->id->type != MTD_DEV_TYPE_NOR)
./common/cmd_flash.c:		for (i = 0; i < info->sector_count && !found; ++i) {
./common/cmd_flash.c:			if (i == info->sector_count - 1) {
./common/cmd_flash.c:				sector_end_addr = info->start[0] +
./common/cmd_flash.c:								info->size - 1;
./common/cmd_flash.c:				sector_end_addr = info->start[i+1] - 1;
./common/cmd_flash.c:						*addr >= info->start[i]) {
./common/cmd_flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./common/cmd_flash.c:		b_end = info->start[0] + info->size - 1;	/* bank end addr */
./common/cmd_flash.c:		s_end = info->sector_count - 1;			/* last sector   */
./common/cmd_flash.c:		for (sect=0; sect < info->sector_count; ++sect) {
./common/cmd_flash.c:			end = (sect == s_end) ? b_end : info->start[sect + 1] - 1;
./common/cmd_flash.c:			if (addr_last < info->start[sect])
./common/cmd_flash.c:			if (addr_first == info->start[sect]) {
./common/cmd_flash.c:			addr_first = (sect == s_end) ? b_end + 1: info->start[sect + 1];
./common/cmd_flash.c:		} else if (addr_first >= info->start[0] && addr_first < b_end) {
./common/cmd_flash.c:			rcode = flash_erase (info, 0, info->sector_count-1);
./common/cmd_flash.c:			sect_first, sect_last, (info-flash_info)+1);
./common/cmd_flash.c:				addr_first = part->offset + info->start[0];
./common/cmd_flash.c:		rcode = flash_erase (info, 0, info->sector_count-1);
./common/cmd_flash.c:					info->start[s_first[bank]],
./common/cmd_flash.c:					(s_last[bank] == info->sector_count) ?
./common/cmd_flash.c:						info->start[0] + info->size - 1:
./common/cmd_flash.c:						info->start[s_last[bank]+1] - 1,
./common/cmd_flash.c:			if (info->flash_id == FLASH_UNKNOWN) {
./common/cmd_flash.c:			for (i=0; i<info->sector_count; ++i) {
./common/cmd_flash.c:				info->protect[i] = p;
./common/cmd_flash.c:			(info-flash_info)+1);
./common/cmd_flash.c:			info->protect[i] = p;
./common/cmd_flash.c:				addr_first = part->offset + info->start[0];
./common/cmd_flash.c:		if (info->flash_id == FLASH_UNKNOWN) {
./common/cmd_flash.c:		for (i=0; i<info->sector_count; ++i) {
./common/cmd_flash.c:			info->protect[i] = p;
./common/cmd_flash.c:			if (info->flash_id == FLASH_UNKNOWN) {
./common/cmd_flash.c:					info->protect[i] = p;
./common/cmd_bootm.c:		if (info->flash_id == FLASH_UNKNOWN)
./common/cmd_bootm.c:		for (j = 0; j < info->sector_count; ++j) {
./common/cmd_bootm.c:			hdr = (void *)info->start[j];
./common/cmd_ubi.c:			       ubi_dev.nr, ubi_dev.mtd_info->name, ubi_dev.part_name);
./common/update.c:		if (info->sector_count == 0)
./common/update.c:		if (addr_last > info->start[0] + info->size - 1)
./common/update.c:			addr_last = info->start[0] + info->size - 1;
./common/update.c:		if (addr_first < info->start[0])
./common/update.c:			addr_first = info->start[0];
./common/update.c:		for (i = 0; i < info->sector_count; i++) {
./common/update.c:				s = info->start[i];
./common/update.c:					sp_info_ptr[i] = info->protect[i];
./common/update.c:				info->protect[i] = prot;
./common/flash.c:	ulong b_end = info->start[0] + info->size - 1;	/* bank end address */
./common/flash.c:	short s_end = info->sector_count - 1;	/* index of last sector */
./common/flash.c:	if (info->sector_count == 0 || info->size == 0 || to < from) {
./common/flash.c:	if (info->flash_id == FLASH_UNKNOWN ||
./common/flash.c:	    to < info->start[0] || from > b_end) {
./common/flash.c:	for (i=0; i<info->sector_count; ++i) {
./common/flash.c:		end = (i == s_end) ? b_end : info->start[i + 1] - 1;
./common/flash.c:		if (from <= end && to >= info->start[i]) {
./common/flash.c:				info->protect[i] = 0;
./common/flash.c:				info->protect[i] = 1;
./common/flash.c:		if (info->flash_id != FLASH_UNKNOWN &&
./common/flash.c:		    addr >= info->start[0] &&
./common/flash.c:		     * info->start[0] + info->size wraps back to 0.
./common/flash.c:		    addr <= info->start[0] + info->size - 1) {
./common/flash.c:		ulong b_end = info->start[0] + info->size;	/* bank end addr */
./common/flash.c:		short s_end = info->sector_count - 1;
./common/flash.c:		for (i=0; i<info->sector_count; ++i) {
./common/flash.c:			ulong e_addr = (i == s_end) ? b_end : info->start[i + 1];
./common/flash.c:			if ((end >= info->start[i]) && (addr < e_addr) &&
./common/flash.c:			    (info->protect[i] != 0) ) {
./common/flash.c:		len = info->start[0] + info->size - addr;
./common/xyzModem.c:  if (info->mode == xyzModem_zmodem)
./common/xyzModem.c:  if (info->chan >= 0)
./common/xyzModem.c:      CYGACC_CALL_IF_SET_CONSOLE_COMM (info->chan);
./common/xyzModem.c:  xyz.mode = info->mode;
./cpu/mpc512x/diu.c:	pGD->winSizeY = yres - info->logo_height;
./cpu/mpc512x/diu.c:	pGD->memSize = info->screen_size - info->logo_size;
./cpu/mcf532x/cpu_init.c:		if (info->iobase == CONFIG_SYS_FEC0_IOBASE) {
./cpu/mcf532x/cpu_init.c:		if (info->iobase == CONFIG_SYS_FEC0_IOBASE) {
./cpu/mcf5445x/cpu_init.c:		if (info->iobase == CONFIG_SYS_FEC0_IOBASE)
./cpu/mcf5445x/cpu_init.c:		if (info->iobase == CONFIG_SYS_FEC0_IOBASE)
./cpu/arm720t/lpc2292/flash.c:	for(i = 1; i < (info->sector_count); i++) {
./cpu/arm720t/lpc2292/flash.c:		if (flash_addr < (info->start[i]))
./cpu/arm720t/lpc2292/flash.c:		if (info->protect[sect]) {
./cpu/mcf547x_8x/cpu_init.c:		if (info->iobase == CONFIG_SYS_FEC0_IOBASE)
./cpu/mcf547x_8x/cpu_init.c:		if (info->iobase == CONFIG_SYS_FEC0_IOBASE)
./cpu/mpc8xxx/ddr/main.c:		switch (pinfo->memctl_opts[i].data_bus_width) {
./cpu/mpc8xxx/ddr/main.c:				dw = pinfo->dimm_params[i][j].data_width;
./cpu/mpc8xxx/ddr/main.c:				if (pinfo->dimm_params[i][j].n_ranks
./cpu/mpc8xxx/ddr/main.c:		if (pinfo->memctl_opts[i].memctl_interleaving) {
./cpu/mpc8xxx/ddr/main.c:		if (pinfo->memctl_opts[i].ba_intlv_ctl) {
./cpu/mpc8xxx/ddr/main.c:			pinfo->common_timing_params[i].base_address = 0ull;
./cpu/mpc8xxx/ddr/main.c:					= pinfo->dimm_params[i][j].capacity;
./cpu/mpc8xxx/ddr/main.c:				pinfo->dimm_params[i][j].base_address = addr;
./cpu/mpc8xxx/ddr/main.c:		pinfo->common_timing_params[0].total_mem = total_mem_per_ctlr;
./cpu/mpc8xxx/ddr/main.c:			pinfo->common_timing_params[i].base_address =
./cpu/mpc8xxx/ddr/main.c:					pinfo->dimm_params[i][j].capacity;
./cpu/mpc8xxx/ddr/main.c:				pinfo->dimm_params[i][j].base_address =
./cpu/mpc8xxx/ddr/main.c:			pinfo->common_timing_params[i].total_mem =
./cpu/mpc8xxx/ddr/main.c:	fsl_ddr_cfg_regs_t *ddr_reg = pinfo->fsl_ddr_config_reg;
./cpu/mpc8xxx/ddr/main.c:	common_timing_params_t *timing_params = pinfo->common_timing_params;
./cpu/mpc8xxx/ddr/main.c:			fsl_ddr_get_spd(pinfo->spd_installed_dimms[i], i);
./cpu/mpc8xxx/ddr/main.c:					&(pinfo->spd_installed_dimms[i][j]);
./cpu/mpc8xxx/ddr/main.c:					&(pinfo->dimm_params[i][j]);
./cpu/mpc8xxx/ddr/main.c:				pinfo->dimm_params[i],
./cpu/mpc8xxx/ddr/main.c:					&pinfo->memctl_opts[i],
./cpu/mpc8xxx/ddr/main.c:					pinfo->dimm_params[i], i);
./cpu/mpc8xxx/ddr/main.c:					&pinfo->memctl_opts[i],
./cpu/mpc8xxx/ddr/main.c:					pinfo->dimm_params[i],
./cpu/mcf52x2/cpu_init.c:		if (info->iobase == CONFIG_SYS_FEC0_IOBASE) {
./cpu/mcf52x2/cpu_init.c:		if (info->iobase == CONFIG_SYS_FEC0_IOBASE) {
./cpu/mpc85xx/ether_fcc.c:    cpm->im_cpm_mux.cmxfcr = (cpm->im_cpm_mux.cmxfcr & ~info->cmxfcr_mask) |
./cpu/mpc85xx/ether_fcc.c:							info->cmxfcr_value;
./cpu/mpc85xx/ether_fcc.c:    if(info->ether_index == 0) {
./cpu/mpc85xx/ether_fcc.c:    } else if (info->ether_index == 1) {
./cpu/mpc85xx/ether_fcc.c:    } else if (info->ether_index == 2) {
./cpu/mpc85xx/ether_fcc.c:    if(info->ether_index == 0) {
./cpu/mpc85xx/ether_fcc.c:    } else if (info->ether_index == 1){
./cpu/mpc85xx/ether_fcc.c:    } else if (info->ether_index == 2){
./cpu/mpc85xx/ether_fcc.c:    if(info->ether_index == 0) {
./cpu/mpc85xx/ether_fcc.c:    } else if (info->ether_index == 1) {
./cpu/mpc85xx/ether_fcc.c:    } else if (info->ether_index == 2) {
./cpu/mpc85xx/ether_fcc.c:    pram_ptr = (fcc_enet_t *)&(cpm->im_dprambase[info->proff_enet]);
./cpu/mpc85xx/ether_fcc.c:    mem_addr = CPM_FCC_SPECIAL_BASE + ((info->ether_index) * 64);
./cpu/mpc85xx/ether_fcc.c:    if(info->ether_index == 0) {
./cpu/mpc85xx/ether_fcc.c:    } else if (info->ether_index == 1) {
./cpu/mpc85xx/ether_fcc.c:    } else if (info->ether_index == 2) {
./cpu/mpc85xx/ether_fcc.c:    cp->cpcr = mk_cr_cmd(info->cpm_cr_enet_page,
./cpu/mpc85xx/ether_fcc.c:			    info->cpm_cr_enet_sblock,
./cpu/mpc85xx/ether_fcc.c:    if(info->ether_index == 0) {
./cpu/mpc85xx/ether_fcc.c:    } else if (info->ether_index == 1) {
./cpu/mpc85xx/ether_fcc.c:    } else if (info->ether_index == 2) {
./cpu/mpc85xx/ether_fcc.c:    if(info->ether_index == 0) {
./cpu/mpc85xx/ether_fcc.c:    } else if(info->ether_index == 1) {
./cpu/mpc85xx/ether_fcc.c:    } else if(info->ether_index == 2) {
./cpu/leon3/ambapp.c:		ahb = info->masters;
./cpu/leon3/ambapp.c:		ahb = info->slaves;
./cpu/leon3/ambapp.c:		ahb = info->masters;
./cpu/leon3/ambapp.c:		ahb = info->slaves;
./cpu/mpc8260/ether_fcc.c:    immr->im_cpmux.cmx_fcr = (immr->im_cpmux.cmx_fcr & ~info->cmxfcr_mask) |
./cpu/mpc8260/ether_fcc.c:							info->cmxfcr_value;
./cpu/mpc8260/ether_fcc.c:    immr->im_fcc[info->ether_index].fcc_gfmr =
./cpu/mpc8260/ether_fcc.c:    immr->im_fcc[info->ether_index].fcc_fpsmr = CONFIG_SYS_FCC_PSMR | FCC_PSMR_ENCRC;
./cpu/mpc8260/ether_fcc.c:    immr->im_fcc[info->ether_index].fcc_fdsr = 0xD555;
./cpu/mpc8260/ether_fcc.c:    pram_ptr = (fcc_enet_t *)&(immr->im_dprambase[info->proff_enet]);
./cpu/mpc8260/ether_fcc.c:    mem_addr = CPM_FCC_SPECIAL_BASE + ((info->ether_index) * 64);
./cpu/mpc8260/ether_fcc.c:    immr->im_fcc[info->ether_index].fcc_fcce = ~0x0;
./cpu/mpc8260/ether_fcc.c:    immr->im_fcc[info->ether_index].fcc_fccm = 0;
./cpu/mpc8260/ether_fcc.c:    cp->cp_cpcr = mk_cr_cmd(info->cpm_cr_enet_page,
./cpu/mpc8260/ether_fcc.c:			    info->cpm_cr_enet_sblock,
./cpu/mpc8260/ether_fcc.c:    immr->im_fcc[info->ether_index].fcc_gfmr |= FCC_GFMR_ENT | FCC_GFMR_ENR;
./cpu/mpc8260/ether_fcc.c:    immr->im_fcc[info->ether_index].fcc_gfmr &=
./CHANGELOG:    stored in mii_info->dev->name. Usage example is updated for uec.
./CHANGELOG:    flash_info->start was a physical address.  However, from u-boot's
./CHANGELOG:    that the code which initializes the info->start field calls
./CHANGELOG:    flash.  Unfortunately, it does this with an info->portwidth set to 0x10
./CHANGELOG:    stack by sticking info->portwidth bytes into a cfiword_t variable that
